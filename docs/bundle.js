(function () {
  'use strict';

  function styleInject(css, ref) {
    if ( ref === void 0 ) { ref = {}; }
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = "/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n";
  styleInject(css);

  var css$1 = "@charset \"UTF-8\";\n\n/* Import ET Book styles\n   adapted from https://github.com/edwardtufte/et-book/blob/gh-pages/et-book.css */\n\n@font-face { font-family: \"et-book\";\n             src: url(\"et-book/et-book-roman-line-figures/et-book-roman-line-figures.eot\");\n             src: url(\"et-book/et-book-roman-line-figures/et-book-roman-line-figures.eot?#iefix\") format(\"embedded-opentype\"), url(\"et-book/et-book-roman-line-figures/et-book-roman-line-figures.woff\") format(\"woff\"), url(\"et-book/et-book-roman-line-figures/et-book-roman-line-figures.ttf\") format(\"truetype\"), url(\"et-book/et-book-roman-line-figures/et-book-roman-line-figures.svg#etbookromanosf\") format(\"svg\");\n             font-weight: normal;\n             font-style: normal; }\n\n@font-face { font-family: \"et-book\";\n             src: url(\"et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.eot\");\n             src: url(\"et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.eot?#iefix\") format(\"embedded-opentype\"), url(\"et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.woff\") format(\"woff\"), url(\"et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.ttf\") format(\"truetype\"), url(\"et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.svg#etbookromanosf\") format(\"svg\");\n             font-weight: normal;\n             font-style: italic; }\n\n@font-face { font-family: \"et-book\";\n             src: url(\"et-book/et-book-bold-line-figures/et-book-bold-line-figures.eot\");\n             src: url(\"et-book/et-book-bold-line-figures/et-book-bold-line-figures.eot?#iefix\") format(\"embedded-opentype\"), url(\"et-book/et-book-bold-line-figures/et-book-bold-line-figures.woff\") format(\"woff\"), url(\"et-book/et-book-bold-line-figures/et-book-bold-line-figures.ttf\") format(\"truetype\"), url(\"et-book/et-book-bold-line-figures/et-book-bold-line-figures.svg#etbookromanosf\") format(\"svg\");\n             font-weight: bold;\n             font-style: normal; }\n\n@font-face { font-family: \"et-book-roman-old-style\";\n             src: url(\"et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.eot\");\n             src: url(\"et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.eot?#iefix\") format(\"embedded-opentype\"), url(\"et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.woff\") format(\"woff\"), url(\"et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.ttf\") format(\"truetype\"), url(\"et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.svg#etbookromanosf\") format(\"svg\");\n             font-weight: normal;\n             font-style: normal; }\n\n/* Tufte CSS styles */\nhtml { font-size: 14px; }\n\nbody { width: 87.5%;\n       margin-left: auto;\n       margin-right: auto;\n       padding-left: 12.5%;\n       font-family: et-book, Palatino, \"Palatino Linotype\", \"Palatino LT STD\", \"Book Antiqua\", Georgia, serif;\n       background-color: #fffff8;\n       color: #111;\n       max-width: 1400px;\n       counter-reset: sidenote-counter; }\n\nh1 { font-weight: 400;\n     margin-top: 4rem;\n     margin-bottom: 1.5rem;\n     font-size: 3.2rem;\n     line-height: 1; }\n\nh2 { font-style: italic;\n     font-weight: 400;\n     margin-top: 2.1rem;\n     margin-bottom: 1.4rem;\n     font-size: 2.2rem;\n     line-height: 1; }\n\nh3 { font-style: italic;\n     font-weight: 400;\n     font-size: 1.7rem;\n     margin-top: 2rem;\n     margin-bottom: 1.4rem;\n     line-height: 1; }\n\nhr { display: block;\n     height: 1px;\n     width: 55%;\n     border: 0;\n     border-top: 1px solid #ccc;\n     margin: 1em 0;\n     padding: 0; }\n\np.subtitle { font-style: italic;\n             margin-top: 1rem;\n             margin-bottom: 1rem;\n             font-size: 1.8rem;\n             display: block;\n             line-height: 1; }\n\n.numeral { font-family: et-book-roman-old-style; }\n\n.danger { color: red; }\n\narticle { position: relative;\n          padding: 5rem 0rem; }\n\nsection { padding-top: 1rem;\n          padding-bottom: 1rem; }\n\np, ol, ul { font-size: 1.4rem;\n            line-height: 2rem; }\n\np { margin-top: 1.4rem;\n    margin-bottom: 1.4rem;\n    padding-right: 0;\n    vertical-align: baseline; }\n\n/* Chapter Epigraphs */\ndiv.epigraph { margin: 5em 0; }\n\ndiv.epigraph > blockquote { margin-top: 3em;\n                            margin-bottom: 3em; }\n\ndiv.epigraph > blockquote, div.epigraph > blockquote > p { font-style: italic; }\n\ndiv.epigraph > blockquote > footer { font-style: normal; }\n\ndiv.epigraph > blockquote > footer > cite { font-style: italic; }\n/* end chapter epigraphs styles */\n\nblockquote { font-size: 1.4rem; }\n\nblockquote p { width: 55%;\n               margin-right: 40px; }\n\nblockquote footer { width: 55%;\n                    font-size: 1.1rem;\n                    text-align: right; }\n\n/* section > p, section > footer, section > table { width: 55%; } */\n\n/* 50 + 5 == 55, to be the same width as paragraph */\n/* section > ol, section > ul { width: 50%; */\n                             /* -webkit-padding-start: 5%; } */\n\nli:not(:first-child) { margin-top: 0.25rem; }\n\nfigure { padding: 0;\n         border: 0;\n         font-size: 100%;\n         font: inherit;\n         vertical-align: baseline;\n         max-width: 55%;\n         -webkit-margin-start: 0;\n         -webkit-margin-end: 0;\n         margin: 0 0 3em 0; }\n\nfigcaption { float: right;\n             clear: right;\n             margin-top: 0;\n             margin-bottom: 0;\n             font-size: 1.1rem;\n             line-height: 1.6;\n             vertical-align: baseline;\n             position: relative;\n             max-width: 40%; }\n\nfigure.fullwidth figcaption { margin-right: 24%; }\n\n/* Links: replicate underline that clears descenders */\na:link, a:visited { color: inherit; }\n\na:link { text-decoration: none;\n         background: -webkit-linear-gradient(#fffff8, #fffff8), -webkit-linear-gradient(#fffff8, #fffff8), -webkit-linear-gradient(#333, #333);\n         background: linear-gradient(#fffff8, #fffff8), linear-gradient(#fffff8, #fffff8), linear-gradient(#333, #333);\n         -webkit-background-size: 0.05em 1px, 0.05em 1px, 1px 1px;\n         -moz-background-size: 0.05em 1px, 0.05em 1px, 1px 1px;\n         background-size: 0.05em 1px, 0.05em 1px, 1px 1px;\n         background-repeat: no-repeat, no-repeat, repeat-x;\n         text-shadow: 0.03em 0 #fffff8, -0.03em 0 #fffff8, 0 0.03em #fffff8, 0 -0.03em #fffff8, 0.06em 0 #fffff8, -0.06em 0 #fffff8, 0.09em 0 #fffff8, -0.09em 0 #fffff8, 0.12em 0 #fffff8, -0.12em 0 #fffff8, 0.15em 0 #fffff8, -0.15em 0 #fffff8;\n         background-position: 0% 93%, 100% 93%, 0% 93%; }\n\n@media screen and (-webkit-min-device-pixel-ratio: 0) { a:link { background-position-y: 87%, 87%, 87%; } }\n\na:link::selection { text-shadow: 0.03em 0 #b4d5fe, -0.03em 0 #b4d5fe, 0 0.03em #b4d5fe, 0 -0.03em #b4d5fe, 0.06em 0 #b4d5fe, -0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe, -0.09em 0 #b4d5fe, 0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe, 0.15em 0 #b4d5fe, -0.15em 0 #b4d5fe;\n                    background: #b4d5fe; }\n\na:link::-moz-selection { text-shadow: 0.03em 0 #b4d5fe, -0.03em 0 #b4d5fe, 0 0.03em #b4d5fe, 0 -0.03em #b4d5fe, 0.06em 0 #b4d5fe, -0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe, -0.09em 0 #b4d5fe, 0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe, 0.15em 0 #b4d5fe, -0.15em 0 #b4d5fe;\n                         background: #b4d5fe; }\n\n/* Sidenotes, margin notes, figures, captions */\nimg { max-width: 100%; }\n\n.sidenote, .marginnote { float: right;\n                         clear: right;\n                         margin-right: -60%;\n                         width: 50%;\n                         margin-top: 0;\n                         margin-bottom: 0;\n                         font-size: 1.1rem;\n                         line-height: 1.3;\n                         vertical-align: baseline;\n                         position: relative; }\n\n.sidenote-number { counter-increment: sidenote-counter; }\n\n.sidenote-number:after, .sidenote:before { font-family: et-book-roman-old-style;\n                                           position: relative;\n                                           vertical-align: baseline; }\n\n.sidenote-number:after { content: counter(sidenote-counter);\n                         font-size: 1rem;\n                         top: -0.5rem;\n                         left: 0.1rem; }\n\n.sidenote:before { content: counter(sidenote-counter) \" \";\n                   font-size: 1rem;\n                   top: -0.5rem; }\n\nblockquote .sidenote, blockquote .marginnote { margin-right: -82%;\n                                               min-width: 59%;\n                                               text-align: left; }\n\ndiv.fullwidth, table.fullwidth { width: 100%; }\n\ndiv.table-wrapper { overflow-x: auto;\n                    font-family: \"Trebuchet MS\", \"Gill Sans\", \"Gill Sans MT\", sans-serif; }\n\n.sans { font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, sans-serif;\n        letter-spacing: .03em; }\n\ncode { font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n       font-size: 1.0rem;\n       line-height: 1.42; }\n\n.sans > code { font-size: 1.2rem; }\n\nh1 > code, h2 > code, h3 > code { font-size: 0.80em; }\n\n.marginnote > code, .sidenote > code { font-size: 1rem; }\n\npre.code { font-size: 0.9rem;\n           width: 52.5%;\n           margin-left: 2.5%;\n           overflow-x: auto; }\n\npre.code.fullwidth { width: 90%; }\n\n.fullwidth { max-width: 90%;\n             clear:both; }\n\nspan.newthought { font-variant: small-caps;\n                  font-size: 1.2em; }\n\ninput.margin-toggle { display: none; }\n\nlabel.sidenote-number { display: inline; }\n\nlabel.margin-toggle:not(.sidenote-number) { display: none; }\n\n.iframe-wrapper { position: relative;\n                  padding-bottom: 56.25%; /* 16:9 */\n                  padding-top: 25px;\n                  height: 0; }\n\n.iframe-wrapper iframe { position: absolute;\n                         top: 0;\n                         left: 0;\n                         width: 100%;\n                         height: 100%; }\n\n@media (max-width: 760px) { body { width: 84%;\n                                   padding-left: 8%;\n                                   padding-right: 8%; }\n                            hr, section > p, section > footer, section > table { width: 100%; }\n                            pre.code { width: 97%; }\n                            section > ol { width: 90%; }\n                            section > ul { width: 90%; }\n                            figure { max-width: 90%; }\n                            figcaption, figure.fullwidth figcaption { margin-right: 0%;\n                                                                      max-width: none; }\n                            blockquote { margin-left: 1.5em;\n                                         margin-right: 0em; }\n                            blockquote p, blockquote footer { width: 100%; }\n                            label.margin-toggle:not(.sidenote-number) { display: inline; }\n                            .sidenote, .marginnote { display: none; }\n                            .margin-toggle:checked + .sidenote,\n                            .margin-toggle:checked + .marginnote { display: block;\n                                                                   float: left;\n                                                                   left: 1rem;\n                                                                   clear: both;\n                                                                   width: 95%;\n                                                                   margin: 1rem 2.5%;\n                                                                   vertical-align: baseline;\n                                                                   position: relative; }\n                            label { cursor: pointer; }\n                            div.table-wrapper, table { width: 85%; }\n                            img { width: 100%; } }\n";
  styleInject(css$1);

  var css$2 = "body {\n  padding-left: 0 !important; }\n\narticle {\n  margin: auto;\n  max-width: 600px; }\n\n.row {\n  padding-bottom: 1em; }\n\n.inline {\n  display: inline-block; }\n\n.block {\n  display: block; }\n\n.pr {\n  padding-right: 1em; }\n\n.pb {\n  padding-bottom: 1em; }\n\n.flex {\n  display: flex;\n  /* border: 1px goldenrod solid */\n  width: 100%; }\n\n.fg {\n  flex-grow: 1; }\n\n.bar {\n  flex-grow: 1;\n  margin: auto 0.3em;\n  border-bottom: 1px black solid; }\n\n.end-bar {\n  flex-grow: 1;\n  margin: auto 0;\n  height: 1.4rem;\n  border-bottom: 1px black solid; }\n\n.eth {\n  display: inline-block;\n  position: relative;\n  margin-left: -50px;\n  bottom: 20px; }\n\ninput, label {\n  font-size: 1.4rem;\n  line-height: 2rem; }\n\nul {\n  list-style: none;\n  padding-left: 0; }\n\n.shadow {\n  width: 100%;\n  padding-right: 6px; }\n\ntextarea {\n  display: block;\n  border: none;\n  border-bottom: 2px #111111 solid;\n  background: aquamarine;\n  padding: .7rem;\n  font-size: 1.4rem;\n  width: 100%;\n  position: relative;\n  height: 8.4rem;\n  resize: none;\n  margin-bottom: 1.4rem; }\n\ntextarea:focus {\n  outline: none; }\n\ninput[type=\"submit\"] {\n  border: none;\n  font-style: italic;\n  padding: .7rem;\n  background: aquamarine;\n  box-shadow: 6px 6px crimson; }\n\ninput[type=\"submit\"]:focus {\n  outline: none; }\n\n.red {\n  color: crimson; }\n\n.info {\n  display: flex;\n  align-items: baseline; }\n\n.info > div {\n  font-size: 1.4rem;\n  margin-left: 1.4rem; }\n\n.rows > * {\n  padding-bottom: 1rem; }\n\n.error {\n  font-style: italic;\n  color: crimson; }\n\n.pending {\n  font-style: italic;\n  color: rgba(0, 0, 0, 0.6); }\n\n.expand {\n  flex-grow: 1; }\n";
  styleInject(css$2);

  /**
   * Shorter and fast way to select a single node in the DOM
   * @param   { String } selector - unique dom selector
   * @param   { Object } ctx - DOM node where the target of our search will is located
   * @returns { Object } dom node found
   */
  function $(selector, ctx) {
    return (ctx || document).querySelector(selector)
  }

  var
    // be aware, internal usage
    // ATTENTION: prefix the global dynamic variables with `__`
    // tags instances cache
    __TAGS_CACHE = [],
    // tags implementation cache
    __TAG_IMPL = {},
    YIELD_TAG = 'yield',

    /**
     * Const
     */
    GLOBAL_MIXIN = '__global_mixin',

    // riot specific prefixes or attributes
    ATTRS_PREFIX = 'riot-',

    // Riot Directives
    REF_DIRECTIVES = ['ref', 'data-ref'],
    IS_DIRECTIVE = 'data-is',
    CONDITIONAL_DIRECTIVE = 'if',
    LOOP_DIRECTIVE = 'each',
    LOOP_NO_REORDER_DIRECTIVE = 'no-reorder',
    SHOW_DIRECTIVE = 'show',
    HIDE_DIRECTIVE = 'hide',
    KEY_DIRECTIVE = 'key',
    RIOT_EVENTS_KEY = '__riot-events__',

    // for typeof == '' comparisons
    T_STRING = 'string',
    T_OBJECT = 'object',
    T_UNDEF  = 'undefined',
    T_FUNCTION = 'function',

    XLINK_NS = 'http://www.w3.org/1999/xlink',
    SVG_NS = 'http://www.w3.org/2000/svg',
    XLINK_REGEX = /^xlink:(\w+)/,

    WIN = typeof window === T_UNDEF ? /* istanbul ignore next */ undefined : window,

    // special native tags that cannot be treated like the others
    RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,
    RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,
    RE_EVENTS_PREFIX = /^on/,
    RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,
    // some DOM attributes must be normalized
    CASE_SENSITIVE_ATTRIBUTES = {
      'viewbox': 'viewBox',
      'preserveaspectratio': 'preserveAspectRatio'
    },
    /**
     * Matches boolean HTML attributes in the riot tag definition.
     * With a long list like this, a regex is faster than `[].indexOf` in most browsers.
     * @const {RegExp}
     * @see [attributes.md](https://github.com/riot/compiler/blob/dev/doc/attributes.md)
     */
    RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,
    // version# for IE 8-11, 0 for others
    IE_VERSION = (WIN && WIN.document || /* istanbul ignore next */ {}).documentMode | 0;

  /**
   * Create a generic DOM node
   * @param   { String } name - name of the DOM node we want to create
   * @returns { Object } DOM node just created
   */
  function makeElement(name) {
    return name === 'svg' ? document.createElementNS(SVG_NS, name) : document.createElement(name)
  }

  /**
   * Set any DOM attribute
   * @param { Object } dom - DOM node we want to update
   * @param { String } name - name of the property we want to set
   * @param { String } val - value of the property we want to set
   */
  function setAttribute(dom, name, val) {
    var xlink = XLINK_REGEX.exec(name);
    if (xlink && xlink[1])
      { dom.setAttributeNS(XLINK_NS, xlink[1], val); }
    else
      { dom.setAttribute(name, val); }
  }

  var styleNode;
  // Create cache and shortcut to the correct property
  var cssTextProp;
  var byName = {};
  var needsInject = false;

  // skip the following code on the server
  if (WIN) {
    styleNode = ((function () {
      // create a new style element with the correct type
      var newNode = makeElement('style');
      // replace any user node or insert the new one into the head
      var userNode = $('style[type=riot]');

      setAttribute(newNode, 'type', 'text/css');
      /* istanbul ignore next */
      if (userNode) {
        if (userNode.id) { newNode.id = userNode.id; }
        userNode.parentNode.replaceChild(newNode, userNode);
      } else { document.head.appendChild(newNode); }

      return newNode
    }))();
    cssTextProp = styleNode.styleSheet;
  }

  /**
   * Object that will be used to inject and manage the css of every tag instance
   */
  var styleManager = {
    styleNode: styleNode,
    /**
     * Save a tag style to be later injected into DOM
     * @param { String } css - css string
     * @param { String } name - if it's passed we will map the css to a tagname
     */
    add: function add(css, name) {
      byName[name] = css;
      needsInject = true;
    },
    /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
    inject: function inject() {
      if (!WIN || !needsInject) { return }
      needsInject = false;
      var style = Object.keys(byName)
        .map(function (k) { return byName[k]; })
        .join('\n');
      /* istanbul ignore next */
      if (cssTextProp) { cssTextProp.cssText = style; }
      else { styleNode.innerHTML = style; }
    },

    /**
     * Remove a tag style of injected DOM later.
     * @param {String} name a registered tagname
     */
    remove: function remove(name) {
      delete byName[name];
      needsInject = true;
    }
  };

  /**
   * The riot template engine
   * @version v3.0.8
   */

  var skipRegex = (function () { //eslint-disable-line no-unused-vars

    var beforeReChars = '[{(,;:?=|&!^~>%*/';

    var beforeReWords = [
      'case',
      'default',
      'do',
      'else',
      'in',
      'instanceof',
      'prefix',
      'return',
      'typeof',
      'void',
      'yield'
    ];

    var wordsLastChar = beforeReWords.reduce(function (s, w) {
      return s + w.slice(-1)
    }, '');

    var RE_REGEX = /^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/;
    var RE_VN_CHAR = /[$\w]/;

    function prev (code, pos) {
      while (--pos >= 0 && /\s/.test(code[pos])){ }
      return pos
    }

    function _skipRegex (code, start) {

      var re = /.*/g;
      var pos = re.lastIndex = start++;
      var match = re.exec(code)[0].match(RE_REGEX);

      if (match) {
        var next = pos + match[0].length;

        pos = prev(code, pos);
        var c = code[pos];

        if (pos < 0 || ~beforeReChars.indexOf(c)) {
          return next
        }

        if (c === '.') {

          if (code[pos - 1] === '.') {
            start = next;
          }

        } else if (c === '+' || c === '-') {

          if (code[--pos] !== c ||
              (pos = prev(code, pos)) < 0 ||
              !RE_VN_CHAR.test(code[pos])) {
            start = next;
          }

        } else if (~wordsLastChar.indexOf(c)) {

          var end = pos + 1;

          while (--pos >= 0 && RE_VN_CHAR.test(code[pos])){ }
          if (~beforeReWords.indexOf(code.slice(pos + 1, end))) {
            start = next;
          }
        }
      }

      return start
    }

    return _skipRegex

  })();

  /**
   * riot.util.brackets
   *
   * - `brackets    ` - Returns a string or regex based on its parameter
   * - `brackets.set` - Change the current riot brackets
   *
   * @module
   */

  /* global riot */

  var brackets = (function (UNDEF) {

    var
      REGLOB = 'g',

      R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,

      R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,

      S_QBLOCKS = R_STRINGS.source + '|' +
        /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' +
        /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,

      UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'),

      NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g,

      S_QBLOCK2 = R_STRINGS.source + '|' + /(\/)(?![*\/])/.source,

      FINDBRACES = {
        '(': RegExp('([()])|'   + S_QBLOCK2, REGLOB),
        '[': RegExp('([[\\]])|' + S_QBLOCK2, REGLOB),
        '{': RegExp('([{}])|'   + S_QBLOCK2, REGLOB)
      },

      DEFAULT = '{ }';

    var _pairs = [
      '{', '}',
      '{', '}',
      /{[^}]*}/,
      /\\([{}])/g,
      /\\({)|{/g,
      RegExp('\\\\(})|([[({])|(})|' + S_QBLOCK2, REGLOB),
      DEFAULT,
      /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
      /(^|[^\\]){=[\S\s]*?}/
    ];

    var
      cachedBrackets = UNDEF,
      _regex,
      _cache = [],
      _settings;

    function _loopback (re) { return re }

    function _rewrite (re, bp) {
      if (!bp) { bp = _cache; }
      return new RegExp(
        re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : ''
      )
    }

    function _create (pair) {
      if (pair === DEFAULT) { return _pairs }

      var arr = pair.split(' ');

      if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
        throw new Error('Unsupported brackets "' + pair + '"')
      }
      arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));

      arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
      arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
      arr[6] = _rewrite(_pairs[6], arr);
      arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCK2, REGLOB);
      arr[8] = pair;
      return arr
    }

    function _brackets (reOrIdx) {
      return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
    }

    _brackets.split = function split (str, tmpl, _bp) {
      // istanbul ignore next: _bp is for the compiler
      if (!_bp) { _bp = _cache; }

      var
        parts = [],
        match,
        isexpr,
        start,
        pos,
        re = _bp[6];

      var qblocks = [];
      var prevStr = '';
      var mark, lastIndex;

      isexpr = start = re.lastIndex = 0;

      while ((match = re.exec(str))) {

        lastIndex = re.lastIndex;
        pos = match.index;

        if (isexpr) {

          if (match[2]) {

            var ch = match[2];
            var rech = FINDBRACES[ch];
            var ix = 1;

            rech.lastIndex = lastIndex;
            while ((match = rech.exec(str))) {
              if (match[1]) {
                if (match[1] === ch) { ++ix; }
                else if (!--ix) { break }
              } else {
                rech.lastIndex = pushQBlock(match.index, rech.lastIndex, match[2]);
              }
            }
            re.lastIndex = ix ? str.length : rech.lastIndex;
            continue
          }

          if (!match[3]) {
            re.lastIndex = pushQBlock(pos, lastIndex, match[4]);
            continue
          }
        }

        if (!match[1]) {
          unescapeStr(str.slice(start, pos));
          start = re.lastIndex;
          re = _bp[6 + (isexpr ^= 1)];
          re.lastIndex = start;
        }
      }

      if (str && start < str.length) {
        unescapeStr(str.slice(start));
      }

      parts.qblocks = qblocks;

      return parts

      function unescapeStr (s) {
        if (prevStr) {
          s = prevStr + s;
          prevStr = '';
        }
        if (tmpl || isexpr) {
          parts.push(s && s.replace(_bp[5], '$1'));
        } else {
          parts.push(s);
        }
      }

      function pushQBlock(_pos, _lastIndex, slash) { //eslint-disable-line
        if (slash) {
          _lastIndex = skipRegex(str, _pos);
        }

        if (tmpl && _lastIndex > _pos + 2) {
          mark = '\u2057' + qblocks.length + '~';
          qblocks.push(str.slice(_pos, _lastIndex));
          prevStr += str.slice(start, _pos) + mark;
          start = _lastIndex;
        }
        return _lastIndex
      }
    };

    _brackets.hasExpr = function hasExpr (str) {
      return _cache[4].test(str)
    };

    _brackets.loopKeys = function loopKeys (expr) {
      var m = expr.match(_cache[9]);

      return m
        ? { key: m[1], pos: m[2], val: _cache[0] + m[3].trim() + _cache[1] }
        : { val: expr.trim() }
    };

    _brackets.array = function array (pair) {
      return pair ? _create(pair) : _cache
    };

    function _reset (pair) {
      if ((pair || (pair = DEFAULT)) !== _cache[8]) {
        _cache = _create(pair);
        _regex = pair === DEFAULT ? _loopback : _rewrite;
        _cache[9] = _regex(_pairs[9]);
      }
      cachedBrackets = pair;
    }

    function _setSettings (o) {
      var b;

      o = o || {};
      b = o.brackets;
      Object.defineProperty(o, 'brackets', {
        set: _reset,
        get: function () { return cachedBrackets },
        enumerable: true
      });
      _settings = o;
      _reset(b);
    }

    Object.defineProperty(_brackets, 'settings', {
      set: _setSettings,
      get: function () { return _settings }
    });

    /* istanbul ignore next: in the browser riot is always in the scope */
    _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
    _brackets.set = _reset;
    _brackets.skipRegex = skipRegex;

    _brackets.R_STRINGS = R_STRINGS;
    _brackets.R_MLCOMMS = R_MLCOMMS;
    _brackets.S_QBLOCKS = S_QBLOCKS;
    _brackets.S_QBLOCK2 = S_QBLOCK2;

    return _brackets

  })();

  /**
   * @module tmpl
   *
   * tmpl          - Root function, returns the template value, render with data
   * tmpl.hasExpr  - Test the existence of a expression inside a string
   * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
   */

  var tmpl = (function () {

    var _cache = {};

    function _tmpl (str, data) {
      if (!str) { return str }

      return (_cache[str] || (_cache[str] = _create(str))).call(
        data, _logErr.bind({
          data: data,
          tmpl: str
        })
      )
    }

    _tmpl.hasExpr = brackets.hasExpr;

    _tmpl.loopKeys = brackets.loopKeys;

    // istanbul ignore next
    _tmpl.clearCache = function () { _cache = {}; };

    _tmpl.errorHandler = null;

    function _logErr (err, ctx) {

      err.riotData = {
        tagName: ctx && ctx.__ && ctx.__.tagName,
        _riot_id: ctx && ctx._riot_id  //eslint-disable-line camelcase
      };

      if (_tmpl.errorHandler) { _tmpl.errorHandler(err); }
      else if (
        typeof console !== 'undefined' &&
        typeof console.error === 'function'
      ) {
        console.error(err.message);
        console.log('<%s> %s', err.riotData.tagName || 'Unknown tag', this.tmpl); // eslint-disable-line
        console.log(this.data); // eslint-disable-line
      }
    }

    function _create (str) {
      var expr = _getTmpl(str);

      if (expr.slice(0, 11) !== 'try{return ') { expr = 'return ' + expr; }

      return new Function('E', expr + ';')    // eslint-disable-line no-new-func
    }

    var RE_DQUOTE = /\u2057/g;
    var RE_QBMARK = /\u2057(\d+)~/g;

    function _getTmpl (str) {
      var parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
      var qstr = parts.qblocks;
      var expr;

      if (parts.length > 2 || parts[0]) {
        var i, j, list = [];

        for (i = j = 0; i < parts.length; ++i) {

          expr = parts[i];

          if (expr && (expr = i & 1

              ? _parseExpr(expr, 1, qstr)

              : '"' + expr
                  .replace(/\\/g, '\\\\')
                  .replace(/\r\n?|\n/g, '\\n')
                  .replace(/"/g, '\\"') +
                '"'

            )) { list[j++] = expr; }

        }

        expr = j < 2 ? list[0]
             : '[' + list.join(',') + '].join("")';

      } else {

        expr = _parseExpr(parts[1], 0, qstr);
      }

      if (qstr.length) {
        expr = expr.replace(RE_QBMARK, function (_, pos) {
          return qstr[pos]
            .replace(/\r/g, '\\r')
            .replace(/\n/g, '\\n')
        });
      }
      return expr
    }

    var RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/;
    var
      RE_BREND = {
        '(': /[()]/g,
        '[': /[[\]]/g,
        '{': /[{}]/g
      };

    function _parseExpr (expr, asText, qstr) {

      expr = expr
        .replace(/\s+/g, ' ').trim()
        .replace(/\ ?([[\({},?\.:])\ ?/g, '$1');

      if (expr) {
        var
          list = [],
          cnt = 0,
          match;

        while (expr &&
              (match = expr.match(RE_CSNAME)) &&
              !match.index
          ) {
          var
            key,
            jsb,
            re = /,|([[{(])|$/g;

          expr = RegExp.rightContext;
          key  = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];

          while (jsb = (match = re.exec(expr))[1]) { skipBraces(jsb, re); }

          jsb  = expr.slice(0, match.index);
          expr = RegExp.rightContext;

          list[cnt++] = _wrapExpr(jsb, 1, key);
        }

        expr = !cnt ? _wrapExpr(expr, asText)
             : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0];
      }
      return expr

      function skipBraces (ch, re) {
        var
          mm,
          lv = 1,
          ir = RE_BREND[ch];

        ir.lastIndex = re.lastIndex;
        while (mm = ir.exec(expr)) {
          if (mm[0] === ch) { ++lv; }
          else if (!--lv) { break }
        }
        re.lastIndex = lv ? expr.length : ir.lastIndex;
      }
    }

    // istanbul ignore next: not both
    var // eslint-disable-next-line max-len
      JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').',
      JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,
      JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;

    function _wrapExpr (expr, asText, key) {
      var tb;

      expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
        if (mvar) {
          pos = tb ? 0 : pos + match.length;

          if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
            match = p + '("' + mvar + JS_CONTEXT + mvar;
            if (pos) { tb = (s = s[pos]) === '.' || s === '(' || s === '['; }
          } else if (pos) {
            tb = !JS_NOPROPS.test(s.slice(pos));
          }
        }
        return match
      });

      if (tb) {
        expr = 'try{return ' + expr + '}catch(e){E(e,this)}';
      }

      if (key) {

        expr = (tb
            ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')'
          ) + '?"' + key + '":""';

      } else if (asText) {

        expr = 'function(v){' + (tb
            ? expr.replace('return ', 'v=') : 'v=(' + expr + ')'
          ) + ';return v||v===0?v:""}.call(this)';
      }

      return expr
    }

    _tmpl.version = brackets.version = 'v3.0.8';

    return _tmpl

  })();

  var observable = function(el) {

    /**
     * Extend the original object or create a new empty one
     * @type { Object }
     */

    el = el || {};

    /**
     * Private variables
     */
    var callbacks = {},
      slice = Array.prototype.slice;

    /**
     * Public Api
     */

    // extend the el object adding the observable methods
    Object.defineProperties(el, {
      /**
       * Listen to the given `event` ands
       * execute the `callback` each time an event is triggered.
       * @param  { String } event - event id
       * @param  { Function } fn - callback function
       * @returns { Object } el
       */
      on: {
        value: function(event, fn) {
          if (typeof fn == 'function')
            { (callbacks[event] = callbacks[event] || []).push(fn); }
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Removes the given `event` listeners
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      off: {
        value: function(event, fn) {
          if (event == '*' && !fn) { callbacks = {}; }
          else {
            if (fn) {
              var arr = callbacks[event];
              for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                if (cb == fn) { arr.splice(i--, 1); }
              }
            } else { delete callbacks[event]; }
          }
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Listen to the given `event` and
       * execute the `callback` at most once
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      one: {
        value: function(event, fn) {
          function on() {
            el.off(event, on);
            fn.apply(el, arguments);
          }
          return el.on(event, on)
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Execute all callback functions that listen to
       * the given `event`
       * @param   { String } event - event id
       * @returns { Object } el
       */
      trigger: {
        value: function(event) {
          var arguments$1 = arguments;


          // getting the arguments
          var arglen = arguments.length - 1,
            args = new Array(arglen),
            fns,
            fn,
            i;

          for (i = 0; i < arglen; i++) {
            args[i] = arguments$1[i + 1]; // skip first argument
          }

          fns = slice.call(callbacks[event] || [], 0);

          for (i = 0; fn = fns[i]; ++i) {
            fn.apply(el, args);
          }

          if (callbacks['*'] && event != '*')
            { el.trigger.apply(el, ['*', event].concat(args)); }

          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      }
    });

    return el

  };

  /**
   * Short alias for Object.getOwnPropertyDescriptor
   */
  function getPropDescriptor (o, k) {
    return Object.getOwnPropertyDescriptor(o, k)
  }

  /**
   * Check if passed argument is undefined
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isUndefined(value) {
    return typeof value === T_UNDEF
  }

  /**
   * Check whether object's property could be overridden
   * @param   { Object }  obj - source object
   * @param   { String }  key - object property
   * @returns { Boolean } true if writable
   */
  function isWritable(obj, key) {
    var descriptor = getPropDescriptor(obj, key);
    return isUndefined(obj[key]) || descriptor && descriptor.writable
  }

  /**
   * Extend any object with other properties
   * @param   { Object } src - source object
   * @returns { Object } the resulting extended object
   *
   * var obj = { foo: 'baz' }
   * extend(obj, {bar: 'bar', foo: 'bar'})
   * console.log(obj) => {bar: 'bar', foo: 'bar'}
   *
   */
  function extend(src) {
    var obj;
    var i = 1;
    var args = arguments;
    var l = args.length;

    for (; i < l; i++) {
      if (obj = args[i]) {
        for (var key in obj) {
          // check if this property of the source object could be overridden
          if (isWritable(src, key))
            { src[key] = obj[key]; }
        }
      }
    }
    return src
  }

  /**
   * Alias for Object.create
   */
  function create(src) {
    return Object.create(src)
  }

  var settings = extend(create(brackets.settings), {
    skipAnonymousTags: true,
    // the "value" attributes will be preserved
    keepValueAttributes: false,
    // handle the auto updates on any DOM event
    autoUpdate: true
  });

  /**
   * Shorter and fast way to select multiple nodes in the DOM
   * @param   { String } selector - DOM selector
   * @param   { Object } ctx - DOM node where the targets of our search will is located
   * @returns { Object } dom nodes found
   */
  function $$(selector, ctx) {
    return [].slice.call((ctx || document).querySelectorAll(selector))
  }

  /**
   * Create a document text node
   * @returns { Object } create a text node to use as placeholder
   */
  function createDOMPlaceholder() {
    return document.createTextNode('')
  }

  /**
   * Toggle the visibility of any DOM node
   * @param   { Object }  dom - DOM node we want to hide
   * @param   { Boolean } show - do we want to show it?
   */

  function toggleVisibility(dom, show) {
    dom.style.display = show ? '' : 'none';
    dom.hidden = show ? false : true;
  }

  /**
   * Get the value of any DOM attribute on a node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { String } name - name of the attribute we want to get
   * @returns { String | undefined } name of the node attribute whether it exists
   */
  function getAttribute(dom, name) {
    return dom.getAttribute(name)
  }

  /**
   * Remove any DOM attribute from a node
   * @param   { Object } dom - DOM node we want to update
   * @param   { String } name - name of the property we want to remove
   */
  function removeAttribute(dom, name) {
    dom.removeAttribute(name);
  }

  /**
   * Set the inner html of any DOM node SVGs included
   * @param { Object } container - DOM node where we'll inject new html
   * @param { String } html - html to inject
   * @param { Boolean } isSvg - svg tags should be treated a bit differently
   */
  /* istanbul ignore next */
  function setInnerHTML(container, html, isSvg) {
    // innerHTML is not supported on svg tags so we neet to treat them differently
    if (isSvg) {
      var node = container.ownerDocument.importNode(
        new DOMParser()
          .parseFromString(("<svg xmlns=\"" + SVG_NS + "\">" + html + "</svg>"), 'application/xml')
          .documentElement,
        true
      );

      container.appendChild(node);
    } else {
      container.innerHTML = html;
    }
  }

  /**
   * Minimize risk: only zero or one _space_ between attr & value
   * @param   { String }   html - html string we want to parse
   * @param   { Function } fn - callback function to apply on any attribute found
   */
  function walkAttributes(html, fn) {
    if (!html) { return }
    var m;
    while (m = RE_HTML_ATTRS.exec(html))
      { fn(m[1].toLowerCase(), m[2] || m[3] || m[4]); }
  }

  /**
   * Create a document fragment
   * @returns { Object } document fragment
   */
  function createFragment() {
    return document.createDocumentFragment()
  }

  /**
   * Insert safely a tag to fix #1962 #1649
   * @param   { HTMLElement } root - children container
   * @param   { HTMLElement } curr - node to insert
   * @param   { HTMLElement } next - node that should preceed the current node inserted
   */
  function safeInsert(root, curr, next) {
    root.insertBefore(curr, next.parentNode && next);
  }

  /**
   * Convert a style object to a string
   * @param   { Object } style - style object we need to parse
   * @returns { String } resulting css string
   * @example
   * styleObjectToString({ color: 'red', height: '10px'}) // => 'color: red; height: 10px'
   */
  function styleObjectToString(style) {
    return Object.keys(style).reduce(function (acc, prop) {
      return (acc + " " + prop + ": " + (style[prop]) + ";")
    }, '')
  }

  /**
   * Walk down recursively all the children tags starting dom node
   * @param   { Object }   dom - starting node where we will start the recursion
   * @param   { Function } fn - callback to transform the child node just found
   * @param   { Object }   context - fn can optionally return an object, which is passed to children
   */
  function walkNodes(dom, fn, context) {
    if (dom) {
      var res = fn(dom, context);
      var next;
      // stop the recursion
      if (res === false) { return }

      dom = dom.firstChild;

      while (dom) {
        next = dom.nextSibling;
        walkNodes(dom, fn, res);
        dom = next;
      }
    }
  }



  var dom = /*#__PURE__*/Object.freeze({
    $$: $$,
    $: $,
    createDOMPlaceholder: createDOMPlaceholder,
    mkEl: makeElement,
    setAttr: setAttribute,
    toggleVisibility: toggleVisibility,
    getAttr: getAttribute,
    remAttr: removeAttribute,
    setInnerHTML: setInnerHTML,
    walkAttrs: walkAttributes,
    createFrag: createFragment,
    safeInsert: safeInsert,
    styleObjectToString: styleObjectToString,
    walkNodes: walkNodes
  });

  /**
   * Check against the null and undefined values
   * @param   { * }  value -
   * @returns {Boolean} -
   */
  function isNil(value) {
    return isUndefined(value) || value === null
  }

  /**
   * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
   * @param { * } value -
   * @returns { Boolean } -
   */
  function isBlank(value) {
    return isNil(value) || value === ''
  }

  /**
   * Check if passed argument is a function
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isFunction(value) {
    return typeof value === T_FUNCTION
  }

  /**
   * Check if passed argument is an object, exclude null
   * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isObject(value) {
    return value && typeof value === T_OBJECT // typeof null is 'object'
  }

  /**
   * Check if a DOM node is an svg tag or part of an svg
   * @param   { HTMLElement }  el - node we want to test
   * @returns {Boolean} true if it's an svg node
   */
  function isSvg(el) {
    var owner = el.ownerSVGElement;
    return !!owner || owner === null
  }

  /**
   * Check if passed argument is a kind of array
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isArray(value) {
    return Array.isArray(value) || value instanceof Array
  }

  /**
   * Check if the passed argument is a boolean attribute
   * @param   { String } value -
   * @returns { Boolean } -
   */
  function isBoolAttr(value) {
    return RE_BOOL_ATTRS.test(value)
  }

  /**
   * Check if passed argument is a string
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isString(value) {
    return typeof value === T_STRING
  }



  var check = /*#__PURE__*/Object.freeze({
    isBlank: isBlank,
    isFunction: isFunction,
    isObject: isObject,
    isSvg: isSvg,
    isWritable: isWritable,
    isArray: isArray,
    isBoolAttr: isBoolAttr,
    isNil: isNil,
    isString: isString,
    isUndefined: isUndefined
  });

  /**
   * Check whether an array contains an item
   * @param   { Array } array - target array
   * @param   { * } item - item to test
   * @returns { Boolean } -
   */
  function contains(array, item) {
    return array.indexOf(item) !== -1
  }

  /**
   * Specialized function for looping an array-like collection with `each={}`
   * @param   { Array } list - collection of items
   * @param   {Function} fn - callback function
   * @returns { Array } the array looped
   */
  function each(list, fn) {
    var len = list ? list.length : 0;
    var i = 0;
    for (; i < len; i++) { fn(list[i], i); }
    return list
  }

  /**
   * Faster String startsWith alternative
   * @param   { String } str - source string
   * @param   { String } value - test string
   * @returns { Boolean } -
   */
  function startsWith(str, value) {
    return str.slice(0, value.length) === value
  }

  /**
   * Function returning always a unique identifier
   * @returns { Number } - number from 0...n
   */
  var uid = (function uid() {
    var i = -1;
    return function () { return ++i; }
  })();

  /**
   * Helper function to set an immutable property
   * @param   { Object } el - object where the new property will be set
   * @param   { String } key - object key where the new property will be stored
   * @param   { * } value - value of the new property
   * @param   { Object } options - set the propery overriding the default options
   * @returns { Object } - the initial object
   */
  function define(el, key, value, options) {
    Object.defineProperty(el, key, extend({
      value: value,
      enumerable: false,
      writable: false,
      configurable: true
    }, options));
    return el
  }

  /**
   * Convert a string containing dashes to camel case
   * @param   { String } str - input string
   * @returns { String } my-string -> myString
   */
  function toCamel(str) {
    return str.replace(/-(\w)/g, function (_, c) { return c.toUpperCase(); })
  }

  /**
   * Warn a message via console
   * @param   {String} message - warning message
   */
  function warn(message) {
    if (console && console.warn) { console.warn(message); }
  }



  var misc = /*#__PURE__*/Object.freeze({
    contains: contains,
    each: each,
    getPropDescriptor: getPropDescriptor,
    startsWith: startsWith,
    uid: uid,
    defineProperty: define,
    objectCreate: create,
    extend: extend,
    toCamel: toCamel,
    warn: warn
  });

  /**
   * Set the property of an object for a given key. If something already
   * exists there, then it becomes an array containing both the old and new value.
   * @param { Object } obj - object on which to set the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be set
   * @param { Boolean } ensureArray - ensure that the property remains an array
   * @param { Number } index - add the new item in a certain array position
   */
  function arrayishAdd(obj, key, value, ensureArray, index) {
    var dest = obj[key];
    var isArr = isArray(dest);
    var hasIndex = !isUndefined(index);

    if (dest && dest === value) { return }

    // if the key was never set, set it once
    if (!dest && ensureArray) { obj[key] = [value]; }
    else if (!dest) { obj[key] = value; }
    // if it was an array and not yet set
    else {
      if (isArr) {
        var oldIndex = dest.indexOf(value);
        // this item never changed its position
        if (oldIndex === index) { return }
        // remove the item from its old position
        if (oldIndex !== -1) { dest.splice(oldIndex, 1); }
        // move or add the item
        if (hasIndex) {
          dest.splice(index, 0, value);
        } else {
          dest.push(value);
        }
      } else { obj[key] = [dest, value]; }
    }
  }

  /**
   * Detect the tag implementation by a DOM node
   * @param   { Object } dom - DOM node we need to parse to get its tag implementation
   * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
   */
  function get(dom) {
    return dom.tagName && __TAG_IMPL[getAttribute(dom, IS_DIRECTIVE) ||
      getAttribute(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
  }

  /**
   * Get the tag name of any DOM node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
   * @returns { String } name to identify this dom node in riot
   */
  function getName(dom, skipDataIs) {
    var child = get(dom);
    var namedTag = !skipDataIs && getAttribute(dom, IS_DIRECTIVE);
    return namedTag && !tmpl.hasExpr(namedTag) ?
      namedTag : child ? child.name : dom.tagName.toLowerCase()
  }

  /**
   * Return a temporary context containing also the parent properties
   * @this Tag
   * @param { Tag } - temporary tag context containing all the parent properties
   */
  function inheritParentProps() {
    if (this.parent) { return extend(create(this), this.parent) }
    return this
  }

  /*
    Includes hacks needed for the Internet Explorer version 9 and below
    See: http://kangax.github.io/compat-table/es5/#ie8
         http://codeplanet.io/dropping-ie8/
  */

  var
    reHasYield  = /<yield\b/i,
    reYieldAll  = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/ig,
    reYieldSrc  = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/ig,
    reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/ig,
    rootEls = { tr: 'tbody', th: 'tr', td: 'tr', col: 'colgroup' },
    tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION,
    GENERIC = 'div',
    SVG = 'svg';


  /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
  function specialTags(el, tmpl, tagName) {

    var
      select = tagName[0] === 'o',
      parent = select ? 'select>' : 'table>';

    // trim() is important here, this ensures we don't have artifacts,
    // so we can check if we have only one element inside the parent
    el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
    parent = el.firstChild;

    // returns the immediate parent if tr/th/td/col is the only element, if not
    // returns the whole tree, as this can include additional elements
    /* istanbul ignore next */
    if (select) {
      parent.selectedIndex = -1;  // for IE9, compatible w/current riot behavior
    } else {
      // avoids insertion of cointainer inside container (ex: tbody inside tbody)
      var tname = rootEls[tagName];
      if (tname && parent.childElementCount === 1) { parent = $(tname, parent); }
    }
    return parent
  }

  /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
  function replaceYield(tmpl, html) {
    // do nothing if no yield
    if (!reHasYield.test(tmpl)) { return tmpl }

    // be careful with #1343 - string on the source having `$1`
    var src = {};

    html = html && html.replace(reYieldSrc, function (_, ref, text) {
      src[ref] = src[ref] || text;   // preserve first definition
      return ''
    }).trim();

    return tmpl
      .replace(reYieldDest, function (_, ref, def) {  // yield with from - to attrs
        return src[ref] || def || ''
      })
      .replace(reYieldAll, function (_, def) {        // yield without any "from"
        return html || def || ''
      })
  }

  /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   { String } tmpl  - The template coming from the custom tag definition
   * @param   { String } html - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @param   { Boolean } isSvg - true if the root node is an svg
   * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
   */
  function mkdom(tmpl, html, isSvg) {
    var match   = tmpl && tmpl.match(/^\s*<([-\w]+)/);
    var  tagName = match && match[1].toLowerCase();
    var el = makeElement(isSvg ? SVG : GENERIC);

    // replace all the yield tags with the tag inner html
    tmpl = replaceYield(tmpl, html);

    /* istanbul ignore next */
    if (tblTags.test(tagName))
      { el = specialTags(el, tmpl, tagName); }
    else
      { setInnerHTML(el, tmpl, isSvg); }

    return el
  }

  var EVENT_ATTR_RE = /^on/;

  /**
   * True if the event attribute starts with 'on'
   * @param   { String } attribute - event attribute
   * @returns { Boolean }
   */
  function isEventAttribute(attribute) {
    return EVENT_ATTR_RE.test(attribute)
  }

  /**
   * Loop backward all the parents tree to detect the first custom parent tag
   * @param   { Object } tag - a Tag instance
   * @returns { Object } the instance of the first custom parent tag found
   */
  function getImmediateCustomParent(tag) {
    var ptag = tag;
    while (ptag.__.isAnonymous) {
      if (!ptag.parent) { break }
      ptag = ptag.parent;
    }
    return ptag
  }

  /**
   * Trigger DOM events
   * @param   { HTMLElement } dom - dom element target of the event
   * @param   { Function } handler - user function
   * @param   { Object } e - event object
   */
  function handleEvent(dom, handler, e) {
    var ptag = this.__.parent;
    var item = this.__.item;

    if (!item)
      { while (ptag && !item) {
        item = ptag.__.item;
        ptag = ptag.__.parent;
      } }

    // override the event properties
    /* istanbul ignore next */
    if (isWritable(e, 'currentTarget')) { e.currentTarget = dom; }
    /* istanbul ignore next */
    if (isWritable(e, 'target')) { e.target = e.srcElement; }
    /* istanbul ignore next */
    if (isWritable(e, 'which')) { e.which = e.charCode || e.keyCode; }

    e.item = item;

    handler.call(this, e);

    // avoid auto updates
    if (!settings.autoUpdate) { return }

    if (!e.preventUpdate) {
      var p = getImmediateCustomParent(this);
      // fixes #2083
      if (p.isMounted) { p.update(); }
    }
  }

  /**
   * Attach an event to a DOM node
   * @param { String } name - event name
   * @param { Function } handler - event callback
   * @param { Object } dom - dom node
   * @param { Tag } tag - tag instance
   */
  function setEventHandler(name, handler, dom, tag) {
    var eventName;
    var cb = handleEvent.bind(tag, dom, handler);

    // avoid to bind twice the same event
    // possible fix for #2332
    dom[name] = null;

    // normalize event name
    eventName = name.replace(RE_EVENTS_PREFIX, '');

    // cache the listener into the listeners array
    if (!contains(tag.__.listeners, dom)) { tag.__.listeners.push(dom); }
    if (!dom[RIOT_EVENTS_KEY]) { dom[RIOT_EVENTS_KEY] = {}; }
    if (dom[RIOT_EVENTS_KEY][name]) { dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][name]); }

    dom[RIOT_EVENTS_KEY][name] = cb;
    dom.addEventListener(eventName, cb, false);
  }

  /**
   * Create a new child tag including it correctly into its parent
   * @param   { Object } child - child tag implementation
   * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
   * @param   { String } innerHTML - inner html of the child node
   * @param   { Object } parent - instance of the parent tag including the child custom tag
   * @returns { Object } instance of the new child tag just created
   */
  function initChild(child, opts, innerHTML, parent) {
    var tag = createTag(child, opts, innerHTML);
    var tagName = opts.tagName || getName(opts.root, true);
    var ptag = getImmediateCustomParent(parent);
    // fix for the parent attribute in the looped elements
    define(tag, 'parent', ptag);
    // store the real parent tag
    // in some cases this could be different from the custom parent tag
    // for example in nested loops
    tag.__.parent = parent;

    // add this tag to the custom parent tag
    arrayishAdd(ptag.tags, tagName, tag);

    // and also to the real parent tag
    if (ptag !== parent)
      { arrayishAdd(parent.tags, tagName, tag); }

    return tag
  }

  /**
   * Removes an item from an object at a given key. If the key points to an array,
   * then the item is just removed from the array.
   * @param { Object } obj - object on which to remove the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be removed
   * @param { Boolean } ensureArray - ensure that the property remains an array
  */
  function arrayishRemove(obj, key, value, ensureArray) {
    if (isArray(obj[key])) {
      var index = obj[key].indexOf(value);
      if (index !== -1) { obj[key].splice(index, 1); }
      if (!obj[key].length) { delete obj[key]; }
      else if (obj[key].length === 1 && !ensureArray) { obj[key] = obj[key][0]; }
    } else if (obj[key] === value)
      { delete obj[key]; } // otherwise just delete the key
  }

  /**
   * Adds the elements for a virtual tag
   * @this Tag
   * @param { Node } src - the node that will do the inserting or appending
   * @param { Tag } target - only if inserting, insert before this tag's first child
   */
  function makeVirtual(src, target) {
    var head = createDOMPlaceholder();
    var tail = createDOMPlaceholder();
    var frag = createFragment();
    var sib;
    var el;

    this.root.insertBefore(head, this.root.firstChild);
    this.root.appendChild(tail);

    this.__.head = el = head;
    this.__.tail = tail;

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      this.__.virts.push(el); // hold for unmounting
      el = sib;
    }

    if (target)
      { src.insertBefore(frag, target.__.head); }
    else
      { src.appendChild(frag); }
  }

  /**
   * makes a tag virtual and replaces a reference in the dom
   * @this Tag
   * @param { tag } the tag to make virtual
   * @param { ref } the dom reference location
   */
  function makeReplaceVirtual(tag, ref) {
    if (!ref.parentNode) { return }
    var frag = createFragment();
    makeVirtual.call(tag, frag);
    ref.parentNode.replaceChild(frag, ref);
  }

  /**
   * Update dynamically created data-is tags with changing expressions
   * @param { Object } expr - expression tag and expression info
   * @param { Tag }    parent - parent for tag creation
   * @param { String } tagName - tag implementation we want to use
   */
  function updateDataIs(expr, parent, tagName) {
    var tag = expr.tag || expr.dom._tag;
    var ref;

    var ref$1 = tag ? tag.__ : {};
    var head = ref$1.head;
    var isVirtual = expr.dom.tagName === 'VIRTUAL';

    if (tag && expr.tagName === tagName) {
      tag.update();
      return
    }

    // sync _parent to accommodate changing tagnames
    if (tag) {
      // need placeholder before unmount
      if(isVirtual) {
        ref = createDOMPlaceholder();
        head.parentNode.insertBefore(ref, head);
      }

      tag.unmount(true);
    }

    // unable to get the tag name
    if (!isString(tagName)) { return }

    expr.impl = __TAG_IMPL[tagName];

    // unknown implementation
    if (!expr.impl) { return }

    expr.tag = tag = initChild(
      expr.impl, {
        root: expr.dom,
        parent: parent,
        tagName: tagName
      },
      expr.dom.innerHTML,
      parent
    );

    each(expr.attrs, function (a) { return setAttribute(tag.root, a.name, a.value); });
    expr.tagName = tagName;
    tag.mount();

    // root exist first time, after use placeholder
    if (isVirtual) { makeReplaceVirtual(tag, ref || tag.root); }

    // parent is the placeholder tag, not the dynamic tag so clean up
    parent.__.onUnmount = function () {
      var delName = tag.opts.dataIs;
      arrayishRemove(tag.parent.tags, delName, tag);
      arrayishRemove(tag.__.parent.tags, delName, tag);
      tag.unmount();
    };
  }

  /**
   * Nomalize any attribute removing the "riot-" prefix
   * @param   { String } attrName - original attribute name
   * @returns { String } valid html attribute name
   */
  function normalizeAttrName(attrName) {
    if (!attrName) { return null }
    attrName = attrName.replace(ATTRS_PREFIX, '');
    if (CASE_SENSITIVE_ATTRIBUTES[attrName]) { attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]; }
    return attrName
  }

  /**
   * Update on single tag expression
   * @this Tag
   * @param { Object } expr - expression logic
   * @returns { undefined }
   */
  function updateExpression(expr) {
    if (this.root && getAttribute(this.root,'virtualized')) { return }

    var dom = expr.dom;
    // remove the riot- prefix
    var attrName = normalizeAttrName(expr.attr);
    var isToggle = contains([SHOW_DIRECTIVE, HIDE_DIRECTIVE], attrName);
    var isVirtual = expr.root && expr.root.tagName === 'VIRTUAL';
    var ref = this.__;
    var isAnonymous = ref.isAnonymous;
    var parent = dom && (expr.parent || dom.parentNode);
    var keepValueAttributes = settings.keepValueAttributes;
    // detect the style attributes
    var isStyleAttr = attrName === 'style';
    var isClassAttr = attrName === 'class';
    var isValueAttr = attrName === 'value';

    var value;

    // if it's a tag we could totally skip the rest
    if (expr._riot_id) {
      if (expr.__.wasCreated) {
        expr.update();
      // if it hasn't been mounted yet, do that now.
      } else {
        expr.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr, expr.root);
        }
      }
      return
    }

    // if this expression has the update method it means it can handle the DOM changes by itself
    if (expr.update) { return expr.update() }

    var context = isToggle && !isAnonymous ? inheritParentProps.call(this) : this;

    // ...it seems to be a simple expression so we try to calculate its value
    value = tmpl(expr.expr, context);

    var hasValue = !isBlank(value);
    var isObj = isObject(value);

    // convert the style/class objects to strings
    if (isObj) {
      if (isClassAttr) {
        value = tmpl(JSON.stringify(value), this);
      } else if (isStyleAttr) {
        value = styleObjectToString(value);
      }
    }

    // remove original attribute
    if (expr.attr &&
        (
          // the original attribute can be removed only if we are parsing the original expression
          !expr.wasParsedOnce ||
          // or its value is false
          value === false ||
          // or if its value is currently falsy...
          // We will keep the "value" attributes if the "keepValueAttributes"
          // is enabled though
          (!hasValue && (!isValueAttr || isValueAttr && !keepValueAttributes))
        )
    ) {
      // remove either riot-* attributes or just the attribute name
      removeAttribute(dom, getAttribute(dom, expr.attr) ? expr.attr : attrName);
    }

    // for the boolean attributes we don't need the value
    // we can convert it to checked=true to checked=checked
    if (expr.bool) { value = value ? attrName : false; }
    if (expr.isRtag) { return updateDataIs(expr, this, value) }
    if (expr.wasParsedOnce && expr.value === value) { return }

    // update the expression value
    expr.value = value;
    expr.wasParsedOnce = true;

    // if the value is an object (and it's not a style or class attribute) we can not do much more with it
    if (isObj && !isClassAttr && !isStyleAttr && !isToggle) { return }
    // avoid to render undefined/null values
    if (!hasValue) { value = ''; }

    // textarea and text nodes have no attribute name
    if (!attrName) {
      // about #815 w/o replace: the browser converts the value to a string,
      // the comparison by "==" does too, but not in the server
      value += '';
      // test for parent avoids error with invalid assignment to nodeValue
      if (parent) {
        // cache the parent node because somehow it will become null on IE
        // on the next iteration
        expr.parent = parent;
        if (parent.tagName === 'TEXTAREA') {
          parent.value = value;                    // #1113
          if (!IE_VERSION) { dom.nodeValue = value; }  // #1625 IE throws here, nodeValue
        }                                         // will be available on 'updated'
        else { dom.nodeValue = value; }
      }
      return
    }

    switch (true) {
    // handle events binding
    case isFunction(value):
      if (isEventAttribute(attrName)) {
        setEventHandler(attrName, value, dom, this);
      }
      break
    // show / hide
    case isToggle:
      toggleVisibility(dom, attrName === HIDE_DIRECTIVE ? !value : value);
      break
    // handle attributes
    default:
      if (expr.bool) {
        dom[attrName] = value;
      }

      if (isValueAttr && dom.value !== value) {
        dom.value = value;
      } else if (hasValue && value !== false) {
        setAttribute(dom, attrName, value);
      }

      // make sure that in case of style changes
      // the element stays hidden
      if (isStyleAttr && dom.hidden) { toggleVisibility(dom, false); }
    }
  }

  /**
   * Update all the expressions in a Tag instance
   * @this Tag
   * @param { Array } expressions - expression that must be re evaluated
   */
  function update(expressions) {
    each(expressions, updateExpression.bind(this));
  }

  /**
   * We need to update opts for this tag. That requires updating the expressions
   * in any attributes on the tag, and then copying the result onto opts.
   * @this Tag
   * @param   {Boolean} isLoop - is it a loop tag?
   * @param   { Tag }  parent - parent tag node
   * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
   * @param   { Object }  opts - tag options
   * @param   { Array }  instAttrs - tag attributes array
   */
  function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
    // isAnonymous `each` tags treat `dom` and `root` differently. In this case
    // (and only this case) we don't need to do updateOpts, because the regular parse
    // will update those attrs. Plus, isAnonymous tags don't need opts anyway
    if (isLoop && isAnonymous) { return }
    var ctx = isLoop ? inheritParentProps.call(this) : parent || this;

    each(instAttrs, function (attr) {
      if (attr.expr) { updateExpression.call(ctx, attr.expr); }
      // normalize the attribute names
      opts[toCamel(attr.name).replace(ATTRS_PREFIX, '')] = attr.expr ? attr.expr.value : attr.value;
    });
  }

  /**
   * Update the tag expressions and options
   * @param { Tag } tag - tag object
   * @param { * } data - data we want to use to extend the tag properties
   * @param { Array } expressions - component expressions array
   * @returns { Tag } the current tag instance
   */
  function componentUpdate(tag, data, expressions) {
    var __ = tag.__;
    var nextOpts = {};
    var canTrigger = tag.isMounted && !__.skipAnonymous;

    // inherit properties from the parent tag
    if (__.isAnonymous && __.parent) { extend(tag, __.parent); }
    extend(tag, data);

    updateOpts.apply(tag, [__.isLoop, __.parent, __.isAnonymous, nextOpts, __.instAttrs]);

    if (
      canTrigger &&
      tag.isMounted &&
      isFunction(tag.shouldUpdate) && !tag.shouldUpdate(data, nextOpts)
    ) {
      return tag
    }

    extend(tag.opts, nextOpts);

    if (canTrigger) { tag.trigger('update', data); }
    update.call(tag, expressions);
    if (canTrigger) { tag.trigger('updated'); }

    return tag
  }

  /**
   * Get selectors for tags
   * @param   { Array } tags - tag names to select
   * @returns { String } selector
   */
  function query(tags) {
    // select all tags
    if (!tags) {
      var keys = Object.keys(__TAG_IMPL);
      return keys + query(keys)
    }

    return tags
      .filter(function (t) { return !/[^-\w]/.test(t); })
      .reduce(function (list, t) {
        var name = t.trim().toLowerCase();
        return list + ",[" + IS_DIRECTIVE + "=\"" + name + "\"]"
      }, '')
  }

  /**
   * Another way to create a riot tag a bit more es6 friendly
   * @param { HTMLElement } el - tag DOM selector or DOM node/s
   * @param { Object } opts - tag logic
   * @returns { Tag } new riot tag instance
   */
  function Tag(el, opts) {
    // get the tag properties from the class constructor
    var ref = this;
    var name = ref.name;
    var tmpl = ref.tmpl;
    var css = ref.css;
    var attrs = ref.attrs;
    var onCreate = ref.onCreate;
    // register a new tag and cache the class prototype
    if (!__TAG_IMPL[name]) {
      tag(name, tmpl, css, attrs, onCreate);
      // cache the class constructor
      __TAG_IMPL[name].class = this.constructor;
    }

    // mount the tag using the class instance
    mount$1(el, name, opts, this);
    // inject the component css
    if (css) { styleManager.inject(); }

    return this
  }

  /**
   * Create a new riot tag implementation
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag(name, tmpl, css, attrs, fn) {
    if (isFunction(attrs)) {
      fn = attrs;

      if (/^[\w-]+\s?=/.test(css)) {
        attrs = css;
        css = '';
      } else
        { attrs = ''; }
    }

    if (css) {
      if (isFunction(css))
        { fn = css; }
      else
        { styleManager.add(css, name); }
    }

    name = name.toLowerCase();
    __TAG_IMPL[name] = { name: name, tmpl: tmpl, attrs: attrs, fn: fn };

    return name
  }

  /**
   * Create a new riot tag implementation (for use by the compiler)
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag2(name, tmpl, css, attrs, fn) {
    if (css) { styleManager.add(css, name); }

    __TAG_IMPL[name] = { name: name, tmpl: tmpl, attrs: attrs, fn: fn };

    return name
  }

  /**
   * Mount a tag using a specific tag implementation
   * @param   { * } selector - tag DOM selector or DOM node/s
   * @param   { String } tagName - tag implementation name
   * @param   { Object } opts - tag logic
   * @returns { Array } new tags instances
   */
  function mount(selector, tagName, opts) {
    var tags = [];
    var elem, allTags;

    function pushTagsTo(root) {
      if (root.tagName) {
        var riotTag = getAttribute(root, IS_DIRECTIVE), tag;

        // have tagName? force riot-tag to be the same
        if (tagName && riotTag !== tagName) {
          riotTag = tagName;
          setAttribute(root, IS_DIRECTIVE, tagName);
        }

        tag = mount$1(
          root,
          riotTag || root.tagName.toLowerCase(),
          isFunction(opts) ? opts() : opts
        );

        if (tag)
          { tags.push(tag); }
      } else if (root.length)
        { each(root, pushTagsTo); } // assume nodeList
    }

    // inject styles into DOM
    styleManager.inject();

    if (isObject(tagName) || isFunction(tagName)) {
      opts = tagName;
      tagName = 0;
    }

    // crawl the DOM to find the tag
    if (isString(selector)) {
      selector = selector === '*' ?
        // select all registered tags
        // & tags found with the riot-tag attribute set
        allTags = query() :
        // or just the ones named like the selector
        selector + query(selector.split(/, */));

      // make sure to pass always a selector
      // to the querySelectorAll function
      elem = selector ? $$(selector) : [];
    }
    else
      // probably you have passed already a tag or a NodeList
      { elem = selector; }

    // select all the registered and mount them inside their root elements
    if (tagName === '*') {
      // get all custom tags
      tagName = allTags || query();
      // if the root els it's just a single tag
      if (elem.tagName)
        { elem = $$(tagName, elem); }
      else {
        // select all the children for all the different root elements
        var nodeList = [];

        each(elem, function (_el) { return nodeList.push($$(tagName, _el)); });

        elem = nodeList;
      }
      // get rid of the tagName
      tagName = 0;
    }

    pushTagsTo(elem);

    return tags
  }

  // Create a mixin that could be globally shared across all the tags
  var mixins = {};
  var globals = mixins[GLOBAL_MIXIN] = {};
  var mixins_id = 0;

  /**
   * Create/Return a mixin by its name
   * @param   { String }  name - mixin name (global mixin if object)
   * @param   { Object }  mix - mixin logic
   * @param   { Boolean } g - is global?
   * @returns { Object }  the mixin logic
   */
  function mixin(name, mix, g) {
    // Unnamed global
    if (isObject(name)) {
      mixin(("__" + (mixins_id++) + "__"), name, true);
      return
    }

    var store = g ? globals : mixins;

    // Getter
    if (!mix) {
      if (isUndefined(store[name]))
        { throw new Error(("Unregistered mixin: " + name)) }

      return store[name]
    }

    // Setter
    store[name] = isFunction(mix) ?
      extend(mix.prototype, store[name] || {}) && mix :
      extend(store[name] || {}, mix);
  }

  /**
   * Update all the tags instances created
   * @returns { Array } all the tags instances
   */
  function update$1() {
    return each(__TAGS_CACHE, function (tag) { return tag.update(); })
  }

  function unregister(name) {
    styleManager.remove(name);
    return delete __TAG_IMPL[name]
  }

  var version = 'WIP';

  var core = /*#__PURE__*/Object.freeze({
    Tag: Tag,
    tag: tag,
    tag2: tag2,
    mount: mount,
    mixin: mixin,
    update: update$1,
    unregister: unregister,
    version: version
  });

  /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
  function componentMixin(tag$$1) {
    var mixins = [], len = arguments.length - 1;
    while ( len-- > 0 ) mixins[ len ] = arguments[ len + 1 ];

    each(mixins, function (mix) {
      var instance;
      var obj;
      var props = [];

      // properties blacklisted and will not be bound to the tag instance
      var propsBlacklist = ['init', '__proto__'];

      mix = isString(mix) ? mixin(mix) : mix;

      // check if the mixin is a function
      if (isFunction(mix)) {
        // create the new mixin instance
        instance = new mix();
      } else { instance = mix; }

      var proto = Object.getPrototypeOf(instance);

      // build multilevel prototype inheritance chain property list
      do { props = props.concat(Object.getOwnPropertyNames(obj || instance)); }
      while (obj = Object.getPrototypeOf(obj || instance))

      // loop the keys in the function prototype or the all object keys
      each(props, function (key) {
        // bind methods to tag
        // allow mixins to override other properties/parent mixins
        if (!contains(propsBlacklist, key)) {
          // check for getters/setters
          var descriptor = getPropDescriptor(instance, key) || getPropDescriptor(proto, key);
          var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);

          // apply method only if it does not already exist on the instance
          if (!tag$$1.hasOwnProperty(key) && hasGetterSetter) {
            Object.defineProperty(tag$$1, key, descriptor);
          } else {
            tag$$1[key] = isFunction(instance[key]) ?
              instance[key].bind(tag$$1) :
              instance[key];
          }
        }
      });

      // init method will be called automatically
      if (instance.init)
        { instance.init.bind(tag$$1)(tag$$1.opts); }
    });

    return tag$$1
  }

  /**
   * Move the position of a custom tag in its parent tag
   * @this Tag
   * @param   { String } tagName - key where the tag was stored
   * @param   { Number } newPos - index where the new tag will be stored
   */
  function moveChild(tagName, newPos) {
    var parent = this.parent;
    var tags;
    // no parent no move
    if (!parent) { return }

    tags = parent.tags[tagName];

    if (isArray(tags))
      { tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0]); }
    else { arrayishAdd(parent.tags, tagName, this); }
  }

  /**
   * Move virtual tag and all child nodes
   * @this Tag
   * @param { Node } src  - the node that will do the inserting
   * @param { Tag } target - insert before this tag's first child
   */
  function moveVirtual(src, target) {
    var el = this.__.head;
    var sib;
    var frag = createFragment();

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      el = sib;
      if (el === this.__.tail) {
        frag.appendChild(el);
        src.insertBefore(frag, target.__.head);
        break
      }
    }
  }

  /**
   * Convert the item looped into an object used to extend the child tag properties
   * @param   { Object } expr - object containing the keys used to extend the children tags
   * @param   { * } key - value to assign to the new object returned
   * @param   { * } val - value containing the position of the item in the array
   * @returns { Object } - new object containing the values of the original item
   *
   * The variables 'key' and 'val' are arbitrary.
   * They depend on the collection type looped (Array, Object)
   * and on the expression used on the each tag
   *
   */
  function mkitem(expr, key, val) {
    var item = {};
    item[expr.key] = key;
    if (expr.pos) { item[expr.pos] = val; }
    return item
  }

  /**
   * Unmount the redundant tags
   * @param   { Array } items - array containing the current items to loop
   * @param   { Array } tags - array containing all the children tags
   */
  function unmountRedundant(items, tags, filteredItemsCount) {
    var i = tags.length;
    var j = items.length - filteredItemsCount;

    while (i > j) {
      i--;
      remove.apply(tags[i], [tags, i]);
    }
  }


  /**
   * Remove a child tag
   * @this Tag
   * @param   { Array } tags - tags collection
   * @param   { Number } i - index of the tag to remove
   */
  function remove(tags, i) {
    tags.splice(i, 1);
    this.unmount();
    arrayishRemove(this.parent, this, this.__.tagName, true);
  }

  /**
   * Move the nested custom tags in non custom loop tags
   * @this Tag
   * @param   { Number } i - current position of the loop tag
   */
  function moveNestedTags(i) {
    var this$1 = this;

    each(Object.keys(this.tags), function (tagName) {
      moveChild.apply(this$1.tags[tagName], [tagName, i]);
    });
  }

  /**
   * Move a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function move(root, nextTag, isVirtual) {
    if (isVirtual)
      { moveVirtual.apply(this, [root, nextTag]); }
    else
      { safeInsert(root, this.root, nextTag.root); }
  }

  /**
   * Insert and mount a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function insert(root, nextTag, isVirtual) {
    if (isVirtual)
      { makeVirtual.apply(this, [root, nextTag]); }
    else
      { safeInsert(root, this.root, nextTag.root); }
  }

  /**
   * Append a new tag into the DOM
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function append(root, isVirtual) {
    if (isVirtual)
      { makeVirtual.call(this, root); }
    else
      { root.appendChild(this.root); }
  }

  /**
   * Return the value we want to use to lookup the postion of our items in the collection
   * @param   { String }  keyAttr         - lookup string or expression
   * @param   { * }       originalItem    - original item from the collection
   * @param   { Object }  keyedItem       - object created by riot via { item, i in collection }
   * @param   { Boolean } hasKeyAttrExpr  - flag to check whether the key is an expression
   * @returns { * } value that we will use to figure out the item position via collection.indexOf
   */
  function getItemId(keyAttr, originalItem, keyedItem, hasKeyAttrExpr) {
    if (keyAttr) {
      return hasKeyAttrExpr ?  tmpl(keyAttr, keyedItem) :  originalItem[keyAttr]
    }

    return originalItem
  }

  /**
   * Manage tags having the 'each'
   * @param   { HTMLElement } dom - DOM node we need to loop
   * @param   { Tag } parent - parent tag instance where the dom node is contained
   * @param   { String } expr - string contained in the 'each' attribute
   * @returns { Object } expression object for this each loop
   */
  function _each(dom, parent, expr) {
    var mustReorder = typeof getAttribute(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || removeAttribute(dom, LOOP_NO_REORDER_DIRECTIVE);
    var keyAttr = getAttribute(dom, KEY_DIRECTIVE);
    var hasKeyAttrExpr = keyAttr ? tmpl.hasExpr(keyAttr) : false;
    var tagName = getName(dom);
    var impl = __TAG_IMPL[tagName];
    var parentNode = dom.parentNode;
    var placeholder = createDOMPlaceholder();
    var child = get(dom);
    var ifExpr = getAttribute(dom, CONDITIONAL_DIRECTIVE);
    var tags = [];
    var isLoop = true;
    var innerHTML = dom.innerHTML;
    var isAnonymous = !__TAG_IMPL[tagName];
    var isVirtual = dom.tagName === 'VIRTUAL';
    var oldItems = [];

    // remove the each property from the original tag
    removeAttribute(dom, LOOP_DIRECTIVE);
    removeAttribute(dom, KEY_DIRECTIVE);

    // parse the each expression
    expr = tmpl.loopKeys(expr);
    expr.isLoop = true;

    if (ifExpr) { removeAttribute(dom, CONDITIONAL_DIRECTIVE); }

    // insert a marked where the loop tags will be injected
    parentNode.insertBefore(placeholder, dom);
    parentNode.removeChild(dom);

    expr.update = function updateEach() {
      // get the new items collection
      expr.value = tmpl(expr.val, parent);

      var items = expr.value;
      var frag = createFragment();
      var isObject = !isArray(items) && !isString(items);
      var root = placeholder.parentNode;
      var tmpItems = [];
      var hasKeys = isObject && !!items;

      // if this DOM was removed the update here is useless
      // this condition fixes also a weird async issue on IE in our unit test
      if (!root) { return }

      // object loop. any changes cause full redraw
      if (isObject) {
        items = items ? Object.keys(items).map(function (key) { return mkitem(expr, items[key], key); }) : [];
      }

      // store the amount of filtered items
      var filteredItemsCount = 0;

      // loop all the new items
      each(items, function (_item, index) {
        var i = index - filteredItemsCount;
        var item = !hasKeys && expr.key ? mkitem(expr, _item, index) : _item;

        // skip this item because it must be filtered
        if (ifExpr && !tmpl(ifExpr, extend(create(parent), item))) {
          filteredItemsCount ++;
          return
        }

        var itemId = getItemId(keyAttr, _item, item, hasKeyAttrExpr);
        // reorder only if the items are not objects
        // or a key attribute has been provided
        var doReorder = !isObject && mustReorder && typeof _item === T_OBJECT || keyAttr;
        var oldPos = oldItems.indexOf(itemId);
        var isNew = oldPos === -1;
        var pos = !isNew && doReorder ? oldPos : i;
        // does a tag exist in this position?
        var tag = tags[pos];
        var mustAppend = i >= oldItems.length;
        var mustCreate = doReorder && isNew || !doReorder && !tag || !tags[i];

        // new tag
        if (mustCreate) {
          tag = createTag(impl, {
            parent: parent,
            isLoop: isLoop,
            isAnonymous: isAnonymous,
            tagName: tagName,
            root: dom.cloneNode(isAnonymous),
            item: item,
            index: i,
          }, innerHTML);

          // mount the tag
          tag.mount();

          if (mustAppend)
            { append.apply(tag, [frag || root, isVirtual]); }
          else
            { insert.apply(tag, [root, tags[i], isVirtual]); }

          if (!mustAppend) { oldItems.splice(i, 0, item); }
          tags.splice(i, 0, tag);
          if (child) { arrayishAdd(parent.tags, tagName, tag, true); }
        } else if (pos !== i && doReorder) {
          // move
          if (keyAttr || contains(items, oldItems[pos])) {
            move.apply(tag, [root, tags[i], isVirtual]);
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
          }

          // update the position attribute if it exists
          if (expr.pos) { tag[expr.pos] = i; }

          // if the loop tags are not custom
          // we need to move all their custom tags into the right position
          if (!child && tag.tags) { moveNestedTags.call(tag, i); }
        }

        // cache the original item to use it in the events bound to this node
        // and its children
        extend(tag.__, {
          item: item,
          index: i,
          parent: parent
        });

        tmpItems[i] = itemId;

        if (!mustCreate) { tag.update(item); }
      });

      // remove the redundant tags
      unmountRedundant(items, tags, filteredItemsCount);

      // clone the items array
      oldItems = tmpItems.slice();

      root.insertBefore(frag, placeholder);
    };

    expr.unmount = function () {
      each(tags, function (t) { t.unmount(); });
    };

    return expr
  }

  var RefExpr = {
    init: function init(dom, parent, attrName, attrValue) {
      this.dom = dom;
      this.attr = attrName;
      this.rawValue = attrValue;
      this.parent = parent;
      this.hasExp = tmpl.hasExpr(attrValue);
      return this
    },
    update: function update() {
      var old = this.value;
      var customParent = this.parent && getImmediateCustomParent(this.parent);
      // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
      var tagOrDom = this.dom.__ref || this.tag || this.dom;

      this.value = this.hasExp ? tmpl(this.rawValue, this.parent) : this.rawValue;

      // the name changed, so we need to remove it from the old key (if present)
      if (!isBlank(old) && customParent) { arrayishRemove(customParent.refs, old, tagOrDom); }
      if (!isBlank(this.value) && isString(this.value)) {
        // add it to the refs of parent tag (this behavior was changed >=3.0)
        if (customParent) { arrayishAdd(
          customParent.refs,
          this.value,
          tagOrDom,
          // use an array if it's a looped node and the ref is not an expression
          null,
          this.parent.__.index
        ); }

        if (this.value !== old) {
          setAttribute(this.dom, this.attr, this.value);
        }
      } else {
        removeAttribute(this.dom, this.attr);
      }

      // cache the ref bound to this dom node
      // to reuse it in future (see also #2329)
      if (!this.dom.__ref) { this.dom.__ref = tagOrDom; }
    },
    unmount: function unmount() {
      var tagOrDom = this.tag || this.dom;
      var customParent = this.parent && getImmediateCustomParent(this.parent);
      if (!isBlank(this.value) && customParent)
        { arrayishRemove(customParent.refs, this.value, tagOrDom); }
    }
  };

  /**
   * Create a new ref directive
   * @param   { HTMLElement } dom - dom node having the ref attribute
   * @param   { Tag } context - tag instance where the DOM node is located
   * @param   { String } attrName - either 'ref' or 'data-ref'
   * @param   { String } attrValue - value of the ref attribute
   * @returns { RefExpr } a new RefExpr object
   */
  function createRefDirective(dom, tag, attrName, attrValue) {
    return create(RefExpr).init(dom, tag, attrName, attrValue)
  }

  /**
   * Trigger the unmount method on all the expressions
   * @param   { Array } expressions - DOM expressions
   */
  function unmountAll(expressions) {
    each(expressions, function (expr) {
      if (expr.unmount) { expr.unmount(true); }
      else if (expr.tagName) { expr.tag.unmount(true); }
      else if (expr.unmount) { expr.unmount(); }
    });
  }

  var IfExpr = {
    init: function init(dom, tag, expr) {
      removeAttribute(dom, CONDITIONAL_DIRECTIVE);
      extend(this, { tag: tag, expr: expr, stub: createDOMPlaceholder(), pristine: dom });
      var p = dom.parentNode;
      p.insertBefore(this.stub, dom);
      p.removeChild(dom);

      return this
    },
    update: function update$$1() {
      this.value = tmpl(this.expr, this.tag);

      if (!this.stub.parentNode) { return }

      if (this.value && !this.current) { // insert
        this.current = this.pristine.cloneNode(true);
        this.stub.parentNode.insertBefore(this.current, this.stub);
        this.expressions = parseExpressions.apply(this.tag, [this.current, true]);
      } else if (!this.value && this.current) { // remove
        this.unmount();
        this.current = null;
        this.expressions = [];
      }

      if (this.value) { update.call(this.tag, this.expressions); }
    },
    unmount: function unmount() {
      if (this.current) {
        if (this.current._tag) {
          this.current._tag.unmount();
        } else if (this.current.parentNode) {
          this.current.parentNode.removeChild(this.current);
        }
      }

      unmountAll(this.expressions || []);
    }
  };

  /**
   * Create a new if directive
   * @param   { HTMLElement } dom - if root dom node
   * @param   { Tag } context - tag instance where the DOM node is located
   * @param   { String } attr - if expression
   * @returns { IFExpr } a new IfExpr object
   */
  function createIfDirective(dom, tag, attr) {
    return create(IfExpr).init(dom, tag, attr)
  }

  /**
   * Walk the tag DOM to detect the expressions to evaluate
   * @this Tag
   * @param   { HTMLElement } root - root tag where we will start digging the expressions
   * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
   * @returns { Array } all the expressions found
   */
  function parseExpressions(root, mustIncludeRoot) {
    var this$1 = this;

    var expressions = [];

    walkNodes(root, function (dom) {
      var type = dom.nodeType;
      var attr;
      var tagImpl;

      if (!mustIncludeRoot && dom === root) { return }

      // text node
      if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue))
        { expressions.push({dom: dom, expr: dom.nodeValue}); }

      if (type !== 1) { return }

      var isVirtual = dom.tagName === 'VIRTUAL';

      // loop. each does it's own thing (for now)
      if (attr = getAttribute(dom, LOOP_DIRECTIVE)) {
        if(isVirtual) { setAttribute(dom, 'loopVirtual', true); } // ignore here, handled in _each
        expressions.push(_each(dom, this$1, attr));
        return false
      }

      // if-attrs become the new parent. Any following expressions (either on the current
      // element, or below it) become children of this expression.
      if (attr = getAttribute(dom, CONDITIONAL_DIRECTIVE)) {
        expressions.push(createIfDirective(dom, this$1, attr));
        return false
      }

      if (attr = getAttribute(dom, IS_DIRECTIVE)) {
        if (tmpl.hasExpr(attr)) {
          expressions.push({
            isRtag: true,
            expr: attr,
            dom: dom,
            attrs: [].slice.call(dom.attributes)
          });

          return false
        }
      }

      // if this is a tag, stop traversing here.
      // we ignore the root, since parseExpressions is called while we're mounting that root
      tagImpl = get(dom);

      if(isVirtual) {
        if(getAttribute(dom, 'virtualized')) {dom.parentElement.removeChild(dom); } // tag created, remove from dom
        if(!tagImpl && !getAttribute(dom, 'virtualized') && !getAttribute(dom, 'loopVirtual'))  // ok to create virtual tag
          { tagImpl = { tmpl: dom.outerHTML }; }
      }

      if (tagImpl && (dom !== root || mustIncludeRoot)) {
        var hasIsDirective = getAttribute(dom, IS_DIRECTIVE);
        if(isVirtual && !hasIsDirective) { // handled in update
          // can not remove attribute like directives
          // so flag for removal after creation to prevent maximum stack error
          setAttribute(dom, 'virtualized', true);
          var tag = createTag(
            {tmpl: dom.outerHTML},
            {root: dom, parent: this$1},
            dom.innerHTML
          );

          expressions.push(tag); // no return, anonymous tag, keep parsing
        } else {
          if (hasIsDirective && isVirtual)
            { warn(("Virtual tags shouldn't be used together with the \"" + IS_DIRECTIVE + "\" attribute - https://github.com/riot/riot/issues/2511")); }

          expressions.push(
            initChild(
              tagImpl,
              {
                root: dom,
                parent: this$1
              },
              dom.innerHTML,
              this$1
            )
          );
          return false
        }
      }

      // attribute expressions
      parseAttributes.apply(this$1, [dom, dom.attributes, function (attr, expr) {
        if (!expr) { return }
        expressions.push(expr);
      }]);
    });

    return expressions
  }

  /**
   * Calls `fn` for every attribute on an element. If that attr has an expression,
   * it is also passed to fn.
   * @this Tag
   * @param   { HTMLElement } dom - dom node to parse
   * @param   { Array } attrs - array of attributes
   * @param   { Function } fn - callback to exec on any iteration
   */
  function parseAttributes(dom, attrs, fn) {
    var this$1 = this;

    each(attrs, function (attr) {
      if (!attr) { return false }

      var name = attr.name;
      var bool = isBoolAttr(name);
      var expr;

      if (contains(REF_DIRECTIVES, name) && dom.tagName.toLowerCase() !== YIELD_TAG) {
        expr =  createRefDirective(dom, this$1, name, attr.value);
      } else if (tmpl.hasExpr(attr.value)) {
        expr = {dom: dom, expr: attr.value, attr: name, bool: bool};
      }

      fn(attr, expr);
    });
  }

  /**
   * Manage the mount state of a tag triggering also the observable events
   * @this Tag
   * @param { Boolean } value - ..of the isMounted flag
   */
  function setMountState(value) {
    var ref = this.__;
    var isAnonymous = ref.isAnonymous;
    var skipAnonymous = ref.skipAnonymous;

    define(this, 'isMounted', value);

    if (!isAnonymous || !skipAnonymous) {
      if (value) { this.trigger('mount'); }
      else {
        this.trigger('unmount');
        this.off('*');
        this.__.wasCreated = false;
      }
    }
  }

  /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
  function componentMount(tag$$1, dom, expressions, opts) {
    var __ = tag$$1.__;
    var root = __.root;
    root._tag = tag$$1; // keep a reference to the tag just created

    // Read all the attrs on this instance. This give us the info we need for updateOpts
    parseAttributes.apply(__.parent, [root, root.attributes, function (attr, expr) {
      if (!__.isAnonymous && RefExpr.isPrototypeOf(expr)) { expr.tag = tag$$1; }
      attr.expr = expr;
      __.instAttrs.push(attr);
    }]);

    // update the root adding custom attributes coming from the compiler
    walkAttributes(__.impl.attrs, function (k, v) { __.implAttrs.push({name: k, value: v}); });
    parseAttributes.apply(tag$$1, [root, __.implAttrs, function (attr, expr) {
      if (expr) { expressions.push(expr); }
      else { setAttribute(root, attr.name, attr.value); }
    }]);

    // initialiation
    updateOpts.apply(tag$$1, [__.isLoop, __.parent, __.isAnonymous, opts, __.instAttrs]);

    // add global mixins
    var globalMixin = mixin(GLOBAL_MIXIN);

    if (globalMixin && !__.skipAnonymous) {
      for (var i in globalMixin) {
        if (globalMixin.hasOwnProperty(i)) {
          tag$$1.mixin(globalMixin[i]);
        }
      }
    }

    if (__.impl.fn) { __.impl.fn.call(tag$$1, opts); }

    if (!__.skipAnonymous) { tag$$1.trigger('before-mount'); }

    // parse layout after init. fn may calculate args for nested custom tags
    each(parseExpressions.apply(tag$$1, [dom, __.isAnonymous]), function (e) { return expressions.push(e); });

    tag$$1.update(__.item);

    if (!__.isAnonymous && !__.isInline) {
      while (dom.firstChild) { root.appendChild(dom.firstChild); }
    }

    define(tag$$1, 'root', root);

    // if we need to wait that the parent "mount" or "updated" event gets triggered
    if (!__.skipAnonymous && tag$$1.parent) {
      var p = getImmediateCustomParent(tag$$1.parent);
      p.one(!p.isMounted ? 'mount' : 'updated', function () {
        setMountState.call(tag$$1, true);
      });
    } else {
      // otherwise it's not a child tag we can trigger its mount event
      setMountState.call(tag$$1, true);
    }

    tag$$1.__.wasCreated = true;

    return tag$$1
  }

  /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
  function tagUnmount(tag, mustKeepRoot, expressions) {
    var __ = tag.__;
    var root = __.root;
    var tagIndex = __TAGS_CACHE.indexOf(tag);
    var p = root.parentNode;

    if (!__.skipAnonymous) { tag.trigger('before-unmount'); }

    // clear all attributes coming from the mounted tag
    walkAttributes(__.impl.attrs, function (name) {
      if (startsWith(name, ATTRS_PREFIX))
        { name = name.slice(ATTRS_PREFIX.length); }

      removeAttribute(root, name);
    });

    // remove all the event listeners
    tag.__.listeners.forEach(function (dom) {
      Object.keys(dom[RIOT_EVENTS_KEY]).forEach(function (eventName) {
        dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][eventName]);
      });
    });

    // remove tag instance from the global tags cache collection
    if (tagIndex !== -1) { __TAGS_CACHE.splice(tagIndex, 1); }

    // clean up the parent tags object
    if (__.parent && !__.isAnonymous) {
      var ptag = getImmediateCustomParent(__.parent);

      if (__.isVirtual) {
        Object
          .keys(tag.tags)
          .forEach(function (tagName) { return arrayishRemove(ptag.tags, tagName, tag.tags[tagName]); });
      } else {
        arrayishRemove(ptag.tags, __.tagName, tag);
      }
    }

    // unmount all the virtual directives
    if (tag.__.virts) {
      each(tag.__.virts, function (v) {
        if (v.parentNode) { v.parentNode.removeChild(v); }
      });
    }

    // allow expressions to unmount themselves
    unmountAll(expressions);
    each(__.instAttrs, function (a) { return a.expr && a.expr.unmount && a.expr.unmount(); });

    // clear the tag html if it's necessary
    if (mustKeepRoot) { setInnerHTML(root, ''); }
    // otherwise detach the root tag from the DOM
    else if (p) { p.removeChild(root); }

    // custom internal unmount function to avoid relying on the observable
    if (__.onUnmount) { __.onUnmount(); }

    // weird fix for a weird edge case #2409 and #2436
    // some users might use your software not as you've expected
    // so I need to add these dirty hacks to mitigate unexpected issues
    if (!tag.isMounted) { setMountState.call(tag, true); }

    setMountState.call(tag, false);

    delete root._tag;

    return tag
  }

  /**
   * Tag creation factory function
   * @constructor
   * @param { Object } impl - it contains the tag template, and logic
   * @param { Object } conf - tag options
   * @param { String } innerHTML - html that eventually we need to inject in the tag
   */
  function createTag(impl, conf, innerHTML) {
    if ( impl === void 0 ) impl = {};
    if ( conf === void 0 ) conf = {};

    var tag = conf.context || {};
    var opts = conf.opts || {};
    var parent = conf.parent;
    var isLoop = conf.isLoop;
    var isAnonymous = !!conf.isAnonymous;
    var skipAnonymous = settings.skipAnonymousTags && isAnonymous;
    var item = conf.item;
    // available only for the looped nodes
    var index = conf.index;
    // All attributes on the Tag when it's first parsed
    var instAttrs = [];
    // expressions on this type of Tag
    var implAttrs = [];
    var tmpl = impl.tmpl;
    var expressions = [];
    var root = conf.root;
    var tagName = conf.tagName || getName(root);
    var isVirtual = tagName === 'virtual';
    var isInline = !isVirtual && !tmpl;
    var dom;

    if (isInline || isLoop && isAnonymous) {
      dom = root;
    } else {
      if (!isVirtual) { root.innerHTML = ''; }
      dom = mkdom(tmpl, innerHTML, isSvg(root));
    }

    // make this tag observable
    if (!skipAnonymous) { observable(tag); }

    // only call unmount if we have a valid __TAG_IMPL (has name property)
    if (impl.name && root._tag) { root._tag.unmount(true); }

    define(tag, '__', {
      impl: impl,
      root: root,
      skipAnonymous: skipAnonymous,
      implAttrs: implAttrs,
      isAnonymous: isAnonymous,
      instAttrs: instAttrs,
      innerHTML: innerHTML,
      tagName: tagName,
      index: index,
      isLoop: isLoop,
      isInline: isInline,
      item: item,
      parent: parent,
      // tags having event listeners
      // it would be better to use weak maps here but we can not introduce breaking changes now
      listeners: [],
      // these vars will be needed only for the virtual tags
      virts: [],
      wasCreated: false,
      tail: null,
      head: null
    });

    // tag protected properties
    return [
      ['isMounted', false],
      // create a unique id to this tag
      // it could be handy to use it also to improve the virtual dom rendering speed
      ['_riot_id', uid()],
      ['root', root],
      ['opts', opts, { writable: true, enumerable: true }],
      ['parent', parent || null],
      // protect the "tags" and "refs" property from being overridden
      ['tags', {}],
      ['refs', {}],
      ['update', function (data) { return componentUpdate(tag, data, expressions); }],
      ['mixin', function () {
        var mixins = [], len = arguments.length;
        while ( len-- ) mixins[ len ] = arguments[ len ];

        return componentMixin.apply(void 0, [ tag ].concat( mixins ));
    }],
      ['mount', function () { return componentMount(tag, dom, expressions, opts); }],
      ['unmount', function (mustKeepRoot) { return tagUnmount(tag, mustKeepRoot, expressions); }]
    ].reduce(function (acc, ref) {
      var key = ref[0];
      var value = ref[1];
      var opts = ref[2];

      define(tag, key, value, opts);
      return acc
    }, extend(tag, item))
  }

  /**
   * Mount a tag creating new Tag instance
   * @param   { Object } root - dom node where the tag will be mounted
   * @param   { String } tagName - name of the riot tag we want to mount
   * @param   { Object } opts - options to pass to the Tag instance
   * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
   * @returns { Tag } a new Tag instance
   */
  function mount$1(root, tagName, opts, ctx) {
    var impl = __TAG_IMPL[tagName];
    var implClass = __TAG_IMPL[tagName].class;
    var context = ctx || (implClass ? create(implClass.prototype) : {});
    // cache the inner HTML to fix #855
    var innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
    var conf = extend({ root: root, opts: opts, context: context }, { parent: opts ? opts.parent : null });
    var tag;

    if (impl && root) { tag = createTag(impl, conf, innerHTML); }

    if (tag && tag.mount) {
      tag.mount(true);
      // add this tag to the virtualDom variable
      if (!contains(__TAGS_CACHE, tag)) { __TAGS_CACHE.push(tag); }
    }

    return tag
  }



  var tags = /*#__PURE__*/Object.freeze({
    arrayishAdd: arrayishAdd,
    getTagName: getName,
    inheritParentProps: inheritParentProps,
    mountTo: mount$1,
    selectTags: query,
    arrayishRemove: arrayishRemove,
    getTag: get,
    initChildTag: initChild,
    moveChildTag: moveChild,
    makeReplaceVirtual: makeReplaceVirtual,
    getImmediateCustomParentTag: getImmediateCustomParent,
    makeVirtual: makeVirtual,
    moveVirtual: moveVirtual,
    unmountAll: unmountAll,
    createIfDirective: createIfDirective,
    createRefDirective: createRefDirective
  });

  /**
   * Riot public api
   */
  var settings$1 = settings;
  var util = {
    tmpl: tmpl,
    brackets: brackets,
    styleManager: styleManager,
    vdom: __TAGS_CACHE,
    styleNode: styleManager.styleNode,
    // export the riot internal utils as well
    dom: dom,
    check: check,
    misc: misc,
    tags: tags
  };

  var riot$1 = extend({}, core, {
    observable: observable,
    settings: settings$1,
    util: util,
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var ethers_min = createCommonjsModule(function (module, exports) {
  !function(e){{ module.exports=e(); }}(function(){return function o(s,a,u){function l(t,e){if(!a[t]){if(!s[t]){var r="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&r){ return r(t,!0); }if(h){ return h(t,!0); }var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=a[t]={exports:{}};s[t][0].call(i.exports,function(e){return l(s[t][1][e]||e)},i,i.exports,o,s,a,u);}return a[t].exports}for(var h="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<u.length;e++){ l(u[e]); }return l}({1:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.version="4.0.33";},{}],2:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./utils/properties"),i=(o.isSigner=function(e){return n.isType(e,"Signer")},o);function o(){n.setType(this,"Signer");}r.Signer=i;},{"./utils/properties":73}],3:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./utils/bignumber");r.AddressZero="0x0000000000000000000000000000000000000000";r.HashZero="0x0000000000000000000000000000000000000000000000000000000000000000";r.EtherSymbol="\u039e";var i=n.bigNumberify(-1);r.NegativeOne=i;var o=n.bigNumberify(0);r.Zero=o;var s=n.bigNumberify(1);r.One=s;var a=n.bigNumberify(2);r.Two=a;var u=n.bigNumberify("1000000000000000000");r.WeiPerEther=u;var l=n.bigNumberify("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");r.MaxUint256=l;},{"./utils/bignumber":62}],4:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s,u=e("./constants"),l=o(e("./errors")),h=e("./utils/abi-coder"),a=e("./utils/address"),f=e("./utils/bignumber"),c=e("./utils/bytes"),d=e("./utils/interface"),p=e("./utils/properties"),v=e("./providers/abstract-provider"),y=e("./abstract-signer"),m=(s=y.Signer,i(g,s),g.prototype.getAddress=function(){return Promise.resolve(this.address)},g.prototype._fail=function(e,t){return Promise.resolve().then(function(){l.throwError(e,l.UNSUPPORTED_OPERATION,{operation:t});})},g.prototype.signMessage=function(e){return this._fail("VoidSigner cannot sign messages","signMessage")},g.prototype.sendTransaction=function(e){return this._fail("VoidSigner cannot sign transactions","sendTransaction")},g.prototype.connect=function(e){return new g(this.address,e)},g);function g(e,t){var r=s.call(this)||this;return p.defineReadOnly(r,"address",e),p.defineReadOnly(r,"provider",t),r}r.VoidSigner=m;var b={chainId:!0,data:!0,from:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0};function w(o,e,s){var a=o.interface.functions[e];return function(){
  var arguments$1 = arguments;
  for(var e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }var i={},r=null;if(e.length===a.inputs.length+1&&"object"==typeof e[e.length-1]){ for(var n in null!=(i=p.shallowCopy(e.pop())).blockTag&&(r=i.blockTag),delete i.blockTag,i){ if(!b[n]){ throw new Error("unknown transaction override "+n); } } }if(e.length!=a.inputs.length){ throw new Error("incorrect number of arguments"); }return ["data","to"].forEach(function(e){null!=i[e]&&l.throwError("cannot override "+e,l.UNSUPPORTED_OPERATION,{operation:e});}),i.to=o._deployed(r).then(function(){return o.addressPromise}),function n(i,o,e){if(Array.isArray(e)){var s=[];return e.forEach(function(e,t){var r=null;r=Array.isArray(o)?o[t]:o[e.name],s.push(n(i,r,e));}),Promise.all(s)}if("address"===e.type){ return i.resolveName(o); }if("tuple"===e.type){ return n(i,o,e.components); }var t=e.type.match(/(.*)(\[[0-9]*\]$)/);if(t){if(!Array.isArray(o)){ throw new Error("invalid value for array"); }var r=[],a={components:e.components,type:t[1]};return o.forEach(function(e){r.push(n(i,e,a));}),Promise.all(r)}return Promise.resolve(o)}(o.provider,e,a.inputs).then(function(n){if(i.data=a.encode(n),"call"===a.type){ return s?Promise.resolve(u.Zero):(o.provider||l.throwError("call (constant functions) require a provider or a signer with a provider",l.UNSUPPORTED_OPERATION,{operation:"call"}),["gasLimit","gasPrice","value"].forEach(function(e){if(null!=i[e]){ throw new Error("call cannot override "+e) }}),null==i.from&&o.signer&&(i.from=o.signer.getAddress()),o.provider.call(i,r).then(function(t){if(c.hexDataLength(t)%32==4&&"0x08c379a0"===c.hexDataSlice(t,0,4)){var e=h.defaultAbiCoder.decode(["string"],c.hexDataSlice(t,4));l.throwError("call revert exception",l.CALL_EXCEPTION,{address:o.address,args:n,method:a.signature,errorSignature:"Error(string)",errorArgs:[e],reason:e,transaction:i});}try{var r=a.decode(t);return 1===a.outputs.length&&(r=r[0]),r}catch(e){throw"0x"===t&&0<a.outputs.length&&l.throwError("call exception",l.CALL_EXCEPTION,{address:o.address,method:a.signature,args:n}),e}})); }if("transaction"===a.type){ return s?(o.provider||l.throwError("estimate gas require a provider or a signer with a provider",l.UNSUPPORTED_OPERATION,{operation:"estimateGas"}),null==i.from&&o.signer&&(i.from=o.signer.getAddress()),o.provider.estimateGas(i)):(null==i.gasLimit&&null!=a.gas&&(i.gasLimit=f.bigNumberify(a.gas).add(21e3)),o.signer||l.throwError("sending a transaction require a signer",l.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=i.from&&l.throwError("cannot override from in a transaction",l.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),o.signer.sendTransaction(i).then(function(e){var t=e.wait.bind(e);return e.wait=function(e){return t(e).then(function(n){return n.events=n.logs.map(function(e){var t=p.deepCopy(e),r=o.interface.parseLog(e);return r&&(t.args=r.values,t.decode=r.decode,t.event=r.name,t.eventSignature=r.signature),t.removeListener=function(){return o.provider},t.getBlock=function(){return o.provider.getBlock(n.blockHash)},t.getTransaction=function(){return o.provider.getTransaction(n.transactionHash)},t.getTransactionReceipt=function(){return Promise.resolve(n)},t}),n})},e})); }throw new Error("invalid type - "+a.type)})}}function _(e){return !e.address||null!=e.topics&&0!==e.topics.length?(e.address||"*")+"@"+(e.topics?e.topics.join(":"):""):"*"}var M=(A.prototype.deployed=function(){return this._deployed()},A.prototype._deployed=function(e){var t=this;return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then(function(){return t}):this._deployedPromise=this.provider.getCode(this.address,e).then(function(e){return "0x"===e&&l.throwError("contract not deployed",l.UNSUPPORTED_OPERATION,{contractAddress:t.address,operation:"getDeployed"}),t})),this._deployedPromise},A.prototype.fallback=function(e){var t=this;this.signer||l.throwError("sending a transaction require a signer",l.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});var r=p.shallowCopy(e||{});return ["from","to"].forEach(function(e){null!=r[e]&&l.throwError("cannot override "+e,l.UNSUPPORTED_OPERATION,{operation:e});}),r.to=this.addressPromise,this.deployed().then(function(){return t.signer.sendTransaction(r)})},A.prototype.connect=function(e){"string"==typeof e&&(e=new m(e,this.provider));var t=new A(this.address,this.interface,e);return this.deployTransaction&&p.defineReadOnly(t,"deployTransaction",this.deployTransaction),t},A.prototype.attach=function(e){return new A(e,this.interface,this.signer||this.provider)},A.isIndexed=function(e){return d.Interface.isIndexed(e)},A.prototype._getEventFilter=function(e){var r=this;if("string"==typeof e){if("*"===e){ return {prepareEvent:function(e){var t=r.interface.parseLog(e);return t&&(e.args=t.values,e.decode=t.decode,e.event=t.name,e.eventSignature=t.signature),[e]},eventTag:"*",filter:{address:this.address}}; }-1!==e.indexOf("(")&&(e=h.formatSignature(h.parseSignature("event "+e)));var n=this.interface.events[e];n||l.throwError("unknown event - "+e,l.INVALID_ARGUMENT,{argumnet:"eventName",value:e});var t={address:this.address,topics:[n.topic]};return {prepareEvent:function(e){var t=n.decode(e.data,e.topics);e.args=t;var r=Array.prototype.slice.call(t);return r.push(e),r},event:n,eventTag:_(t),filter:t}}var i={address:this.address},o=null;if(e.topics&&e.topics[0]){ for(var s in i.topics=e.topics,this.interface.events){ if(-1!==s.indexOf("(")){var a=this.interface.events[s];if(a.topic===e.topics[0].toLowerCase()){o=a;break}} } }return {prepareEvent:function(e){if(!o){ return [e]; }var t=o.decode(e.data,e.topics);e.args=t;var r=Array.prototype.slice.call(t);return r.push(e),r},event:o,eventTag:_(i),filter:i}},A.prototype._addEventListener=function(n,i,e){var o=this;function t(e){var t=p.deepCopy(e),r=n.prepareEvent(t);n.event&&(t.decode=n.event.decode,t.event=n.event.name,t.eventSignature=n.event.signature),t.removeListener=function(){o.removeListener(n.filter,i);},t.getBlock=function(){return o.provider.getBlock(e.blockHash)},t.getTransaction=function(){return o.provider.getTransaction(e.transactionHash)},t.getTransactionReceipt=function(){return o.provider.getTransactionReceipt(e.transactionHash)},o.emit.apply(o,[n.filter].concat(r));}this.provider||l.throwError("events require a provider or a signer with a provider",l.UNSUPPORTED_OPERATION,{operation:"once"}),this.provider.on(n.filter,t),this._events.push({eventFilter:n,listener:i,wrappedListener:t,once:e});},A.prototype.on=function(e,t){return this._addEventListener(this._getEventFilter(e),t,!1),this},A.prototype.once=function(e,t){return this._addEventListener(this._getEventFilter(e),t,!0),this},A.prototype.addListener=function(e,t){return this.on(e,t)},A.prototype.emit=function(e){
  var arguments$1 = arguments;
  for(var t=this,r=[],n=1;n<arguments.length;n++){ r[n-1]=arguments$1[n]; }if(!this.provider){ return !1; }var i=!1,o=this._getEventFilter(e);return this._events=this._events.filter(function(e){return e.eventFilter.eventTag!==o.eventTag||(setTimeout(function(){e.listener.apply(t,r);},0),i=!0,!e.once)}),i},A.prototype.listenerCount=function(e){if(!this.provider){ return 0; }var t=this._getEventFilter(e);return this._events.filter(function(e){return e.eventFilter.eventTag===t.eventTag}).length},A.prototype.listeners=function(e){if(!this.provider){ return []; }var t=this._getEventFilter(e);return this._events.filter(function(e){return e.eventFilter.eventTag===t.eventTag}).map(function(e){return e.listener})},A.prototype.removeAllListeners=function(e){var t=this;if(!this.provider){ return this; }var r=this._getEventFilter(e);return this._events=this._events.filter(function(e){return e.eventFilter.eventTag!==r.eventTag||(t.provider.removeListener(e.eventFilter.filter,e.wrappedListener),!1)}),this},A.prototype.removeListener=function(e,t){var r=this;if(!this.provider){ return this; }var n=!1,i=this._getEventFilter(e);return this._events=this._events.filter(function(e){return e.eventFilter.eventTag!==i.eventTag||e.listener!==t||(r.provider.removeListener(e.eventFilter.filter,e.wrappedListener),!!n||!(n=!0))}),this},A);function A(t,e,r){var n=this;if(l.checkNew(this,A),d.Interface.isInterface(e)?p.defineReadOnly(this,"interface",e):p.defineReadOnly(this,"interface",new d.Interface(e)),y.Signer.isSigner(r)?(p.defineReadOnly(this,"provider",r.provider),p.defineReadOnly(this,"signer",r)):v.Provider.isProvider(r)?(p.defineReadOnly(this,"provider",r),p.defineReadOnly(this,"signer",null)):l.throwError("invalid signer or provider",l.INVALID_ARGUMENT,{arg:"signerOrProvider",value:r}),p.defineReadOnly(this,"estimate",{}),p.defineReadOnly(this,"functions",{}),p.defineReadOnly(this,"filters",{}),Object.keys(this.interface.events).forEach(function(e){var r=n.interface.events[e];p.defineReadOnly(n.filters,e,function(){
  var arguments$1 = arguments;
  for(var e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }return {address:n.address,topics:r.encodeTopics(e)}});}),this._events=[],p.defineReadOnly(this,"address",t),this.provider){ p.defineReadOnly(this,"addressPromise",this.provider.resolveName(t).then(function(e){if(null==e){ throw new Error("name not found"); }return e}).catch(function(e){throw e})); }else { try{p.defineReadOnly(this,"addressPromise",Promise.resolve(a.getAddress(t)));}catch(e){l.throwError("provider is required to use non-address contract address",l.INVALID_ARGUMENT,{argument:"addressOrName",value:t});} }Object.keys(this.interface.functions).forEach(function(e){var t=w(n,e,!1);null==n[e]?p.defineReadOnly(n,e,t):l.warn("WARNING: Multiple definitions for "+e),null==n.functions[e]&&(p.defineReadOnly(n.functions,e,t),p.defineReadOnly(n.estimate,e,w(n,e,!0)));});}r.Contract=M;var E=(S.prototype.getDeployTransaction=function(){
  var arguments$1 = arguments;
  for(var e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }var r={};if(e.length===this.interface.deployFunction.inputs.length+1){ for(var n in r=p.shallowCopy(e.pop())){ if(!b[n]){ throw new Error("unknown transaction override "+n); } } }return ["data","from","to"].forEach(function(e){null!=r[e]&&l.throwError("cannot override "+e,l.UNSUPPORTED_OPERATION,{operation:e});}),l.checkArgumentCount(e.length,this.interface.deployFunction.inputs.length," in Contract constructor"),r.data=this.interface.deployFunction.encode(this.bytecode,e),r},S.prototype.deploy=function(){
  var arguments$1 = arguments;
  for(var r=this,e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }var n=this.getDeployTransaction.apply(this,e);return this.signer.sendTransaction(n).then(function(e){var t=new M(a.getContractAddress(e),r.interface,r.signer);return p.defineReadOnly(t,"deployTransaction",e),t})},S.prototype.attach=function(e){return new M(e,this.interface,this.signer)},S.prototype.connect=function(e){return new S(this.interface,this.bytecode,e)},S.fromSolidity=function(e,t){null==e&&l.throwError("missing compiler output",l.MISSING_ARGUMENT,{argument:"compilerOutput"}),"string"==typeof e&&(e=JSON.parse(e));var r=e.abi,n=null;return e.bytecode?n=e.bytecode:e.evm&&e.evm.bytecode&&(n=e.evm.bytecode),new S(r,n,t)},S);function S(e,t,r){var n=null;"string"==typeof t?n=t:c.isArrayish(t)?n=c.hexlify(t):"string"==typeof t.object?n=t.object:l.throwError("bytecode must be a valid hex string",l.INVALID_ARGUMENT,{arg:"bytecode",value:t}),"0x"!==n.substring(0,2)&&(n="0x"+n),c.isHexString(n)||l.throwError("bytecode must be a valid hex string",l.INVALID_ARGUMENT,{arg:"bytecode",value:t}),n.length%2!=0&&l.throwError("bytecode must be valid data (even length)",l.INVALID_ARGUMENT,{arg:"bytecode",value:t}),p.defineReadOnly(this,"bytecode",n),d.Interface.isInterface(e)?p.defineReadOnly(this,"interface",e):p.defineReadOnly(this,"interface",new d.Interface(e)),r&&!y.Signer.isSigner(r)&&l.throwError("invalid signer",l.INVALID_ARGUMENT,{arg:"signer",value:null}),p.defineReadOnly(this,"signer",r||null);}r.ContractFactory=E;},{"./abstract-signer":2,"./constants":3,"./errors":5,"./providers/abstract-provider":49,"./utils/abi-coder":58,"./utils/address":59,"./utils/bignumber":62,"./utils/bytes":63,"./utils/interface":68,"./utils/properties":73}],5:[function(e,t,s){Object.defineProperty(s,"__esModule",{value:!0});var a=e("./_version");s.UNKNOWN_ERROR="UNKNOWN_ERROR",s.NOT_IMPLEMENTED="NOT_IMPLEMENTED",s.MISSING_NEW="MISSING_NEW",s.CALL_EXCEPTION="CALL_EXCEPTION",s.INVALID_ARGUMENT="INVALID_ARGUMENT",s.MISSING_ARGUMENT="MISSING_ARGUMENT",s.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",s.NUMERIC_FAULT="NUMERIC_FAULT",s.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",s.NONCE_EXPIRED="NONCE_EXPIRED",s.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED";var r=!(s.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION"),u=!1;function n(e,t,r){if(u){ throw new Error("unknown error"); }t=t||s.UNKNOWN_ERROR,r=r||{};var n=[];Object.keys(r).forEach(function(t){try{n.push(t+"="+JSON.stringify(r[t]));}catch(e){n.push(t+"="+JSON.stringify(r[t].toString()));}}),n.push("version="+a.version);var i=e;n.length&&(e+=" ("+n.join(", ")+")");var o=new Error(e);throw o.reason=i,o.code=t,Object.keys(r).forEach(function(e){o[e]=r[e];}),o}s.throwError=n,s.checkNew=function(e,t){e instanceof t||n("missing new",s.MISSING_NEW,{name:t.name});},s.checkArgumentCount=function(e,t,r){r=r||"",e<t&&n("missing argument"+r,s.MISSING_ARGUMENT,{count:e,expectedCount:t}),t<e&&n("too many arguments"+r,s.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t});},s.setCensorship=function(e,t){r&&n("error censorship permanent",s.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),u=!!e,r=!!t;},s.checkNormalize=function(){try{if(["NFD","NFC","NFKD","NFKC"].forEach(function(t){try{}catch(e){throw new Error("missing "+t)}}),String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769)){ throw new Error("broken implementation") }}catch(e){n("platform missing String.prototype.normalize",s.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:e.message});}};var i={debug:1,default:2,info:2,warn:3,error:4,off:5},o=i.default;function l(e,t){o>i[e]||console.log.apply(console,t);}function h(){
  var arguments$1 = arguments;
  for(var e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }l("warn",e);}s.setLogLevel=function(e){var t=i[e];null!=t?o=t:h("invliad log level - "+e);},s.warn=h,s.info=function(){
  var arguments$1 = arguments;
  for(var e=[],t=0;t<arguments.length;t++){ e[t]=arguments$1[t]; }l("info",e);};},{"./_version":1}],6:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=e("./contract");r.Contract=i.Contract,r.ContractFactory=i.ContractFactory,r.VoidSigner=i.VoidSigner;var o=e("./abstract-signer");r.Signer=o.Signer;var s=e("./wallet");r.Wallet=s.Wallet;var a=n(e("./constants"));r.constants=a;var u=n(e("./errors"));r.errors=u;var l=n(e("./providers"));r.providers=l;var h=n(e("./utils"));r.utils=h;var f=n(e("./wordlists"));r.wordlists=f;var c=e("./utils/shims");r.platform=c.platform;var d=e("./_version");r.version=d.version,r.getDefaultProvider=function(e){null==e&&(e="homestead");var t=h.getNetwork(e);return t&&t._defaultProvider||u.throwError("unsupported getDefaultProvider network",u.UNSUPPORTED_OPERATION,{operation:"getDefaultProvider",network:e}),t._defaultProvider(l)};},{"./_version":1,"./abstract-signer":2,"./constants":3,"./contract":4,"./errors":5,"./providers":53,"./utils":67,"./utils/shims":79,"./wallet":87,"./wordlists":88}],7:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=n(e("./ethers"));r.ethers=i,function(e){for(var t in e){ r.hasOwnProperty(t)||(r[t]=e[t]); }}(e("./ethers"));},{"./ethers":6}],8:[function(e,C,B){!function(e){function r(e){return parseInt(e)===e}function n(e){if(!r(e.length)){ return !1; }for(var t=0;t<e.length;t++){ if(!r(e[t])||e[t]<0||255<e[t]){ return !1; } }return !0}function o(e,t){if(e.buffer&&ArrayBuffer.isView(e)&&"Uint8Array"===e.name){ return t&&(e=e.slice?e.slice():Array.prototype.slice.call(e)),e; }if(Array.isArray(e)){if(!n(e)){ throw new Error("Array contains invalid value: "+e); }return new Uint8Array(e)}if(r(e.length)&&n(e)){ return new Uint8Array(e); }throw new Error("unsupported array-like object")}function u(e){return new Uint8Array(e)}function s(e,t,r,n,i){null==n&&null==i||(e=e.slice?e.slice(n,i):Array.prototype.slice.call(e,n,i)),t.set(e,r);}var i,t={toBytes:function(e){var t=[],r=0;for(e=encodeURI(e);r<e.length;){var n=e.charCodeAt(r++);37===n?(t.push(parseInt(e.substr(r,2),16)),r+=2):t.push(n);}return o(t)},fromBytes:function(e){for(var t=[],r=0;r<e.length;){var n=e[r];n<128?(t.push(String.fromCharCode(n)),r++):191<n&&n<224?(t.push(String.fromCharCode((31&n)<<6|63&e[r+1])),r+=2):(t.push(String.fromCharCode((15&n)<<12|(63&e[r+1])<<6|63&e[r+2])),r+=3);}return t.join("")}},a=(i="0123456789abcdef",{toBytes:function(e){for(var t=[],r=0;r<e.length;r+=2){ t.push(parseInt(e.substr(r,2),16)); }return t},fromBytes:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];t.push(i[(240&n)>>4]+i[15&n]);}return t.join("")}}),f={16:10,24:12,32:14},c=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],d=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],l=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],h=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],p=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],v=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],y=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],m=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],g=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],b=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],w=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],_=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],M=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],A=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],E=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function S(e){for(var t=[],r=0;r<e.length;r+=4){ t.push(e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3]); }return t}var k=function(e){if(!(this instanceof k)){ throw Error("AES must be instanitated with `new`"); }Object.defineProperty(this,"key",{value:o(e,!0)}),this._prepare();};k.prototype._prepare=function(){var e=f[this.key.length];if(null==e){ throw new Error("invalid key size (must be 16, 24 or 32 bytes)"); }this._Ke=[],this._Kd=[];for(var t=0;t<=e;t++){ this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]); }var r,n=4*(e+1),i=this.key.length/4,o=S(this.key);for(t=0;t<i;t++){ r=t>>2,this._Ke[r][t%4]=o[t],this._Kd[e-r][t%4]=o[t]; }for(var s,a=0,u=i;u<n;){if(s=o[i-1],o[0]^=d[s>>16&255]<<24^d[s>>8&255]<<16^d[255&s]<<8^d[s>>24&255]^c[a]<<24,a+=1,8!=i){ for(t=1;t<i;t++){ o[t]^=o[t-1]; } }else{for(t=1;t<i/2;t++){ o[t]^=o[t-1]; }s=o[i/2-1],o[i/2]^=d[255&s]^d[s>>8&255]<<8^d[s>>16&255]<<16^d[s>>24&255]<<24;for(t=i/2+1;t<i;t++){ o[t]^=o[t-1]; }}for(t=0;t<i&&u<n;){ l=u>>2,h=u%4,this._Ke[l][h]=o[t],this._Kd[e-l][h]=o[t++],u++; }}for(var l=1;l<e;l++){ for(var h=0;h<4;h++){ s=this._Kd[l][h],this._Kd[l][h]=_[s>>24&255]^M[s>>16&255]^A[s>>8&255]^E[255&s]; } }},k.prototype.encrypt=function(e){if(16!=e.length){ throw new Error("invalid plaintext size (must be 16 bytes)"); }for(var t=this._Ke.length-1,r=[0,0,0,0],n=S(e),i=0;i<4;i++){ n[i]^=this._Ke[0][i]; }for(var o=1;o<t;o++){for(i=0;i<4;i++){ r[i]=h[n[i]>>24&255]^p[n[(i+1)%4]>>16&255]^v[n[(i+2)%4]>>8&255]^y[255&n[(i+3)%4]]^this._Ke[o][i]; }n=r.slice();}var s,a=u(16);for(i=0;i<4;i++){ s=this._Ke[t][i],a[4*i]=255&(d[n[i]>>24&255]^s>>24),a[4*i+1]=255&(d[n[(i+1)%4]>>16&255]^s>>16),a[4*i+2]=255&(d[n[(i+2)%4]>>8&255]^s>>8),a[4*i+3]=255&(d[255&n[(i+3)%4]]^s); }return a},k.prototype.decrypt=function(e){if(16!=e.length){ throw new Error("invalid ciphertext size (must be 16 bytes)"); }for(var t=this._Kd.length-1,r=[0,0,0,0],n=S(e),i=0;i<4;i++){ n[i]^=this._Kd[0][i]; }for(var o=1;o<t;o++){for(i=0;i<4;i++){ r[i]=m[n[i]>>24&255]^g[n[(i+3)%4]>>16&255]^b[n[(i+2)%4]>>8&255]^w[255&n[(i+1)%4]]^this._Kd[o][i]; }n=r.slice();}var s,a=u(16);for(i=0;i<4;i++){ s=this._Kd[t][i],a[4*i]=255&(l[n[i]>>24&255]^s>>24),a[4*i+1]=255&(l[n[(i+3)%4]>>16&255]^s>>16),a[4*i+2]=255&(l[n[(i+2)%4]>>8&255]^s>>8),a[4*i+3]=255&(l[255&n[(i+1)%4]]^s); }return a};var N=function(e){if(!(this instanceof N)){ throw Error("AES must be instanitated with `new`"); }this.description="Electronic Code Block",this.name="ecb",this._aes=new k(e);};N.prototype.encrypt=function(e){if((e=o(e)).length%16!=0){ throw new Error("invalid plaintext size (must be multiple of 16 bytes)"); }for(var t=u(e.length),r=u(16),n=0;n<e.length;n+=16){ s(e,r,0,n,n+16),s(r=this._aes.encrypt(r),t,n); }return t},N.prototype.decrypt=function(e){if((e=o(e)).length%16!=0){ throw new Error("invalid ciphertext size (must be multiple of 16 bytes)"); }for(var t=u(e.length),r=u(16),n=0;n<e.length;n+=16){ s(e,r,0,n,n+16),s(r=this._aes.decrypt(r),t,n); }return t};var P=function(e,t){if(!(this instanceof P)){ throw Error("AES must be instanitated with `new`"); }if(this.description="Cipher Block Chaining",this.name="cbc",t){if(16!=t.length){ throw new Error("invalid initialation vector size (must be 16 bytes)") }}else { t=u(16); }this._lastCipherblock=o(t,!0),this._aes=new k(e);};P.prototype.encrypt=function(e){if((e=o(e)).length%16!=0){ throw new Error("invalid plaintext size (must be multiple of 16 bytes)"); }for(var t=u(e.length),r=u(16),n=0;n<e.length;n+=16){s(e,r,0,n,n+16);for(var i=0;i<16;i++){ r[i]^=this._lastCipherblock[i]; }this._lastCipherblock=this._aes.encrypt(r),s(this._lastCipherblock,t,n);}return t},P.prototype.decrypt=function(e){if((e=o(e)).length%16!=0){ throw new Error("invalid ciphertext size (must be multiple of 16 bytes)"); }for(var t=u(e.length),r=u(16),n=0;n<e.length;n+=16){s(e,r,0,n,n+16),r=this._aes.decrypt(r);for(var i=0;i<16;i++){ t[n+i]=r[i]^this._lastCipherblock[i]; }s(e,this._lastCipherblock,0,n,n+16);}return t};var x=function(e,t,r){if(!(this instanceof x)){ throw Error("AES must be instanitated with `new`"); }if(this.description="Cipher Feedback",this.name="cfb",t){if(16!=t.length){ throw new Error("invalid initialation vector size (must be 16 size)") }}else { t=u(16); }r=r||1,this.segmentSize=r,this._shiftRegister=o(t,!0),this._aes=new k(e);};x.prototype.encrypt=function(e){if(e.length%this.segmentSize!=0){ throw new Error("invalid plaintext size (must be segmentSize bytes)"); }for(var t,r=o(e,!0),n=0;n<r.length;n+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var i=0;i<this.segmentSize;i++){ r[n+i]^=t[i]; }s(this._shiftRegister,this._shiftRegister,0,this.segmentSize),s(r,this._shiftRegister,16-this.segmentSize,n,n+this.segmentSize);}return r},x.prototype.decrypt=function(e){if(e.length%this.segmentSize!=0){ throw new Error("invalid ciphertext size (must be segmentSize bytes)"); }for(var t,r=o(e,!0),n=0;n<r.length;n+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var i=0;i<this.segmentSize;i++){ r[n+i]^=t[i]; }s(this._shiftRegister,this._shiftRegister,0,this.segmentSize),s(e,this._shiftRegister,16-this.segmentSize,n,n+this.segmentSize);}return r};var I=function(e,t){if(!(this instanceof I)){ throw Error("AES must be instanitated with `new`"); }if(this.description="Output Feedback",this.name="ofb",t){if(16!=t.length){ throw new Error("invalid initialation vector size (must be 16 bytes)") }}else { t=u(16); }this._lastPrecipher=o(t,!0),this._lastPrecipherIndex=16,this._aes=new k(e);};I.prototype.encrypt=function(e){for(var t=o(e,!0),r=0;r<t.length;r++){ 16===this._lastPrecipherIndex&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),t[r]^=this._lastPrecipher[this._lastPrecipherIndex++]; }return t},I.prototype.decrypt=I.prototype.encrypt;var T=function(e){if(!(this instanceof T)){ throw Error("Counter must be instanitated with `new`"); }0===e||e||(e=1),"number"==typeof e?(this._counter=u(16),this.setValue(e)):this.setBytes(e);};T.prototype.setValue=function(e){if("number"!=typeof e||parseInt(e)!=e){ throw new Error("invalid counter value (must be an integer)"); }for(var t=15;0<=t;--t){ this._counter[t]=e%256,e>>=8; }},T.prototype.setBytes=function(e){if(16!=(e=o(e,!0)).length){ throw new Error("invalid counter bytes size (must be 16 bytes)"); }this._counter=e;},T.prototype.increment=function(){for(var e=15;0<=e;e--){if(255!==this._counter[e]){this._counter[e]++;break}this._counter[e]=0;}};var R=function(e,t){if(!(this instanceof R)){ throw Error("AES must be instanitated with `new`"); }this.description="Counter",this.name="ctr",t instanceof T||(t=new T(t)),this._counter=t,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new k(e);};R.prototype.encrypt=function(e){for(var t=o(e,!0),r=0;r<t.length;r++){ 16===this._remainingCounterIndex&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),t[r]^=this._remainingCounter[this._remainingCounterIndex++]; }return t},R.prototype.decrypt=R.prototype.encrypt;var O={AES:k,Counter:T,ModeOfOperation:{ecb:N,cbc:P,cfb:x,ofb:I,ctr:R},utils:{hex:a,utf8:t},padding:{pkcs7:{pad:function(e){var t=16-(e=o(e,!0)).length%16,r=u(e.length+t);s(e,r);for(var n=e.length;n<r.length;n++){ r[n]=t; }return r},strip:function(e){if((e=o(e,!0)).length<16){ throw new Error("PKCS#7 invalid length"); }var t=e[e.length-1];if(16<t){ throw new Error("PKCS#7 padding byte out of range"); }for(var r=e.length-t,n=0;n<t;n++){ if(e[r+n]!==t){ throw new Error("PKCS#7 invalid padding byte"); } }var i=u(r);return s(e,i,0,0,r),i}}},_arrayTest:{coerceArray:o,createArray:u,copyArray:s}};void 0!==B?C.exports=O:(e.aesjs&&(O._aesjs=e.aesjs),e.aesjs=O);}(this);},{}],9:[function(A,e,t){!function(e,t){function y(e,t){if(!e){ throw new Error(t||"Assertion failed") }}function r(e,t){e.super_=t;function r(){}r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e;}function m(e,t,r){if(m.isBN(e)){ return e; }this.negative=0,this.words=null,this.length=0,(this.red=null)!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"));}var n;"object"==typeof e?e.exports=m:t.BN=m,(m.BN=m).wordSize=26;try{n=A("buffer").Buffer;}catch(e){}function s(e,t,r){for(var n=0,i=Math.min(e.length,r),o=t;o<i;o++){var s=e.charCodeAt(o)-48;n<<=4,n|=49<=s&&s<=54?s-49+10:17<=s&&s<=22?s-17+10:15&s;}return n}function f(e,t,r,n){for(var i=0,o=Math.min(e.length,r),s=t;s<o;s++){var a=e.charCodeAt(s)-48;i*=n,i+=49<=a?a-49+10:17<=a?a-17+10:a;}return i}m.isBN=function(e){return e instanceof m||null!==e&&"object"==typeof e&&e.constructor.wordSize===m.wordSize&&Array.isArray(e.words)},m.max=function(e,t){return 0<e.cmp(t)?e:t},m.min=function(e,t){return e.cmp(t)<0?e:t},m.prototype._init=function(e,t,r){if("number"==typeof e){ return this._initNumber(e,t,r); }if("object"==typeof e){ return this._initArray(e,t,r); }"hex"===t&&(t=16),y(t===(0|t)&&2<=t&&t<=36);var n=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&n++,16===t?this._parseHex(e,n):this._parseBase(e,t,n),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r);},m.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(y(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r);},m.prototype._initArray=function(e,t,r){if(y("number"==typeof e.length),e.length<=0){ return this.words=[0],this.length=1,this; }this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++){ this.words[n]=0; }var i,o,s=0;if("be"===r){ for(n=e.length-1,i=0;0<=n;n-=3){ o=e[n]|e[n-1]<<8|e[n-2]<<16,this.words[i]|=o<<s&67108863,this.words[i+1]=o>>>26-s&67108863,26<=(s+=24)&&(s-=26,i++); } }else if("le"===r){ for(i=n=0;n<e.length;n+=3){ o=e[n]|e[n+1]<<8|e[n+2]<<16,this.words[i]|=o<<s&67108863,this.words[i+1]=o>>>26-s&67108863,26<=(s+=24)&&(s-=26,i++); } }return this.strip()},m.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++){ this.words[r]=0; }var n,i,o=0;for(r=e.length-6,n=0;t<=r;r-=6){ i=s(e,r,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303,26<=(o+=24)&&(o-=26,n++); }r+6!==t&&(i=s(e,t,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303),this.strip();},m.prototype._parseBase=function(e,t,r){this.words=[0];for(var n=0,i=this.length=1;i<=67108863;i*=t){ n++; }n--,i=i/t|0;for(var o=e.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,l=r;l<a;l+=n){ u=f(e,l,l+n,t),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u); }if(0!=s){var h=1;for(u=f(e,l,e.length,t),l=0;l<s;l++){ h*=t; }this.imuln(h),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);}},m.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++){ e.words[t]=this.words[t]; }e.length=this.length,e.negative=this.negative,e.red=this.red;},m.prototype.clone=function(){var e=new m(null);return this.copy(e),e},m.prototype._expand=function(e){for(;this.length<e;){ this.words[this.length++]=0; }return this},m.prototype.strip=function(){for(;1<this.length&&0===this.words[this.length-1];){ this.length--; }return this._normSign()},m.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},m.prototype.inspect=function(){return (this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function i(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;n=(r.length=n)-1|0;var i=0|e.words[0],o=0|t.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var l=1;l<n;l++){for(var h=u>>>26,f=67108863&u,c=Math.min(l,t.length-1),d=Math.max(0,l-e.length+1);d<=c;d++){var p=l-d|0;h+=(s=(i=0|e.words[p])*(o=0|t.words[d])+f)/67108864|0,f=67108863&s;}r.words[l]=0|f,u=0|h;}return 0!==u?r.words[l]=0|u:r.length--,r.strip()}m.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var n=0,i=0,o=0;o<this.length;o++){var s=this.words[o],a=(16777215&(s<<n|i)).toString(16);r=0!==(i=s>>>24-n&16777215)||o!==this.length-1?c[6-a.length]+a+r:a+r,26<=(n+=2)&&(n-=26,o--);}for(0!==i&&(r=i.toString(16)+r);r.length%t!=0;){ r="0"+r; }return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&2<=e&&e<=36){var u=d[e],l=p[e];r="";var h=this.clone();for(h.negative=0;!h.isZero();){var f=h.modn(l).toString(e);r=(h=h.idivn(l)).isZero()?f+r:c[u-f.length]+f+r;}for(this.isZero()&&(r="0"+r);r.length%t!=0;){ r="0"+r; }return 0!==this.negative&&(r="-"+r),r}y(!1,"Base should be between 2 and 36");},m.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:2<this.length&&y(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},m.prototype.toJSON=function(){return this.toString(16)},m.prototype.toBuffer=function(e,t){return y(void 0!==n),this.toArrayLike(n,e,t)},m.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},m.prototype.toArrayLike=function(e,t,r){var n=this.byteLength(),i=r||Math.max(1,n);y(n<=i,"byte array longer than desired length"),y(0<i,"Requested array length <= 0"),this.strip();var o,s,a="le"===t,u=new e(i),l=this.clone();if(a){for(s=0;!l.isZero();s++){ o=l.andln(255),l.iushrn(8),u[s]=o; }for(;s<i;s++){ u[s]=0; }}else{for(s=0;s<i-n;s++){ u[s]=0; }for(s=0;!l.isZero();s++){ o=l.andln(255),l.iushrn(8),u[i-s-1]=o; }}return u},m.prototype._countBits=Math.clz32?function(e){return 32-Math.clz32(e)}:function(e){var t=e,r=0;return 4096<=t&&(r+=13,t>>>=13),64<=t&&(r+=7,t>>>=7),8<=t&&(r+=4,t>>>=4),2<=t&&(r+=2,t>>>=2),r+t},m.prototype._zeroBits=function(e){if(0===e){ return 26; }var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},m.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},m.prototype.zeroBits=function(){if(this.isZero()){ return 0; }for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r){ break }}return e},m.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},m.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},m.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},m.prototype.isNeg=function(){return 0!==this.negative},m.prototype.neg=function(){return this.clone().ineg()},m.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},m.prototype.iuor=function(e){for(;this.length<e.length;){ this.words[this.length++]=0; }for(var t=0;t<e.length;t++){ this.words[t]=this.words[t]|e.words[t]; }return this.strip()},m.prototype.ior=function(e){return y(0==(this.negative|e.negative)),this.iuor(e)},m.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},m.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},m.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++){ this.words[r]=this.words[r]&e.words[r]; }return this.length=t.length,this.strip()},m.prototype.iand=function(e){return y(0==(this.negative|e.negative)),this.iuand(e)},m.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},m.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},m.prototype.iuxor=function(e){var t,r;r=this.length>e.length?(t=this,e):(t=e,this);for(var n=0;n<r.length;n++){ this.words[n]=t.words[n]^r.words[n]; }if(this!==t){ for(;n<t.length;n++){ this.words[n]=t.words[n]; } }return this.length=t.length,this.strip()},m.prototype.ixor=function(e){return y(0==(this.negative|e.negative)),this.iuxor(e)},m.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},m.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},m.prototype.inotn=function(e){y("number"==typeof e&&0<=e);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),0<r&&t--;for(var n=0;n<t;n++){ this.words[n]=67108863&~this.words[n]; }return 0<r&&(this.words[n]=~this.words[n]&67108863>>26-r),this.strip()},m.prototype.notn=function(e){return this.clone().inotn(e)},m.prototype.setn=function(e,t){y("number"==typeof e&&0<=e);var r=e/26|0,n=e%26;return this._expand(1+r),this.words[r]=t?this.words[r]|1<<n:this.words[r]&~(1<<n),this.strip()},m.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative){ return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign(); }if(0===this.negative&&0!==e.negative){ return e.negative=0,t=this.isub(e),e.negative=1,t._normSign(); }n=this.length>e.length?(r=this,e):(r=e,this);for(var i=0,o=0;o<n.length;o++){ t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26; }for(;0!==i&&o<r.length;o++){ t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26; }if(this.length=r.length,0!==i){ this.words[this.length]=i,this.length++; }else if(r!==this){ for(;o<r.length;o++){ this.words[o]=r.words[o]; } }return this},m.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},m.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative){ return this.negative=0,this.iadd(e),this.negative=1,this._normSign(); }var r,n,i=this.cmp(e);if(0===i){ return this.negative=0,this.length=1,this.words[0]=0,this; }n=0<i?(r=this,e):(r=e,this);for(var o=0,s=0;s<n.length;s++){ o=(t=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&t; }for(;0!==o&&s<r.length;s++){ o=(t=(0|r.words[s])+o)>>26,this.words[s]=67108863&t; }if(0===o&&s<r.length&&r!==this){ for(;s<r.length;s++){ this.words[s]=r.words[s]; } }return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},m.prototype.sub=function(e){return this.clone().isub(e)};var o=function(e,t,r){var n,i,o,s=e.words,a=t.words,u=r.words,l=0,h=0|s[0],f=8191&h,c=h>>>13,d=0|s[1],p=8191&d,v=d>>>13,y=0|s[2],m=8191&y,g=y>>>13,b=0|s[3],w=8191&b,_=b>>>13,M=0|s[4],A=8191&M,E=M>>>13,S=0|s[5],k=8191&S,N=S>>>13,P=0|s[6],x=8191&P,I=P>>>13,T=0|s[7],R=8191&T,O=T>>>13,C=0|s[8],B=8191&C,D=C>>>13,L=0|s[9],U=8191&L,F=L>>>13,j=0|a[0],G=8191&j,H=j>>>13,z=0|a[1],V=8191&z,K=z>>>13,q=0|a[2],W=8191&q,Z=q>>>13,J=0|a[3],X=8191&J,$=J>>>13,Q=0|a[4],Y=8191&Q,ee=Q>>>13,te=0|a[5],re=8191&te,ne=te>>>13,ie=0|a[6],oe=8191&ie,se=ie>>>13,ae=0|a[7],ue=8191&ae,le=ae>>>13,he=0|a[8],fe=8191&he,ce=he>>>13,de=0|a[9],pe=8191&de,ve=de>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(l+(n=Math.imul(f,G))|0)+((8191&(i=(i=Math.imul(f,H))+Math.imul(c,G)|0))<<13)|0;l=((o=Math.imul(c,H))+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(p,G),i=(i=Math.imul(p,H))+Math.imul(v,G)|0,o=Math.imul(v,H);var me=(l+(n=n+Math.imul(f,V)|0)|0)+((8191&(i=(i=i+Math.imul(f,K)|0)+Math.imul(c,V)|0))<<13)|0;l=((o=o+Math.imul(c,K)|0)+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(m,G),i=(i=Math.imul(m,H))+Math.imul(g,G)|0,o=Math.imul(g,H),n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,K)|0;var ge=(l+(n=n+Math.imul(f,W)|0)|0)+((8191&(i=(i=i+Math.imul(f,Z)|0)+Math.imul(c,W)|0))<<13)|0;l=((o=o+Math.imul(c,Z)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(w,G),i=(i=Math.imul(w,H))+Math.imul(_,G)|0,o=Math.imul(_,H),n=n+Math.imul(m,V)|0,i=(i=i+Math.imul(m,K)|0)+Math.imul(g,V)|0,o=o+Math.imul(g,K)|0,n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(v,W)|0,o=o+Math.imul(v,Z)|0;var be=(l+(n=n+Math.imul(f,X)|0)|0)+((8191&(i=(i=i+Math.imul(f,$)|0)+Math.imul(c,X)|0))<<13)|0;l=((o=o+Math.imul(c,$)|0)+(i>>>13)|0)+(be>>>26)|0,be&=67108863,n=Math.imul(A,G),i=(i=Math.imul(A,H))+Math.imul(E,G)|0,o=Math.imul(E,H),n=n+Math.imul(w,V)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,K)|0,n=n+Math.imul(m,W)|0,i=(i=i+Math.imul(m,Z)|0)+Math.imul(g,W)|0,o=o+Math.imul(g,Z)|0,n=n+Math.imul(p,X)|0,i=(i=i+Math.imul(p,$)|0)+Math.imul(v,X)|0,o=o+Math.imul(v,$)|0;var we=(l+(n=n+Math.imul(f,Y)|0)|0)+((8191&(i=(i=i+Math.imul(f,ee)|0)+Math.imul(c,Y)|0))<<13)|0;l=((o=o+Math.imul(c,ee)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(k,G),i=(i=Math.imul(k,H))+Math.imul(N,G)|0,o=Math.imul(N,H),n=n+Math.imul(A,V)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,K)|0,n=n+Math.imul(w,W)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(_,W)|0,o=o+Math.imul(_,Z)|0,n=n+Math.imul(m,X)|0,i=(i=i+Math.imul(m,$)|0)+Math.imul(g,X)|0,o=o+Math.imul(g,$)|0,n=n+Math.imul(p,Y)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(v,Y)|0,o=o+Math.imul(v,ee)|0;var _e=(l+(n=n+Math.imul(f,re)|0)|0)+((8191&(i=(i=i+Math.imul(f,ne)|0)+Math.imul(c,re)|0))<<13)|0;l=((o=o+Math.imul(c,ne)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(x,G),i=(i=Math.imul(x,H))+Math.imul(I,G)|0,o=Math.imul(I,H),n=n+Math.imul(k,V)|0,i=(i=i+Math.imul(k,K)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,K)|0,n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(E,W)|0,o=o+Math.imul(E,Z)|0,n=n+Math.imul(w,X)|0,i=(i=i+Math.imul(w,$)|0)+Math.imul(_,X)|0,o=o+Math.imul(_,$)|0,n=n+Math.imul(m,Y)|0,i=(i=i+Math.imul(m,ee)|0)+Math.imul(g,Y)|0,o=o+Math.imul(g,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(v,re)|0,o=o+Math.imul(v,ne)|0;var Me=(l+(n=n+Math.imul(f,oe)|0)|0)+((8191&(i=(i=i+Math.imul(f,se)|0)+Math.imul(c,oe)|0))<<13)|0;l=((o=o+Math.imul(c,se)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(R,G),i=(i=Math.imul(R,H))+Math.imul(O,G)|0,o=Math.imul(O,H),n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,K)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,K)|0,n=n+Math.imul(k,W)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(N,W)|0,o=o+Math.imul(N,Z)|0,n=n+Math.imul(A,X)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(E,X)|0,o=o+Math.imul(E,$)|0,n=n+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,ee)|0)+Math.imul(_,Y)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(m,re)|0,i=(i=i+Math.imul(m,ne)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,se)|0)+Math.imul(v,oe)|0,o=o+Math.imul(v,se)|0;var Ae=(l+(n=n+Math.imul(f,ue)|0)|0)+((8191&(i=(i=i+Math.imul(f,le)|0)+Math.imul(c,ue)|0))<<13)|0;l=((o=o+Math.imul(c,le)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(B,G),i=(i=Math.imul(B,H))+Math.imul(D,G)|0,o=Math.imul(D,H),n=n+Math.imul(R,V)|0,i=(i=i+Math.imul(R,K)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,K)|0,n=n+Math.imul(x,W)|0,i=(i=i+Math.imul(x,Z)|0)+Math.imul(I,W)|0,o=o+Math.imul(I,Z)|0,n=n+Math.imul(k,X)|0,i=(i=i+Math.imul(k,$)|0)+Math.imul(N,X)|0,o=o+Math.imul(N,$)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,ee)|0)+Math.imul(E,Y)|0,o=o+Math.imul(E,ee)|0,n=n+Math.imul(w,re)|0,i=(i=i+Math.imul(w,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(m,oe)|0,i=(i=i+Math.imul(m,se)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,se)|0,n=n+Math.imul(p,ue)|0,i=(i=i+Math.imul(p,le)|0)+Math.imul(v,ue)|0,o=o+Math.imul(v,le)|0;var Ee=(l+(n=n+Math.imul(f,fe)|0)|0)+((8191&(i=(i=i+Math.imul(f,ce)|0)+Math.imul(c,fe)|0))<<13)|0;l=((o=o+Math.imul(c,ce)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(U,G),i=(i=Math.imul(U,H))+Math.imul(F,G)|0,o=Math.imul(F,H),n=n+Math.imul(B,V)|0,i=(i=i+Math.imul(B,K)|0)+Math.imul(D,V)|0,o=o+Math.imul(D,K)|0,n=n+Math.imul(R,W)|0,i=(i=i+Math.imul(R,Z)|0)+Math.imul(O,W)|0,o=o+Math.imul(O,Z)|0,n=n+Math.imul(x,X)|0,i=(i=i+Math.imul(x,$)|0)+Math.imul(I,X)|0,o=o+Math.imul(I,$)|0,n=n+Math.imul(k,Y)|0,i=(i=i+Math.imul(k,ee)|0)+Math.imul(N,Y)|0,o=o+Math.imul(N,ee)|0,n=n+Math.imul(A,re)|0,i=(i=i+Math.imul(A,ne)|0)+Math.imul(E,re)|0,o=o+Math.imul(E,ne)|0,n=n+Math.imul(w,oe)|0,i=(i=i+Math.imul(w,se)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,se)|0,n=n+Math.imul(m,ue)|0,i=(i=i+Math.imul(m,le)|0)+Math.imul(g,ue)|0,o=o+Math.imul(g,le)|0,n=n+Math.imul(p,fe)|0,i=(i=i+Math.imul(p,ce)|0)+Math.imul(v,fe)|0,o=o+Math.imul(v,ce)|0;var Se=(l+(n=n+Math.imul(f,pe)|0)|0)+((8191&(i=(i=i+Math.imul(f,ve)|0)+Math.imul(c,pe)|0))<<13)|0;l=((o=o+Math.imul(c,ve)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(U,V),i=(i=Math.imul(U,K))+Math.imul(F,V)|0,o=Math.imul(F,K),n=n+Math.imul(B,W)|0,i=(i=i+Math.imul(B,Z)|0)+Math.imul(D,W)|0,o=o+Math.imul(D,Z)|0,n=n+Math.imul(R,X)|0,i=(i=i+Math.imul(R,$)|0)+Math.imul(O,X)|0,o=o+Math.imul(O,$)|0,n=n+Math.imul(x,Y)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,ee)|0,n=n+Math.imul(k,re)|0,i=(i=i+Math.imul(k,ne)|0)+Math.imul(N,re)|0,o=o+Math.imul(N,ne)|0,n=n+Math.imul(A,oe)|0,i=(i=i+Math.imul(A,se)|0)+Math.imul(E,oe)|0,o=o+Math.imul(E,se)|0,n=n+Math.imul(w,ue)|0,i=(i=i+Math.imul(w,le)|0)+Math.imul(_,ue)|0,o=o+Math.imul(_,le)|0,n=n+Math.imul(m,fe)|0,i=(i=i+Math.imul(m,ce)|0)+Math.imul(g,fe)|0,o=o+Math.imul(g,ce)|0;var ke=(l+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,ve)|0)+Math.imul(v,pe)|0))<<13)|0;l=((o=o+Math.imul(v,ve)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(U,W),i=(i=Math.imul(U,Z))+Math.imul(F,W)|0,o=Math.imul(F,Z),n=n+Math.imul(B,X)|0,i=(i=i+Math.imul(B,$)|0)+Math.imul(D,X)|0,o=o+Math.imul(D,$)|0,n=n+Math.imul(R,Y)|0,i=(i=i+Math.imul(R,ee)|0)+Math.imul(O,Y)|0,o=o+Math.imul(O,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(I,re)|0,o=o+Math.imul(I,ne)|0,n=n+Math.imul(k,oe)|0,i=(i=i+Math.imul(k,se)|0)+Math.imul(N,oe)|0,o=o+Math.imul(N,se)|0,n=n+Math.imul(A,ue)|0,i=(i=i+Math.imul(A,le)|0)+Math.imul(E,ue)|0,o=o+Math.imul(E,le)|0,n=n+Math.imul(w,fe)|0,i=(i=i+Math.imul(w,ce)|0)+Math.imul(_,fe)|0,o=o+Math.imul(_,ce)|0;var Ne=(l+(n=n+Math.imul(m,pe)|0)|0)+((8191&(i=(i=i+Math.imul(m,ve)|0)+Math.imul(g,pe)|0))<<13)|0;l=((o=o+Math.imul(g,ve)|0)+(i>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,n=Math.imul(U,X),i=(i=Math.imul(U,$))+Math.imul(F,X)|0,o=Math.imul(F,$),n=n+Math.imul(B,Y)|0,i=(i=i+Math.imul(B,ee)|0)+Math.imul(D,Y)|0,o=o+Math.imul(D,ee)|0,n=n+Math.imul(R,re)|0,i=(i=i+Math.imul(R,ne)|0)+Math.imul(O,re)|0,o=o+Math.imul(O,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,se)|0)+Math.imul(I,oe)|0,o=o+Math.imul(I,se)|0,n=n+Math.imul(k,ue)|0,i=(i=i+Math.imul(k,le)|0)+Math.imul(N,ue)|0,o=o+Math.imul(N,le)|0,n=n+Math.imul(A,fe)|0,i=(i=i+Math.imul(A,ce)|0)+Math.imul(E,fe)|0,o=o+Math.imul(E,ce)|0;var Pe=(l+(n=n+Math.imul(w,pe)|0)|0)+((8191&(i=(i=i+Math.imul(w,ve)|0)+Math.imul(_,pe)|0))<<13)|0;l=((o=o+Math.imul(_,ve)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,n=Math.imul(U,Y),i=(i=Math.imul(U,ee))+Math.imul(F,Y)|0,o=Math.imul(F,ee),n=n+Math.imul(B,re)|0,i=(i=i+Math.imul(B,ne)|0)+Math.imul(D,re)|0,o=o+Math.imul(D,ne)|0,n=n+Math.imul(R,oe)|0,i=(i=i+Math.imul(R,se)|0)+Math.imul(O,oe)|0,o=o+Math.imul(O,se)|0,n=n+Math.imul(x,ue)|0,i=(i=i+Math.imul(x,le)|0)+Math.imul(I,ue)|0,o=o+Math.imul(I,le)|0,n=n+Math.imul(k,fe)|0,i=(i=i+Math.imul(k,ce)|0)+Math.imul(N,fe)|0,o=o+Math.imul(N,ce)|0;var xe=(l+(n=n+Math.imul(A,pe)|0)|0)+((8191&(i=(i=i+Math.imul(A,ve)|0)+Math.imul(E,pe)|0))<<13)|0;l=((o=o+Math.imul(E,ve)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(U,re),i=(i=Math.imul(U,ne))+Math.imul(F,re)|0,o=Math.imul(F,ne),n=n+Math.imul(B,oe)|0,i=(i=i+Math.imul(B,se)|0)+Math.imul(D,oe)|0,o=o+Math.imul(D,se)|0,n=n+Math.imul(R,ue)|0,i=(i=i+Math.imul(R,le)|0)+Math.imul(O,ue)|0,o=o+Math.imul(O,le)|0,n=n+Math.imul(x,fe)|0,i=(i=i+Math.imul(x,ce)|0)+Math.imul(I,fe)|0,o=o+Math.imul(I,ce)|0;var Ie=(l+(n=n+Math.imul(k,pe)|0)|0)+((8191&(i=(i=i+Math.imul(k,ve)|0)+Math.imul(N,pe)|0))<<13)|0;l=((o=o+Math.imul(N,ve)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(U,oe),i=(i=Math.imul(U,se))+Math.imul(F,oe)|0,o=Math.imul(F,se),n=n+Math.imul(B,ue)|0,i=(i=i+Math.imul(B,le)|0)+Math.imul(D,ue)|0,o=o+Math.imul(D,le)|0,n=n+Math.imul(R,fe)|0,i=(i=i+Math.imul(R,ce)|0)+Math.imul(O,fe)|0,o=o+Math.imul(O,ce)|0;var Te=(l+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,ve)|0)+Math.imul(I,pe)|0))<<13)|0;l=((o=o+Math.imul(I,ve)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,n=Math.imul(U,ue),i=(i=Math.imul(U,le))+Math.imul(F,ue)|0,o=Math.imul(F,le),n=n+Math.imul(B,fe)|0,i=(i=i+Math.imul(B,ce)|0)+Math.imul(D,fe)|0,o=o+Math.imul(D,ce)|0;var Re=(l+(n=n+Math.imul(R,pe)|0)|0)+((8191&(i=(i=i+Math.imul(R,ve)|0)+Math.imul(O,pe)|0))<<13)|0;l=((o=o+Math.imul(O,ve)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(U,fe),i=(i=Math.imul(U,ce))+Math.imul(F,fe)|0,o=Math.imul(F,ce);var Oe=(l+(n=n+Math.imul(B,pe)|0)|0)+((8191&(i=(i=i+Math.imul(B,ve)|0)+Math.imul(D,pe)|0))<<13)|0;l=((o=o+Math.imul(D,ve)|0)+(i>>>13)|0)+(Oe>>>26)|0,Oe&=67108863;var Ce=(l+(n=Math.imul(U,pe))|0)+((8191&(i=(i=Math.imul(U,ve))+Math.imul(F,pe)|0))<<13)|0;return l=((o=Math.imul(F,ve))+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,u[0]=ye,u[1]=me,u[2]=ge,u[3]=be,u[4]=we,u[5]=_e,u[6]=Me,u[7]=Ae,u[8]=Ee,u[9]=Se,u[10]=ke,u[11]=Ne,u[12]=Pe,u[13]=xe,u[14]=Ie,u[15]=Te,u[16]=Re,u[17]=Oe,u[18]=Ce,0!==l&&(u[19]=l,r.length++),r};function a(e,t,r){return (new u).mulp(e,t,r)}function u(e,t){this.x=e,this.y=t;}Math.imul||(o=i),m.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?o(this,e,t):r<63?i(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,t.length-1),l=Math.max(0,o-e.length+1);l<=u;l++){var h=o-l,f=(0|e.words[h])*(0|t.words[l]),c=67108863&f;a=67108863&(c=c+a|0),i+=(s=(s=s+(f/67108864|0)|0)+(c>>>26)|0)>>>26,s&=67108863;}r.words[o]=a,n=s,s=i;}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,e,t):a(this,e,t)},u.prototype.makeRBT=function(e){for(var t=new Array(e),r=m.prototype._countBits(e)-1,n=0;n<e;n++){ t[n]=this.revBin(n,r,e); }return t},u.prototype.revBin=function(e,t,r){if(0===e||e===r-1){ return e; }for(var n=0,i=0;i<t;i++){ n|=(1&e)<<t-i-1,e>>=1; }return n},u.prototype.permute=function(e,t,r,n,i,o){for(var s=0;s<o;s++){ n[s]=t[e[s]],i[s]=r[e[s]]; }},u.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var s=1;s<i;s<<=1){ for(var a=s<<1,u=Math.cos(2*Math.PI/a),l=Math.sin(2*Math.PI/a),h=0;h<i;h+=a){ for(var f=u,c=l,d=0;d<s;d++){var p=r[h+d],v=n[h+d],y=r[h+d+s],m=n[h+d+s],g=f*y-c*m;m=f*m+c*y,y=g,r[h+d]=p+y,n[h+d]=v+m,r[h+d+s]=p-y,n[h+d+s]=v-m,d!==a&&(g=u*f-l*c,c=u*c+l*f,f=g);} } }},u.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1){ i++; }return 1<<i+1+n},u.prototype.conjugate=function(e,t,r){if(!(r<=1)){ for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i;} }},u.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0;}return e},u.prototype.convert13b=function(e,t,r,n){for(var i=0,o=0;o<t;o++){ i+=0|e[o],r[2*o]=8191&i,i>>>=13,r[2*o+1]=8191&i,i>>>=13; }for(o=2*t;o<n;++o){ r[o]=0; }y(0===i),y(0==(-8192&i));},u.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++){ t[r]=0; }return t},u.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),l=new Array(n),h=new Array(n),f=new Array(n),c=r.words;c.length=n,this.convert13b(e.words,e.length,s,n),this.convert13b(t.words,t.length,l,n),this.transform(s,o,a,u,n,i),this.transform(l,o,h,f,n,i);for(var d=0;d<n;d++){var p=a[d]*h[d]-u[d]*f[d];u[d]=a[d]*f[d]+u[d]*h[d],a[d]=p;}return this.conjugate(a,u,n),this.transform(a,u,c,o,n,i),this.conjugate(c,o,n),this.normalize13b(c,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},m.prototype.mul=function(e){var t=new m(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},m.prototype.mulf=function(e){var t=new m(null);return t.words=new Array(this.length+e.length),a(this,e,t)},m.prototype.imul=function(e){return this.clone().mulTo(e,this)},m.prototype.imuln=function(e){y("number"==typeof e),y(e<67108864);for(var t=0,r=0;r<this.length;r++){var n=(0|this.words[r])*e,i=(67108863&n)+(67108863&t);t>>=26,t+=n/67108864|0,t+=i>>>26,this.words[r]=67108863&i;}return 0!==t&&(this.words[r]=t,this.length++),this},m.prototype.muln=function(e){return this.clone().imuln(e)},m.prototype.sqr=function(){return this.mul(this)},m.prototype.isqr=function(){return this.imul(this.clone())},m.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=(e.words[n]&1<<i)>>>i;}return t}(e);if(0===t.length){ return new m(1); }for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr()){ }if(++n<t.length){ for(var i=r.sqr();n<t.length;n++,i=i.sqr()){ 0!==t[n]&&(r=r.mul(i)); } }return r},m.prototype.iushln=function(e){y("number"==typeof e&&0<=e);var t,r=e%26,n=(e-r)/26,i=67108863>>>26-r<<26-r;if(0!=r){var o=0;for(t=0;t<this.length;t++){var s=this.words[t]&i,a=(0|this.words[t])-s<<r;this.words[t]=a|o,o=s>>>26-r;}o&&(this.words[t]=o,this.length++);}if(0!=n){for(t=this.length-1;0<=t;t--){ this.words[t+n]=this.words[t]; }for(t=0;t<n;t++){ this.words[t]=0; }this.length+=n;}return this.strip()},m.prototype.ishln=function(e){return y(0===this.negative),this.iushln(e)},m.prototype.iushrn=function(e,t,r){var n;y("number"==typeof e&&0<=e),n=t?(t-t%26)/26:0;var i=e%26,o=Math.min((e-i)/26,this.length),s=67108863^67108863>>>i<<i,a=r;if(n-=o,n=Math.max(0,n),a){for(var u=0;u<o;u++){ a.words[u]=this.words[u]; }a.length=o;}if(0===o);else if(this.length>o){ for(this.length-=o,u=0;u<this.length;u++){ this.words[u]=this.words[u+o]; } }else { this.words[0]=0,this.length=1; }var l=0;for(u=this.length-1;0<=u&&(0!==l||n<=u);u--){var h=0|this.words[u];this.words[u]=l<<26-i|h>>>i,l=h&s;}return a&&0!==l&&(a.words[a.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},m.prototype.ishrn=function(e,t,r){return y(0===this.negative),this.iushrn(e,t,r)},m.prototype.shln=function(e){return this.clone().ishln(e)},m.prototype.ushln=function(e){return this.clone().iushln(e)},m.prototype.shrn=function(e){return this.clone().ishrn(e)},m.prototype.ushrn=function(e){return this.clone().iushrn(e)},m.prototype.testn=function(e){y("number"==typeof e&&0<=e);var t=e%26,r=(e-t)/26,n=1<<t;return !(this.length<=r)&&!!(this.words[r]&n)},m.prototype.imaskn=function(e){y("number"==typeof e&&0<=e);var t=e%26,r=(e-t)/26;if(y(0===this.negative,"imaskn works only with positive numbers"),this.length<=r){ return this; }if(0!=t&&r++,this.length=Math.min(r,this.length),0!=t){var n=67108863^67108863>>>t<<t;this.words[this.length-1]&=n;}return this.strip()},m.prototype.maskn=function(e){return this.clone().imaskn(e)},m.prototype.iaddn=function(e){return y("number"==typeof e),y(e<67108864),e<0?this.isubn(-e):0!==this.negative?(1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0):(this.negative=0,this.isubn(e),this.negative=1),this):this._iaddn(e)},m.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&67108864<=this.words[t];t++){ this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++; }return this.length=Math.max(this.length,t+1),this},m.prototype.isubn=function(e){if(y("number"==typeof e),y(e<67108864),e<0){ return this.iaddn(-e); }if(0!==this.negative){ return this.negative=0,this.iaddn(e),this.negative=1,this; }if(this.words[0]-=e,1===this.length&&this.words[0]<0){ this.words[0]=-this.words[0],this.negative=1; }else { for(var t=0;t<this.length&&this.words[t]<0;t++){ this.words[t]+=67108864,this.words[t+1]-=1; } }return this.strip()},m.prototype.addn=function(e){return this.clone().iaddn(e)},m.prototype.subn=function(e){return this.clone().isubn(e)},m.prototype.iabs=function(){return this.negative=0,this},m.prototype.abs=function(){return this.clone().iabs()},m.prototype._ishlnsubmul=function(e,t,r){var n,i,o=e.length+r;this._expand(o);var s=0;for(n=0;n<e.length;n++){i=(0|this.words[n+r])+s;var a=(0|e.words[n])*t;s=((i-=67108863&a)>>26)-(a/67108864|0),this.words[n+r]=67108863&i;}for(;n<this.length-r;n++){ s=(i=(0|this.words[n+r])+s)>>26,this.words[n+r]=67108863&i; }if(0===s){ return this.strip(); }for(y(-1===s),n=s=0;n<this.length;n++){ s=(i=-(0|this.words[n])+s)>>26,this.words[n]=67108863&i; }return this.negative=1,this.strip()},m.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,o=0|i.words[i.length-1];0!=(r=26-this._countBits(o))&&(i=i.ushln(r),n.iushln(r),o=0|i.words[i.length-1]);var s,a=n.length-i.length;if("mod"!==t){(s=new m(null)).length=1+a,s.words=new Array(s.length);for(var u=0;u<s.length;u++){ s.words[u]=0; }}var l=n.clone()._ishlnsubmul(i,1,a);0===l.negative&&(n=l,s&&(s.words[a]=1));for(var h=a-1;0<=h;h--){var f=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(f=Math.min(f/o|0,67108863),n._ishlnsubmul(i,f,h);0!==n.negative;){ f--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1); }s&&(s.words[h]=f);}return s&&s.strip(),n.strip(),"div"!==t&&0!=r&&n.iushrn(r),{div:s||null,mod:n}},m.prototype.divmod=function(e,t,r){return y(!e.isZero()),this.isZero()?{div:new m(0),mod:new m(0)}:0!==this.negative&&0===e.negative?(o=this.neg().divmod(e,t),"mod"!==t&&(n=o.div.neg()),"div"!==t&&(i=o.mod.neg(),r&&0!==i.negative&&i.iadd(e)),{div:n,mod:i}):0===this.negative&&0!==e.negative?(o=this.divmod(e.neg(),t),"mod"!==t&&(n=o.div.neg()),{div:n,mod:o.mod}):0!=(this.negative&e.negative)?(o=this.neg().divmod(e.neg(),t),"div"!==t&&(i=o.mod.neg(),r&&0!==i.negative&&i.isub(e)),{div:o.div,mod:i}):e.length>this.length||this.cmp(e)<0?{div:new m(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new m(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new m(this.modn(e.words[0]))}:this._wordDiv(e,t);var n,i,o;},m.prototype.div=function(e){return this.divmod(e,"div",!1).div},m.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},m.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},m.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero()){ return t.div; }var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},m.prototype.modn=function(e){y(e<=67108863);for(var t=(1<<26)%e,r=0,n=this.length-1;0<=n;n--){ r=(t*r+(0|this.words[n]))%e; }return r},m.prototype.idivn=function(e){y(e<=67108863);for(var t=0,r=this.length-1;0<=r;r--){var n=(0|this.words[r])+67108864*t;this.words[r]=n/e|0,t=n%e;}return this.strip()},m.prototype.divn=function(e){return this.clone().idivn(e)},m.prototype.egcd=function(e){y(0===e.negative),y(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n=new m(1),i=new m(0),o=new m(0),s=new m(1),a=0;t.isEven()&&r.isEven();){ t.iushrn(1),r.iushrn(1),++a; }for(var u=r.clone(),l=t.clone();!t.isZero();){for(var h=0,f=1;0==(t.words[0]&f)&&h<26;++h,f<<=1){ }if(0<h){ for(t.iushrn(h);0<h--;){ (n.isOdd()||i.isOdd())&&(n.iadd(u),i.isub(l)),n.iushrn(1),i.iushrn(1); } }for(var c=0,d=1;0==(r.words[0]&d)&&c<26;++c,d<<=1){ }if(0<c){ for(r.iushrn(c);0<c--;){ (o.isOdd()||s.isOdd())&&(o.iadd(u),s.isub(l)),o.iushrn(1),s.iushrn(1); } }0<=t.cmp(r)?(t.isub(r),n.isub(o),i.isub(s)):(r.isub(t),o.isub(n),s.isub(i));}return {a:o,b:s,gcd:r.iushln(a)}},m.prototype._invmp=function(e){y(0===e.negative),y(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n,i=new m(1),o=new m(0),s=r.clone();0<t.cmpn(1)&&0<r.cmpn(1);){for(var a=0,u=1;0==(t.words[0]&u)&&a<26;++a,u<<=1){ }if(0<a){ for(t.iushrn(a);0<a--;){ i.isOdd()&&i.iadd(s),i.iushrn(1); } }for(var l=0,h=1;0==(r.words[0]&h)&&l<26;++l,h<<=1){ }if(0<l){ for(r.iushrn(l);0<l--;){ o.isOdd()&&o.iadd(s),o.iushrn(1); } }0<=t.cmp(r)?(t.isub(r),i.isub(o)):(r.isub(t),o.isub(i));}return (n=0===t.cmpn(1)?i:o).cmpn(0)<0&&n.iadd(e),n},m.prototype.gcd=function(e){if(this.isZero()){ return e.abs(); }if(e.isZero()){ return this.abs(); }var t=this.clone(),r=e.clone();t.negative=0;for(var n=r.negative=0;t.isEven()&&r.isEven();n++){ t.iushrn(1),r.iushrn(1); }for(;;){for(;t.isEven();){ t.iushrn(1); }for(;r.isEven();){ r.iushrn(1); }var i=t.cmp(r);if(i<0){var o=t;t=r,r=o;}else if(0===i||0===r.cmpn(1)){ break; }t.isub(r);}return r.iushln(n)},m.prototype.invm=function(e){return this.egcd(e).a.umod(e)},m.prototype.isEven=function(){return 0==(1&this.words[0])},m.prototype.isOdd=function(){return 1==(1&this.words[0])},m.prototype.andln=function(e){return this.words[0]&e},m.prototype.bincn=function(e){y("number"==typeof e);var t=e%26,r=(e-t)/26,n=1<<t;if(this.length<=r){ return this._expand(1+r),this.words[r]|=n,this; }for(var i=n,o=r;0!==i&&o<this.length;o++){var s=0|this.words[o];i=(s+=i)>>>26,s&=67108863,this.words[o]=s;}return 0!==i&&(this.words[o]=i,this.length++),this},m.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},m.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r){ return -1; }if(0===this.negative&&r){ return 1; }if(this.strip(),1<this.length){ t=1; }else{r&&(e=-e),y(e<=67108863,"Number is too big");var n=0|this.words[0];t=n===e?0:n<e?-1:1;}return 0!==this.negative?0|-t:t},m.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative){ return -1; }if(0===this.negative&&0!==e.negative){ return 1; }var t=this.ucmp(e);return 0!==this.negative?0|-t:t},m.prototype.ucmp=function(e){if(this.length>e.length){ return 1; }if(this.length<e.length){ return -1; }for(var t=0,r=this.length-1;0<=r;r--){var n=0|this.words[r],i=0|e.words[r];if(n!=i){n<i?t=-1:i<n&&(t=1);break}}return t},m.prototype.gtn=function(e){return 1===this.cmpn(e)},m.prototype.gt=function(e){return 1===this.cmp(e)},m.prototype.gten=function(e){return 0<=this.cmpn(e)},m.prototype.gte=function(e){return 0<=this.cmp(e)},m.prototype.ltn=function(e){return -1===this.cmpn(e)},m.prototype.lt=function(e){return -1===this.cmp(e)},m.prototype.lten=function(e){return this.cmpn(e)<=0},m.prototype.lte=function(e){return this.cmp(e)<=0},m.prototype.eqn=function(e){return 0===this.cmpn(e)},m.prototype.eq=function(e){return 0===this.cmp(e)},m.red=function(e){return new _(e)},m.prototype.toRed=function(e){return y(!this.red,"Already a number in reduction context"),y(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},m.prototype.fromRed=function(){return y(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},m.prototype._forceRed=function(e){return this.red=e,this},m.prototype.forceRed=function(e){return y(!this.red,"Already a number in reduction context"),this._forceRed(e)},m.prototype.redAdd=function(e){return y(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},m.prototype.redIAdd=function(e){return y(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},m.prototype.redSub=function(e){return y(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},m.prototype.redISub=function(e){return y(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},m.prototype.redShl=function(e){return y(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},m.prototype.redMul=function(e){return y(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},m.prototype.redIMul=function(e){return y(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},m.prototype.redSqr=function(){return y(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},m.prototype.redISqr=function(){return y(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},m.prototype.redSqrt=function(){return y(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},m.prototype.redInvm=function(){return y(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},m.prototype.redNeg=function(){return y(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},m.prototype.redPow=function(e){return y(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var l={k256:null,p224:null,p192:null,p25519:null};function h(e,t){this.name=e,this.p=new m(t,16),this.n=this.p.bitLength(),this.k=new m(1).iushln(this.n).isub(this.p),this.tmp=this._tmp();}function v(){h.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");}function g(){h.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");}function b(){h.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");}function w(){h.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");}function _(e){if("string"==typeof e){var t=m._prime(e);this.m=t.p,this.prime=t;}else { y(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null; }}function M(e){_.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new m(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv);}h.prototype._tmp=function(){var e=new m(null);return e.words=new Array(Math.ceil(this.n/13)),e},h.prototype.ireduce=function(e){for(var t,r=e;this.split(r,this.tmp),(t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength())>this.n;){ }var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):0<n?r.isub(this.p):r.strip(),r},h.prototype.split=function(e,t){e.iushrn(this.n,0,t);},h.prototype.imulK=function(e){return e.imul(this.k)},r(v,h),v.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++){ t.words[n]=e.words[n]; }if(t.length=r,e.length<=9){ return e.words[0]=0,void(e.length=1); }var i=e.words[9];for(t.words[t.length++]=4194303&i,n=10;n<e.length;n++){var o=0|e.words[n];e.words[n-10]=(4194303&o)<<4|i>>>22,i=o;}i>>>=22,0===(e.words[n-10]=i)&&10<e.length?e.length-=10:e.length-=9;},v.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0);}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},r(g,h),r(b,h),r(w,h),w.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n;}return 0!==t&&(e.words[e.length++]=t),e},m._prime=function(e){if(l[e]){ return l[e]; }var t;if("k256"===e){ t=new v; }else if("p224"===e){ t=new g; }else if("p192"===e){ t=new b; }else{if("p25519"!==e){ throw new Error("Unknown prime "+e); }t=new w;}return l[e]=t},_.prototype._verify1=function(e){y(0===e.negative,"red works only with positives"),y(e.red,"red works only with red numbers");},_.prototype._verify2=function(e,t){y(0==(e.negative|t.negative),"red works only with positives"),y(e.red&&e.red===t.red,"red works only with red numbers");},_.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},_.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},_.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return 0<=r.cmp(this.m)&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return 0<=r.cmp(this.m)&&r.isub(this.m),r},_.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},_.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},_.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},_.prototype.isqr=function(e){return this.imul(e,e.clone())},_.prototype.sqr=function(e){return this.mul(e,e)},_.prototype.sqrt=function(e){if(e.isZero()){ return e.clone(); }var t=this.m.andln(3);if(y(t%2==1),3===t){var r=this.m.add(new m(1)).iushrn(2);return this.pow(e,r)}for(var n=this.m.subn(1),i=0;!n.isZero()&&0===n.andln(1);){ i++,n.iushrn(1); }y(!n.isZero());var o=new m(1).toRed(this),s=o.redNeg(),a=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new m(2*u*u).toRed(this);0!==this.pow(u,a).cmp(s);){ u.redIAdd(s); }for(var l=this.pow(u,n),h=this.pow(e,n.addn(1).iushrn(1)),f=this.pow(e,n),c=i;0!==f.cmp(o);){for(var d=f,p=0;0!==d.cmp(o);p++){ d=d.redSqr(); }y(p<c);var v=this.pow(l,new m(1).iushln(c-p-1));h=h.redMul(v),l=v.redSqr(),f=f.redMul(l),c=p;}return h},_.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},_.prototype.pow=function(e,t){if(t.isZero()){ return new m(1).toRed(this); }if(0===t.cmpn(1)){ return e.clone(); }var r=new Array(16);r[0]=new m(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++){ r[n]=this.mul(r[n-1],e); }var i=r[0],o=0,s=0,a=t.bitLength()%26;for(0===a&&(a=26),n=t.length-1;0<=n;n--){for(var u=t.words[n],l=a-1;0<=l;l--){var h=u>>l&1;i!==r[0]&&(i=this.sqr(i)),0!=h||0!==o?(o<<=1,o|=h,(4===++s||0===n&&0===l)&&(i=this.mul(i,r[o]),o=s=0)):s=0;}a=26;}return i},_.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},_.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},m.mont=function(e){return new M(e)},r(M,_),M.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},M.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},M.prototype.imul=function(e,t){if(e.isZero()||t.isZero()){ return e.words[0]=0,e.length=1,e; }var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return 0<=i.cmp(this.m)?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},M.prototype.mul=function(e,t){if(e.isZero()||t.isZero()){ return new m(0)._forceRed(this); }var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return 0<=i.cmp(this.m)?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},M.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)};}(void 0===e||e,this);},{buffer:11}],10:[function(e,t,r){(function(r){t.exports=function(e){var t=new Uint8Array(e);return (r.crypto||r.msCrypto).getRandomValues(t),t};}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],11:[function(e,t,r){},{}],12:[function(e,t,r){var n=r;n.version=e("../package.json").version,n.utils=e("./elliptic/utils"),n.rand=e("brorand"),n.hmacDRBG=e("./elliptic/hmac-drbg"),n.curve=e("./elliptic/curve"),n.curves=e("./elliptic/curves"),n.ec=e("./elliptic/ec"),n.eddsa=e("./elliptic/eddsa");},{"../package.json":26,"./elliptic/curve":15,"./elliptic/curves":18,"./elliptic/ec":19,"./elliptic/eddsa":22,"./elliptic/hmac-drbg":23,"./elliptic/utils":25,brorand:10}],13:[function(e,t,r){var n=e("bn.js"),i=e("../../elliptic").utils,S=i.getNAF,k=i.getJSF,f=i.assert;function o(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||0<r.cmpn(100)?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red));}function s(e,t){this.curve=e,this.type=t,this.precomputed=null;}(t.exports=o).prototype.point=function(){throw new Error("Not implemented")},o.prototype.validate=function(){throw new Error("Not implemented")},o.prototype._fixedNafMul=function(e,t){f(e.precomputed);var r=e._getDoubles(),n=S(t,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var o=[],s=0;s<n.length;s+=r.step){var a=0;for(t=s+r.step-1;s<=t;t--){ a=(a<<1)+n[t]; }o.push(a);}for(var u=this.jpoint(null,null,null),l=this.jpoint(null,null,null),h=i;0<h;h--){for(s=0;s<o.length;s++){(a=o[s])===h?l=l.mixedAdd(r.points[s]):a===-h&&(l=l.mixedAdd(r.points[s].neg()));}u=u.add(l);}return u.toP()},o.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=S(t,r),s=this.jpoint(null,null,null),a=o.length-1;0<=a;a--){for(t=0;0<=a&&0===o[a];a--){ t++; }if(0<=a&&t++,s=s.dblp(t),a<0){ break; }var u=o[a];f(0!==u),s="affine"===e.type?0<u?s.mixedAdd(i[u-1>>1]):s.mixedAdd(i[-u-1>>1].neg()):0<u?s.add(i[u-1>>1]):s.add(i[-u-1>>1].neg());}return "affine"===e.type?s.toP():s},o.prototype._wnafMulAdd=function(e,t,r,n,i){for(var o=this._wnafT1,s=this._wnafT2,a=this._wnafT3,u=0,l=0;l<n;l++){var h=(A=t[l])._getNAFPoints(e);o[l]=h.wnd,s[l]=h.points;}for(l=n-1;1<=l;l-=2){var f=l-1,c=l;if(1===o[f]&&1===o[c]){var d=[t[f],null,null,t[c]];0===t[f].y.cmp(t[c].y)?(d[1]=t[f].add(t[c]),d[2]=t[f].toJ().mixedAdd(t[c].neg())):0===t[f].y.cmp(t[c].y.redNeg())?(d[1]=t[f].toJ().mixedAdd(t[c]),d[2]=t[f].add(t[c].neg())):(d[1]=t[f].toJ().mixedAdd(t[c]),d[2]=t[f].toJ().mixedAdd(t[c].neg()));var p=[-3,-1,-5,-7,0,7,5,1,3],v=k(r[f],r[c]);u=Math.max(v[0].length,u),a[f]=new Array(u),a[c]=new Array(u);for(var y=0;y<u;y++){var m=0|v[0][y],g=0|v[1][y];a[f][y]=p[3*(1+m)+(1+g)],a[c][y]=0,s[f]=d;}}else { a[f]=S(r[f],o[f]),a[c]=S(r[c],o[c]),u=Math.max(a[f].length,u),u=Math.max(a[c].length,u); }}var b=this.jpoint(null,null,null),w=this._wnafT4;for(l=u;0<=l;l--){for(var _=0;0<=l;){var M=!0;for(y=0;y<n;y++){ w[y]=0|a[y][l],0!==w[y]&&(M=!1); }if(!M){ break; }_++,l--;}if(0<=l&&_++,b=b.dblp(_),l<0){ break; }for(y=0;y<n;y++){var A,E=w[y];0!==E&&(0<E?A=s[y][E-1>>1]:E<0&&(A=s[y][-E-1>>1].neg()),b="affine"===A.type?b.mixedAdd(A):b.add(A));}}for(l=0;l<n;l++){ s[l]=null; }return i?b:b.toP()},(o.BasePoint=s).prototype.eq=function(){throw new Error("Not implemented")},s.prototype.validate=function(){return this.curve.validate(this)},o.prototype.decodePoint=function(e,t){e=i.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r){ return 6===e[0]?f(e[e.length-1]%2==0):7===e[0]&&f(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r)); }if((2===e[0]||3===e[0])&&e.length-1===r){ return this.pointFromX(e.slice(1,1+r),3===e[0]); }throw new Error("Unknown point format")},s.prototype.encodeCompressed=function(e){return this.encode(e,!0)},s.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},s.prototype.encode=function(e,t){return i.encode(this._encode(t),e)},s.prototype.precompute=function(e){if(this.precomputed){ return this; }var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},s.prototype._hasDoubles=function(e){if(!this.precomputed){ return !1; }var t=this.precomputed.doubles;return !!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},s.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles){ return this.precomputed.doubles; }for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++){ n=n.dbl(); }r.push(n);}return {step:e,points:r}},s.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf){ return this.precomputed.naf; }for(var t=[this],r=(1<<e)-1,n=1==r?null:this.dbl(),i=1;i<r;i++){ t[i]=t[i-1].add(n); }return {wnd:e,points:t}},s.prototype._getBeta=function(){return null},s.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++){ t=t.dbl(); }return t};},{"../../elliptic":12,"bn.js":9}],14:[function(e,t,r){t.exports={};},{}],15:[function(e,t,r){var n=r;n.base=e("./base"),n.short=e("./short"),n.mont=e("./mont"),n.edwards=e("./edwards");},{"./base":13,"./edwards":14,"./mont":16,"./short":17}],16:[function(e,t,r){arguments[4][14][0].apply(r,arguments);},{dup:14}],17:[function(e,t,r){var n=e("../curve"),i=e("../../elliptic"),_=e("bn.js"),o=e("inherits"),s=n.base,a=i.utils.assert;function u(e){s.call(this,"short",e),this.a=new _(e.a,16).toRed(this.red),this.b=new _(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4);}function l(e,t,r,n){s.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new _(t,16),this.y=new _(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1);}function h(e,t,r,n){s.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new _(0)):(this.x=new _(t,16),this.y=new _(r,16),this.z=new _(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one;}o(u,s),(t.exports=u).prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta){ t=new _(e.beta,16).toRed(this.red); }else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red);}if(e.lambda){ r=new _(e.lambda,16); }else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?r=i[0]:(r=i[1],a(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))));}return {beta:t,lambda:r,basis:e.basis?e.basis.map(function(e){return {a:new _(e.a,16),b:new _(e.b,16)}}):this._getEndoBasis(r)}}},u.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:_.mont(e),r=new _(2).toRed(t).redInvm(),n=r.redNeg(),i=new _(3).toRed(t).redNeg().redSqrt().redMul(r);return [n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},u.prototype._getEndoBasis=function(e){for(var t,r,n,i,o,s,a,u,l,h=this.n.ushrn(Math.floor(this.n.bitLength()/2)),f=e,c=this.n.clone(),d=new _(1),p=new _(0),v=new _(0),y=new _(1),m=0;0!==f.cmpn(0);){var g=c.div(f);u=c.sub(g.mul(f)),l=v.sub(g.mul(d));var b=y.sub(g.mul(p));if(!n&&u.cmp(h)<0){ t=a.neg(),r=d,n=u.neg(),i=l; }else if(n&&2==++m){ break; }c=f,f=a=u,v=d,d=l,y=p,p=b;}o=u.neg(),s=l;var w=n.sqr().add(i.sqr());return 0<=o.sqr().add(s.sqr()).cmp(w)&&(o=t,s=r),n.negative&&(n=n.neg(),i=i.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:n,b:i},{a:o,b:s}]},u.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),u=i.mul(r.b),l=o.mul(n.b);return {k1:e.sub(s).sub(a),k2:u.add(l).neg()}},u.prototype.pointFromX=function(e,t){(e=new _(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero)){ throw new Error("invalid point"); }var i=n.fromRed().isOdd();return (t&&!i||!t&&i)&&(n=n.redNeg()),this.point(e,n)},u.prototype.validate=function(e){if(e.inf){ return !0; }var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},u.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var s=this._endoSplit(t[o]),a=e[o],u=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),u=u.neg(!0)),n[2*o]=a,n[2*o+1]=u,i[2*o]=s.k1,i[2*o+1]=s.k2;}for(var l=this._wnafMulAdd(1,n,i,2*o,r),h=0;h<2*o;h++){ n[h]=null,i[h]=null; }return l},o(l,s.BasePoint),u.prototype.point=function(e,t,r){return new l(this,e,t,r)},u.prototype.pointFromJSON=function(e,t){return l.fromJSON(this,e,t)},l.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta){ return e.beta; }var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};(e.beta=t).precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}};}return t}},l.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},l.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var n=t.point(e[0],e[1],r);if(!e[2]){ return n; }function i(e){return t.point(e[0],e[1],r)}var o=e[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},l.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},l.prototype.isInfinity=function(){return this.inf},l.prototype.add=function(e){if(this.inf){ return e; }if(e.inf){ return this; }if(this.eq(e)){ return this.dbl(); }if(this.neg().eq(e)){ return this.curve.point(null,null); }if(0===this.x.cmp(e.x)){ return this.curve.point(null,null); }var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},l.prototype.dbl=function(){if(this.inf){ return this; }var e=this.y.redAdd(this.y);if(0===e.cmpn(0)){ return this.curve.point(null,null); }var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},l.prototype.getX=function(){return this.x.fromRed()},l.prototype.getY=function(){return this.y.fromRed()},l.prototype.mul=function(e){return e=new _(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},l.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},l.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},l.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},l.prototype.neg=function(e){if(this.inf){ return this; }var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}};}return t},l.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(h,s.BasePoint),u.prototype.jpoint=function(e,t,r){return new h(this,e,t,r)},h.prototype.toP=function(){if(this.isInfinity()){ return this.curve.point(null,null); }var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},h.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},h.prototype.add=function(e){if(this.isInfinity()){ return e; }if(e.isInfinity()){ return this; }var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),a=n.redSub(i),u=o.redSub(s);if(0===a.cmpn(0)){ return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl(); }var l=a.redSqr(),h=l.redMul(a),f=n.redMul(l),c=u.redSqr().redIAdd(h).redISub(f).redISub(f),d=u.redMul(f.redISub(c)).redISub(o.redMul(h)),p=this.z.redMul(e.z).redMul(a);return this.curve.jpoint(c,d,p)},h.prototype.mixedAdd=function(e){if(this.isInfinity()){ return e.toJ(); }if(e.isInfinity()){ return this; }var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0)){ return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl(); }var u=s.redSqr(),l=u.redMul(s),h=r.redMul(u),f=a.redSqr().redIAdd(l).redISub(h).redISub(h),c=a.redMul(h.redISub(f)).redISub(i.redMul(l)),d=this.z.redMul(s);return this.curve.jpoint(f,c,d)},h.prototype.dblp=function(e){if(0===e){ return this; }if(this.isInfinity()){ return this; }if(!e){ return this.dbl(); }if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++){ t=t.dbl(); }return t}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,u=a.redSqr().redSqr(),l=s.redAdd(s);for(r=0;r<e;r++){var h=o.redSqr(),f=l.redSqr(),c=f.redSqr(),d=h.redAdd(h).redIAdd(h).redIAdd(n.redMul(u)),p=o.redMul(f),v=d.redSqr().redISub(p.redAdd(p)),y=p.redISub(v),m=d.redMul(y);m=m.redIAdd(m).redISub(c);var g=l.redMul(a);r+1<e&&(u=u.redMul(c)),o=v,a=g,l=m;}return this.curve.jpoint(o,l.redMul(i),a)},h.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},h.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),u=a.redSqr().redISub(s).redISub(s),l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),e=u,t=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y);}else{var h=this.x.redSqr(),f=this.y.redSqr(),c=f.redSqr(),d=this.x.redAdd(f).redSqr().redISub(h).redISub(c);d=d.redIAdd(d);var p=h.redAdd(h).redIAdd(h),v=p.redSqr(),y=c.redIAdd(c);y=(y=y.redIAdd(y)).redIAdd(y),e=v.redISub(d).redISub(d),t=p.redMul(d.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r);}return this.curve.jpoint(e,t,r)},h.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),u=a.redSqr().redISub(s).redISub(s);e=u;var l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),t=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y);}else{var h=this.z.redSqr(),f=this.y.redSqr(),c=this.x.redMul(f),d=this.x.redSub(h).redMul(this.x.redAdd(h));d=d.redAdd(d).redIAdd(d);var p=c.redIAdd(c),v=(p=p.redIAdd(p)).redAdd(p);e=d.redSqr().redISub(v),r=this.y.redAdd(this.z).redSqr().redISub(f).redISub(h);var y=f.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=d.redMul(p.redISub(e)).redISub(y);}return this.curve.jpoint(e,t,r)},h.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),u=t.redAdd(t),l=(u=u.redIAdd(u)).redMul(s),h=a.redSqr().redISub(l.redAdd(l)),f=l.redISub(h),c=s.redSqr();c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var d=a.redMul(f).redISub(c),p=r.redAdd(r).redMul(n);return this.curve.jpoint(h,d,p)},h.prototype.trpl=function(){if(!this.curve.zeroA){ return this.dbl().add(this); }var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u=n.redIAdd(n);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u),h=t.redMul(l);h=(h=h.redIAdd(h)).redIAdd(h);var f=this.x.redMul(a).redISub(h);f=(f=f.redIAdd(f)).redIAdd(f);var c=this.y.redMul(l.redMul(u.redISub(l)).redISub(s.redMul(a)));c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var d=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(f,c,d)},h.prototype.mul=function(e,t){return e=new _(e,t),this.curve._wnafMul(this,e)},h.prototype.eq=function(e){if("affine"===e.type){ return this.eq(e.toJ()); }if(this===e){ return !0; }var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)){ return !1; }var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},h.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r)){ return !0; }for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),0<=n.cmp(this.curve.p)){ return !1; }if(r.redIAdd(i),0===this.x.cmp(r)){ return !0 }}return !1},h.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},h.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};},{"../../elliptic":12,"../curve":15,"bn.js":9,inherits:39}],18:[function(e,t,r){var n,i=r,o=e("hash.js"),s=e("../elliptic"),a=s.utils.assert;function u(e){"short"===e.type?this.curve=new s.curve.short(e):"edwards"===e.type?this.curve=new s.curve.edwards(e):this.curve=new s.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,a(this.g.validate(),"Invalid curve"),a(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O");}function l(t,r){Object.defineProperty(i,t,{configurable:!0,enumerable:!0,get:function(){var e=new u(r);return Object.defineProperty(i,t,{configurable:!0,enumerable:!0,value:e}),e}});}i.PresetCurve=u,l("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),l("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),l("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),l("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),l("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),l("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),l("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=e("./precomputed/secp256k1");}catch(e){n=void 0;}l("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]});},{"../elliptic":12,"./precomputed/secp256k1":24,"hash.js":27}],19:[function(e,t,r){var y=e("bn.js"),m=e("../../elliptic"),d=m.utils.assert,n=e("./key"),g=e("./signature");function i(e){if(!(this instanceof i)){ return new i(e); }"string"==typeof e&&(d(m.curves.hasOwnProperty(e),"Unknown curve "+e),e=m.curves[e]),e instanceof m.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash;}(t.exports=i).prototype.keyPair=function(e){return new n(this,e)},i.prototype.keyFromPrivate=function(e,t){return n.fromPrivate(this,e,t)},i.prototype.keyFromPublic=function(e,t){return n.fromPublic(this,e,t)},i.prototype.genKeyPair=function(e){e=e||{};for(var t=new m.hmacDRBG({hash:this.hash,pers:e.pers,entropy:e.entropy||m.rand(this.hash.hmacStrength),nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new y(2));;){var i=new y(t.generate(r));if(!(0<i.cmp(n))){ return i.iaddn(1),this.keyFromPrivate(i) }}},i.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return 0<r&&(e=e.ushrn(r)),!t&&0<=e.cmp(this.n)?e.sub(this.n):e},i.prototype.sign=function(e,t,r,n){"object"==typeof r&&(n=r,r=null),n=n||{},t=this.keyFromPrivate(t,r),e=this._truncateToN(new y(e,16));for(var i=this.n.byteLength(),o=t.getPrivate().toArray("be",i),s=e.toArray("be",i),a=new m.hmacDRBG({hash:this.hash,entropy:o,nonce:s,pers:n.pers,persEnc:n.persEnc}),u=this.n.sub(new y(1)),l=0;;l++){var h=n.k?n.k(l):new y(a.generate(this.n.byteLength()));if(!((h=this._truncateToN(h,!0)).cmpn(1)<=0||0<=h.cmp(u))){var f=this.g.mul(h);if(!f.isInfinity()){var c=f.getX(),d=c.umod(this.n);if(0!==d.cmpn(0)){var p=h.invm(this.n).mul(d.mul(t.getPrivate()).iadd(e));if(0!==(p=p.umod(this.n)).cmpn(0)){var v=(f.getY().isOdd()?1:0)|(0!==c.cmp(d)?2:0);return n.canonical&&0<p.cmp(this.nh)&&(p=this.n.sub(p),v^=1),new g({r:d,s:p,recoveryParam:v})}}}}}},i.prototype.verify=function(e,t,r,n){e=this._truncateToN(new y(e,16)),r=this.keyFromPublic(r,n);var i=(t=new g(t,"hex")).r,o=t.s;if(i.cmpn(1)<0||0<=i.cmp(this.n)){ return !1; }if(o.cmpn(1)<0||0<=o.cmp(this.n)){ return !1; }var s,a=o.invm(this.n),u=a.mul(e).umod(this.n),l=a.mul(i).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(u,r.getPublic(),l)).isInfinity()&&s.eqXToP(i):!(s=this.g.mulAdd(u,r.getPublic(),l)).isInfinity()&&0===s.getX().umod(this.n).cmp(i)},i.prototype.recoverPubKey=function(e,t,r,n){d((3&r)===r,"The recovery param is more than two bits"),t=new g(t,n);var i=this.n,o=new y(e),s=t.r,a=t.s,u=1&r,l=r>>1;if(0<=s.cmp(this.curve.p.umod(this.curve.n))&&l){ throw new Error("Unable to find sencond key candinate"); }s=l?this.curve.pointFromX(s.add(this.curve.n),u):this.curve.pointFromX(s,u);var h=t.r.invm(i),f=i.sub(o).mul(h).umod(i),c=a.mul(h).umod(i);return this.g.mulAdd(f,s,c)},i.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new g(t,n)).recoveryParam){ return t.recoveryParam; }for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i);}catch(e){continue}if(o.eq(r)){ return i }}throw new Error("Unable to find valid recovery factor")};},{"../../elliptic":12,"./key":20,"./signature":21,"bn.js":9}],20:[function(e,t,r){var n=e("bn.js"),i=e("../../elliptic").utils.assert;function o(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc);}(t.exports=o).fromPublic=function(e,t,r){return t instanceof o?t:new o(e,{pub:t,pubEnc:r})},o.fromPrivate=function(e,t,r){return t instanceof o?t:new o(e,{priv:t,privEnc:r})},o.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(e,t){return "string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},o.prototype.getPrivate=function(e){return "hex"===e?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n);},o.prototype._importPublic=function(e,t){if(e.x||e.y){ return "mont"===this.ec.curve.type?i(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y)); }this.pub=this.ec.curve.decodePoint(e,t);},o.prototype.derive=function(e){return e.mul(this.priv).getX()},o.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},o.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},o.prototype.inspect=function(){return "<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};},{"../../elliptic":12,"bn.js":9}],21:[function(e,t,r){var a=e("bn.js"),u=e("../../elliptic").utils,n=u.assert;function i(e,t){if(e instanceof i){ return e; }this._importDER(e,t)||(n(e.r&&e.s,"Signature without r or s"),this.r=new a(e.r,16),this.s=new a(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam);}function l(){this.place=0;}function h(e,t){var r=e[t.place++];if(!(128&r)){ return r; }for(var n=15&r,i=0,o=0,s=t.place;o<n;o++,s++){ i<<=8,i|=e[s]; }return t.place=s,i}function s(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;){ t++; }return 0===t?e:e.slice(t)}function f(e,t){if(t<128){ e.push(t); }else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;){ e.push(t>>>(r<<3)&255); }e.push(t);}}(t.exports=i).prototype._importDER=function(e,t){e=u.toArray(e,t);var r=new l;if(48!==e[r.place++]){ return !1; }if(h(e,r)+r.place!==e.length){ return !1; }if(2!==e[r.place++]){ return !1; }var n=h(e,r),i=e.slice(r.place,n+r.place);if(r.place+=n,2!==e[r.place++]){ return !1; }var o=h(e,r);if(e.length!==o+r.place){ return !1; }var s=e.slice(r.place,o+r.place);return 0===i[0]&&128&i[1]&&(i=i.slice(1)),0===s[0]&&128&s[1]&&(s=s.slice(1)),this.r=new a(i),this.s=new a(s),!(this.recoveryParam=null)},i.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=s(t),r=s(r);!(r[0]||128&r[1]);){ r=r.slice(1); }var n=[2];f(n,t.length),(n=n.concat(t)).push(2),f(n,r.length);var i=n.concat(r),o=[48];return f(o,i.length),o=o.concat(i),u.encode(o,e)};},{"../../elliptic":12,"bn.js":9}],22:[function(e,t,r){arguments[4][14][0].apply(r,arguments);},{dup:14}],23:[function(e,t,r){var n=e("hash.js"),s=e("../elliptic").utils,i=s.assert;function o(e){if(!(this instanceof o)){ return new o(e); }this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this.reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=s.toArray(e.entropy,e.entropyEnc),r=s.toArray(e.nonce,e.nonceEnc),n=s.toArray(e.pers,e.persEnc);i(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n);}(t.exports=o).prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++){ this.K[i]=0,this.V[i]=1; }this._update(n),this.reseed=1,this.reseedInterval=281474976710656;},o.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},o.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest());},o.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=s.toBuffer(e,t),r=s.toBuffer(r,n),i(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this.reseed=1;},o.prototype.generate=function(e,t,r,n){if(this.reseed>this.reseedInterval){ throw new Error("Reseed is required"); }"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=s.toArray(r,n),this._update(r));for(var i=[];i.length<e;){ this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V); }var o=i.slice(0,e);return this._update(r),this.reseed++,s.encode(o,t)};},{"../elliptic":12,"hash.js":27}],24:[function(e,t,r){t.exports=void 0;},{}],25:[function(e,t,r){var n=r,i=e("bn.js");function o(e){return 1===e.length?"0"+e:e}function s(e){for(var t="",r=0;r<e.length;r++){ t+=o(e[r].toString(16)); }return t}n.assert=function(e,t){if(!e){ throw new Error(t||"Assertion failed") }},n.toArray=function(e,t){if(Array.isArray(e)){ return e.slice(); }if(!e){ return []; }var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++){ r[n]=0|e[n]; }return r}if(t){if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2){ r.push(parseInt(e[n]+e[n+1],16)); }}}else { for(var n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s);} }return r},n.zero2=o,n.toHex=s,n.encode=function(e,t){return "hex"===t?s(e):e},n.getNAF=function(e,t){for(var r=[],n=1<<t+1,i=e.clone();0<=i.cmpn(1);){var o;if(i.isOdd()){var s=i.andln(n-1);o=(n>>1)-1<s?(n>>1)-s:s,i.isubn(o);}else { o=0; }r.push(o);for(var a=0!==i.cmpn(0)&&0===i.andln(n-1)?t+1:1,u=1;u<a;u++){ r.push(0); }i.iushrn(a);}return r},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n=0,i=0;0<e.cmpn(-n)||0<t.cmpn(-i);){var o,s,a,u=e.andln(3)+n&3,l=t.andln(3)+i&3;if(3===u&&(u=-1),3===l&&(l=-1),0==(1&u)){ o=0; }else { o=3!==(a=e.andln(7)+n&7)&&5!==a||2!==l?u:-u; }if(r[0].push(o),0==(1&l)){ s=0; }else { s=3!==(a=t.andln(7)+i&7)&&5!==a||2!==u?l:-l; }r[1].push(s),2*n===o+1&&(n=1-n),2*i===s+1&&(i=1-i),e.iushrn(1),t.iushrn(1);}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)};},n.parseBytes=function(e){return "string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new i(e,"hex","le")};},{"bn.js":9}],26:[function(e,t,r){t.exports={version:"6.3.3"};},{}],27:[function(e,t,r){var n=r;n.utils=e("./hash/utils"),n.common=e("./hash/common"),n.sha=e("./hash/sha"),n.ripemd=e("./hash/ripemd"),n.hmac=e("./hash/hmac"),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160;},{"./hash/common":28,"./hash/hmac":29,"./hash/ripemd":30,"./hash/sha":31,"./hash/utils":38}],28:[function(e,t,r){var i=e("./utils"),n=e("minimalistic-assert");function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32;}(r.BlockHash=o).prototype.update=function(e,t){if(e=i.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=i.join32(e,0,e.length-r,this.endian);for(var n=0;n<e.length;n+=this._delta32){ this._update(e,n,n+this._delta32); }}return this},o.prototype.digest=function(e){return this.update(this._pad()),n(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++){ n[i]=0; }if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++){ n[i++]=0; }n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e;}else { for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++){ n[i++]=0; } }return n};},{"./utils":38,"minimalistic-assert":41}],29:[function(e,t,r){var n=e("./utils"),i=e("minimalistic-assert");function o(e,t,r){if(!(this instanceof o)){ return new o(e,t,r); }this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r));}(t.exports=o).prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++){ e.push(0); }for(t=0;t<e.length;t++){ e[t]^=54; }for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++){ e[t]^=106; }this.outer=(new this.Hash).update(e);},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)};},{"./utils":38,"minimalistic-assert":41}],30:[function(e,t,r){var n=e("./utils"),i=e("./common"),p=n.rotl32,v=n.sum32,y=n.sum32_3,m=n.sum32_4,o=i.BlockHash;function s(){if(!(this instanceof s)){ return new s; }o.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little";}function g(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function b(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function w(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(s,o),(r.ripemd160=s).blockSize=512,s.outSize=160,s.hmacStrength=192,s.padLength=64,s.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],o=this.h[3],s=this.h[4],a=r,u=n,l=i,h=o,f=s,c=0;c<80;c++){var d=v(p(m(r,g(c,n,i,o),e[_[c]+t],b(c)),A[c]),s);r=s,s=o,o=p(i,10),i=n,n=d,d=v(p(m(a,g(79-c,u,l,h),e[M[c]+t],w(c)),E[c]),f),a=f,f=h,h=p(l,10),l=u,u=d;}d=y(this.h[1],i,h),this.h[1]=y(this.h[2],o,f),this.h[2]=y(this.h[3],s,a),this.h[3]=y(this.h[4],r,u),this.h[4]=y(this.h[0],n,l),this.h[0]=d;},s.prototype._digest=function(e){return "hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var _=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],M=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],A=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],E=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11];},{"./common":28,"./utils":38}],31:[function(e,t,r){r.sha1=e("./sha/1"),r.sha224=e("./sha/224"),r.sha256=e("./sha/256"),r.sha384=e("./sha/384"),r.sha512=e("./sha/512");},{"./sha/1":32,"./sha/224":33,"./sha/256":34,"./sha/384":35,"./sha/512":36}],32:[function(e,t,r){arguments[4][14][0].apply(r,arguments);},{dup:14}],33:[function(e,t,r){arguments[4][14][0].apply(r,arguments);},{dup:14}],34:[function(e,t,r){var n=e("../utils"),i=e("../common"),o=e("./common"),p=e("minimalistic-assert"),v=n.sum32,y=n.sum32_4,m=n.sum32_5,g=o.ch32,b=o.maj32,w=o.s0_256,_=o.s1_256,M=o.g0_256,A=o.g1_256,s=i.BlockHash,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function u(){if(!(this instanceof u)){ return new u; }s.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=a,this.W=new Array(64);}n.inherits(u,s),(t.exports=u).blockSize=512,u.outSize=256,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++){ r[n]=e[t+n]; }for(;n<r.length;n++){ r[n]=y(A(r[n-2]),r[n-7],M(r[n-15]),r[n-16]); }var i=this.h[0],o=this.h[1],s=this.h[2],a=this.h[3],u=this.h[4],l=this.h[5],h=this.h[6],f=this.h[7];for(p(this.k.length===r.length),n=0;n<r.length;n++){var c=m(f,_(u),g(u,l,h),this.k[n],r[n]),d=v(w(i),b(i,o,s));f=h,h=l,l=u,u=v(a,c),a=s,s=o,o=i,i=v(c,d);}this.h[0]=v(this.h[0],i),this.h[1]=v(this.h[1],o),this.h[2]=v(this.h[2],s),this.h[3]=v(this.h[3],a),this.h[4]=v(this.h[4],u),this.h[5]=v(this.h[5],l),this.h[6]=v(this.h[6],h),this.h[7]=v(this.h[7],f);},u.prototype._digest=function(e){return "hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")};},{"../common":28,"../utils":38,"./common":37,"minimalistic-assert":41}],35:[function(e,t,r){arguments[4][14][0].apply(r,arguments);},{dup:14}],36:[function(e,t,r){var n=e("../utils"),i=e("../common"),C=e("minimalistic-assert"),o=n.rotr64_hi,s=n.rotr64_lo,a=n.shr64_hi,u=n.shr64_lo,B=n.sum64,D=n.sum64_hi,L=n.sum64_lo,c=n.sum64_4_hi,d=n.sum64_4_lo,U=n.sum64_5_hi,F=n.sum64_5_lo,l=i.BlockHash,h=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function f(){if(!(this instanceof f)){ return new f; }l.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=h,this.W=new Array(160);}function j(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function G(e,t,r,n,i,o){var s=t&n^~t&o;return s<0&&(s+=4294967296),s}function H(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function z(e,t,r,n,i,o){var s=t&n^t&o^n&o;return s<0&&(s+=4294967296),s}function V(e,t){var r=o(e,t,28)^o(t,e,2)^o(t,e,7);return r<0&&(r+=4294967296),r}function K(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function q(e,t){var r=o(e,t,14)^o(e,t,18)^o(t,e,9);return r<0&&(r+=4294967296),r}function W(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function p(e,t){var r=o(e,t,1)^o(e,t,8)^a(e,t,7);return r<0&&(r+=4294967296),r}function v(e,t){var r=s(e,t,1)^s(e,t,8)^u(e,t,7);return r<0&&(r+=4294967296),r}function y(e,t){var r=o(e,t,19)^o(t,e,29)^a(e,t,6);return r<0&&(r+=4294967296),r}function m(e,t){var r=s(e,t,19)^s(t,e,29)^u(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(f,l),(t.exports=f).blockSize=1024,f.outSize=512,f.hmacStrength=192,f.padLength=128,f.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++){ r[n]=e[t+n]; }for(;n<r.length;n+=2){var i=y(r[n-4],r[n-3]),o=m(r[n-4],r[n-3]),s=r[n-14],a=r[n-13],u=p(r[n-30],r[n-29]),l=v(r[n-30],r[n-29]),h=r[n-32],f=r[n-31];r[n]=c(i,o,s,a,u,l,h,f),r[n+1]=d(i,o,s,a,u,l,h,f);}},f.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],i=this.h[1],o=this.h[2],s=this.h[3],a=this.h[4],u=this.h[5],l=this.h[6],h=this.h[7],f=this.h[8],c=this.h[9],d=this.h[10],p=this.h[11],v=this.h[12],y=this.h[13],m=this.h[14],g=this.h[15];C(this.k.length===r.length);for(var b=0;b<r.length;b+=2){var w=m,_=g,M=q(f,c),A=W(f,c),E=j(f,c,d,p,v),S=G(f,c,d,p,v,y),k=this.k[b],N=this.k[b+1],P=r[b],x=r[b+1],I=U(w,_,M,A,E,S,k,N,P,x),T=F(w,_,M,A,E,S,k,N,P,x);w=V(n,i),_=K(n,i),M=H(n,i,o,s,a),A=z(n,i,o,s,a,u);var R=D(w,_,M,A),O=L(w,_,M,A);m=v,g=y,v=d,y=p,d=f,p=c,f=D(l,h,I,T),c=L(h,h,I,T),l=a,h=u,a=o,u=s,o=n,s=i,n=D(I,T,R,O),i=L(I,T,R,O);}B(this.h,0,n,i),B(this.h,2,o,s),B(this.h,4,a,u),B(this.h,6,l,h),B(this.h,8,f,c),B(this.h,10,d,p),B(this.h,12,v,y),B(this.h,14,m,g);},f.prototype._digest=function(e){return "hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")};},{"../common":28,"../utils":38,"minimalistic-assert":41}],37:[function(e,t,r){var n=e("../utils").rotr32;function i(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function s(e,t,r){return e^t^r}r.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?s(t,r,n):2===e?o(t,r,n):void 0},r.ch32=i,r.maj32=o,r.p32=s,r.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},r.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},r.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},r.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10};},{"../utils":38}],38:[function(e,t,r){var l=e("minimalistic-assert"),n=e("inherits");function o(e){return (e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function i(e){return 1===e.length?"0"+e:e}function s(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}r.inherits=n,r.toArray=function(e,t){if(Array.isArray(e)){ return e.slice(); }if(!e){ return []; }var r=[];if("string"==typeof e){ if(t){if("hex"===t){ for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2){ r.push(parseInt(e[n]+e[n+1],16)); } }}else { for(var n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s);} } }else { for(n=0;n<e.length;n++){ r[n]=0|e[n]; } }return r},r.toHex=function(e){for(var t="",r=0;r<e.length;r++){ t+=i(e[r].toString(16)); }return t},r.htonl=o,r.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=o(i)),r+=s(i.toString(16));}return r},r.zero2=i,r.zero8=s,r.join32=function(e,t,r,n){var i=r-t;l(i%4==0);for(var o=new Array(i/4),s=0,a=t;s<o.length;s++,a+=4){var u;u="big"===n?e[a]<<24|e[a+1]<<16|e[a+2]<<8|e[a+3]:e[a+3]<<24|e[a+2]<<16|e[a+1]<<8|e[a],o[s]=u>>>0;}return o},r.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o);}return r},r.rotr32=function(e,t){return e>>>t|e<<32-t},r.rotl32=function(e,t){return e<<t|e>>>32-t},r.sum32=function(e,t){return e+t>>>0},r.sum32_3=function(e,t,r){return e+t+r>>>0},r.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},r.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},r.sum64=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,s=(o<n?1:0)+r+i;e[t]=s>>>0,e[t+1]=o;},r.sum64_hi=function(e,t,r,n){return (t+n>>>0<t?1:0)+e+r>>>0},r.sum64_lo=function(e,t,r,n){return t+n>>>0},r.sum64_4_hi=function(e,t,r,n,i,o,s,a){var u=0,l=t;return u+=(l=l+n>>>0)<t?1:0,u+=(l=l+o>>>0)<o?1:0,e+r+i+s+(u+=(l=l+a>>>0)<a?1:0)>>>0},r.sum64_4_lo=function(e,t,r,n,i,o,s,a){return t+n+o+a>>>0},r.sum64_5_hi=function(e,t,r,n,i,o,s,a,u,l){var h=0,f=t;return h+=(f=f+n>>>0)<t?1:0,h+=(f=f+o>>>0)<o?1:0,h+=(f=f+a>>>0)<a?1:0,e+r+i+s+u+(h+=(f=f+l>>>0)<l?1:0)>>>0},r.sum64_5_lo=function(e,t,r,n,i,o,s,a,u,l){return t+n+o+a+l>>>0},r.rotr64_hi=function(e,t,r){return (t<<32-r|e>>>r)>>>0},r.rotr64_lo=function(e,t,r){return (e<<32-r|t>>>r)>>>0},r.shr64_hi=function(e,t,r){return e>>>r},r.shr64_lo=function(e,t,r){return (e<<32-r|t>>>r)>>>0};},{inherits:39,"minimalistic-assert":41}],39:[function(e,t,r){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}));}:t.exports=function(e,t){if(t){e.super_=t;function r(){}r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e;}};},{}],40:[function(e,_,t){(function(b,w){!function(){var e="object"==typeof window?window:{};!e.JS_SHA3_NO_NODE_JS&&"object"==typeof b&&b.versions&&b.versions.node&&(e=w);for(var t=!e.JS_SHA3_NO_COMMON_JS&&"object"==typeof _&&_.exports,u="0123456789abcdef".split(""),h=[0,8,16,24],he=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],r=[224,256,384,512],o=["hex","buffer","arrayBuffer","array"],s=function(t,r,n){return function(e){return new m(t,r,t).update(e)[n]()}},a=function(r,n,i){return function(e,t){return new m(r,n,t).update(e)[i]()}},n=function(e,t){var r=s(e,t,"hex");r.create=function(){return new m(e,t,e)},r.update=function(e){return r.create().update(e)};for(var n=0;n<o.length;++n){var i=o[n];r[i]=s(e,t,i);}return r},i=[{name:"keccak",padding:[1,256,65536,16777216],bits:r,createMethod:n},{name:"sha3",padding:[6,1536,393216,100663296],bits:r,createMethod:n},{name:"shake",padding:[31,7936,2031616,520093696],bits:[128,256],createMethod:function(t,r){var n=a(t,r,"hex");n.create=function(e){return new m(t,r,e)},n.update=function(e,t){return n.create(t).update(e)};for(var e=0;e<o.length;++e){var i=o[e];n[i]=a(t,r,i);}return n}}],l={},f=[],c=0;c<i.length;++c){ for(var d=i[c],p=d.bits,v=0;v<p.length;++v){var y=d.name+"_"+p[v];f.push(y),l[y]=d.createMethod(p[v],d.padding);} }function m(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n){ this.s[n]=0; }}m.prototype.update=function(e){var t="string"!=typeof e;t&&e.constructor===ArrayBuffer&&(e=new Uint8Array(e));for(var r,n,i=e.length,o=this.blocks,s=this.byteCount,a=this.blockCount,u=0,l=this.s;u<i;){if(this.reset){ for(this.reset=!1,o[0]=this.block,r=1;r<a+1;++r){ o[r]=0; } }if(t){ for(r=this.start;u<i&&r<s;++u){ o[r>>2]|=e[u]<<h[3&r++]; } }else { for(r=this.start;u<i&&r<s;++u){ (n=e.charCodeAt(u))<128?o[r>>2]|=n<<h[3&r++]:(n<2048?o[r>>2]|=(192|n>>6)<<h[3&r++]:(n<55296||57344<=n?o[r>>2]|=(224|n>>12)<<h[3&r++]:(n=65536+((1023&n)<<10|1023&e.charCodeAt(++u)),o[r>>2]|=(240|n>>18)<<h[3&r++],o[r>>2]|=(128|n>>12&63)<<h[3&r++]),o[r>>2]|=(128|n>>6&63)<<h[3&r++]),o[r>>2]|=(128|63&n)<<h[3&r++]); } }if(s<=(this.lastByteIndex=r)){for(this.start=r-s,this.block=o[a],r=0;r<a;++r){ l[r]^=o[r]; }g(l),this.reset=!0;}else { this.start=r; }}return this},m.prototype.finalize=function(){var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount){ for(e[0]=e[r],t=1;t<r+1;++t){ e[t]=0; } }for(e[r-1]|=2147483648,t=0;t<r;++t){ n[t]^=e[t]; }g(n);},m.prototype.toString=m.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<t&&s<n;++o,++s){ e=r[o],a+=u[e>>4&15]+u[15&e]+u[e>>12&15]+u[e>>8&15]+u[e>>20&15]+u[e>>16&15]+u[e>>28&15]+u[e>>24&15]; }s%t==0&&(g(r),o=0);}return i&&(e=r[o],0<i&&(a+=u[e>>4&15]+u[15&e]),1<i&&(a+=u[e>>12&15]+u[e>>8&15]),2<i&&(a+=u[e>>20&15]+u[e>>16&15])),a},m.prototype.buffer=m.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var u=new Uint32Array(e);s<n;){for(o=0;o<t&&s<n;++o,++s){ u[s]=r[o]; }s%t==0&&g(r);}return i&&(u[o]=r[o],e=e.slice(0,a)),e},m.prototype.digest=m.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,u=[];a<i;){for(s=0;s<r&&a<i;++s,++a){ e=a<<2,t=n[s],u[e]=255&t,u[e+1]=t>>8&255,u[e+2]=t>>16&255,u[e+3]=t>>24&255; }a%r==0&&g(n);}return o&&(e=a<<2,t=n[s],0<o&&(u[e]=255&t),1<o&&(u[e+1]=t>>8&255),2<o&&(u[e+2]=t>>16&255)),u};var g=function(e){var t,r,n,i,o,s,a,u,l,h,f,c,d,p,v,y,m,g,b,w,_,M,A,E,S,k,N,P,x,I,T,R,O,C,B,D,L,U,F,j,G,H,z,V,K,q,W,Z,J,X,$,Q,Y,ee,te,re,ne,ie,oe,se,ae,ue,le;for(n=0;n<48;n+=2){ i=e[0]^e[10]^e[20]^e[30]^e[40],o=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],a=e[3]^e[13]^e[23]^e[33]^e[43],u=e[4]^e[14]^e[24]^e[34]^e[44],l=e[5]^e[15]^e[25]^e[35]^e[45],h=e[6]^e[16]^e[26]^e[36]^e[46],f=e[7]^e[17]^e[27]^e[37]^e[47],t=(c=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|a>>>31),r=(d=e[9]^e[19]^e[29]^e[39]^e[49])^(a<<1|s>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(u<<1|l>>>31),r=o^(l<<1|u>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=s^(h<<1|f>>>31),r=a^(f<<1|h>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=u^(c<<1|d>>>31),r=l^(d<<1|c>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=h^(i<<1|o>>>31),r=f^(o<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,p=e[0],v=e[1],q=e[11]<<4|e[10]>>>28,W=e[10]<<4|e[11]>>>28,P=e[20]<<3|e[21]>>>29,x=e[21]<<3|e[20]>>>29,se=e[31]<<9|e[30]>>>23,ae=e[30]<<9|e[31]>>>23,H=e[40]<<18|e[41]>>>14,z=e[41]<<18|e[40]>>>14,C=e[2]<<1|e[3]>>>31,B=e[3]<<1|e[2]>>>31,y=e[13]<<12|e[12]>>>20,m=e[12]<<12|e[13]>>>20,Z=e[22]<<10|e[23]>>>22,J=e[23]<<10|e[22]>>>22,I=e[33]<<13|e[32]>>>19,T=e[32]<<13|e[33]>>>19,ue=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,ee=e[5]<<30|e[4]>>>2,te=e[4]<<30|e[5]>>>2,D=e[14]<<6|e[15]>>>26,L=e[15]<<6|e[14]>>>26,g=e[25]<<11|e[24]>>>21,b=e[24]<<11|e[25]>>>21,X=e[34]<<15|e[35]>>>17,$=e[35]<<15|e[34]>>>17,R=e[45]<<29|e[44]>>>3,O=e[44]<<29|e[45]>>>3,E=e[6]<<28|e[7]>>>4,S=e[7]<<28|e[6]>>>4,re=e[17]<<23|e[16]>>>9,ne=e[16]<<23|e[17]>>>9,U=e[26]<<25|e[27]>>>7,F=e[27]<<25|e[26]>>>7,w=e[36]<<21|e[37]>>>11,_=e[37]<<21|e[36]>>>11,Q=e[47]<<24|e[46]>>>8,Y=e[46]<<24|e[47]>>>8,V=e[8]<<27|e[9]>>>5,K=e[9]<<27|e[8]>>>5,k=e[18]<<20|e[19]>>>12,N=e[19]<<20|e[18]>>>12,ie=e[29]<<7|e[28]>>>25,oe=e[28]<<7|e[29]>>>25,j=e[38]<<8|e[39]>>>24,G=e[39]<<8|e[38]>>>24,M=e[48]<<14|e[49]>>>18,A=e[49]<<14|e[48]>>>18,e[0]=p^~y&g,e[1]=v^~m&b,e[10]=E^~k&P,e[11]=S^~N&x,e[20]=C^~D&U,e[21]=B^~L&F,e[30]=V^~q&Z,e[31]=K^~W&J,e[40]=ee^~re&ie,e[41]=te^~ne&oe,e[2]=y^~g&w,e[3]=m^~b&_,e[12]=k^~P&I,e[13]=N^~x&T,e[22]=D^~U&j,e[23]=L^~F&G,e[32]=q^~Z&X,e[33]=W^~J&$,e[42]=re^~ie&se,e[43]=ne^~oe&ae,e[4]=g^~w&M,e[5]=b^~_&A,e[14]=P^~I&R,e[15]=x^~T&O,e[24]=U^~j&H,e[25]=F^~G&z,e[34]=Z^~X&Q,e[35]=J^~$&Y,e[44]=ie^~se&ue,e[45]=oe^~ae&le,e[6]=w^~M&p,e[7]=_^~A&v,e[16]=I^~R&E,e[17]=T^~O&S,e[26]=j^~H&C,e[27]=G^~z&B,e[36]=X^~Q&V,e[37]=$^~Y&K,e[46]=se^~ue&ee,e[47]=ae^~le&te,e[8]=M^~p&y,e[9]=A^~v&m,e[18]=R^~E&k,e[19]=O^~S&N,e[28]=H^~C&D,e[29]=z^~B&L,e[38]=Q^~V&q,e[39]=Y^~K&W,e[48]=ue^~ee&re,e[49]=le^~te&ne,e[0]^=he[n],e[1]^=he[n+1]; }};if(t){ _.exports=l; }else { for(c=0;c<f.length;++c){ e[f[c]]=l[f[c]]; } }}();}).call(this,e("_process"),"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{_process:42}],41:[function(e,t,r){function n(e,t){if(!e){ throw new Error(t||"Assertion failed") }}(t.exports=n).equal=function(e,t,r){if(e!=t){ throw new Error(r||"Assertion failed: "+e+" != "+t) }};},{}],42:[function(e,t,r){t.exports={browser:!0};},{}],43:[function(e,r,o){(function(n){function l(e){var y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],m=1779033703,g=3144134277,b=1013904242,w=2773480762,_=1359893119,M=2600822924,A=528734635,E=1541459225,S=new Array(64);function t(e){for(var t=0,r=e.length;64<=r;){var n,i,o,s,a,u=m,l=g,h=b,f=w,c=_,d=M,p=A,v=E;for(i=0;i<16;i++){ o=t+4*i,S[i]=(255&e[o])<<24|(255&e[o+1])<<16|(255&e[o+2])<<8|255&e[o+3]; }for(i=16;i<64;i++){ s=((n=S[i-2])>>>17|n<<15)^(n>>>19|n<<13)^n>>>10,a=((n=S[i-15])>>>7|n<<25)^(n>>>18|n<<14)^n>>>3,S[i]=(s+S[i-7]|0)+(a+S[i-16]|0)|0; }for(i=0;i<64;i++){ s=(((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))+(c&d^~c&p)|0)+(v+(y[i]+S[i]|0)|0)|0,a=((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+(u&l^u&h^l&h)|0,v=p,p=d,d=c,c=f+s|0,f=h,h=l,l=u,u=s+a|0; }m=m+u|0,g=g+l|0,b=b+h|0,w=w+f|0,_=_+c|0,M=M+d|0,A=A+p|0,E=E+v|0,t+=64,r-=64;}}t(e);var r,n=e.length%64,i=e.length/536870912|0,o=e.length<<3,s=n<56?56:120,a=e.slice(e.length-n,e.length);for(a.push(128),r=1+n;r<s;r++){ a.push(0); }return a.push(i>>>24&255),a.push(i>>>16&255),a.push(i>>>8&255),a.push(i>>>0&255),a.push(o>>>24&255),a.push(o>>>16&255),a.push(o>>>8&255),a.push(o>>>0&255),t(a),[m>>>24&255,m>>>16&255,m>>>8&255,m>>>0&255,g>>>24&255,g>>>16&255,g>>>8&255,g>>>0&255,b>>>24&255,b>>>16&255,b>>>8&255,b>>>0&255,w>>>24&255,w>>>16&255,w>>>8&255,w>>>0&255,_>>>24&255,_>>>16&255,_>>>8&255,_>>>0&255,M>>>24&255,M>>>16&255,M>>>8&255,M>>>0&255,A>>>24&255,A>>>16&255,A>>>8&255,A>>>0&255,E>>>24&255,E>>>16&255,E>>>8&255,E>>>0&255]}function x(e,t,r){var n;e=e.length<=64?e:l(e);var i=64+t.length+4,o=new Array(i),s=new Array(64),a=[];for(n=0;n<64;n++){ o[n]=54; }for(n=0;n<e.length;n++){ o[n]^=e[n]; }for(n=0;n<t.length;n++){ o[64+n]=t[n]; }for(n=i-4;n<i;n++){ o[n]=0; }for(n=0;n<64;n++){ s[n]=92; }for(n=0;n<e.length;n++){ s[n]^=e[n]; }function u(){for(var e=i-1;i-4<=e;e--){if(o[e]++,o[e]<=255){ return; }o[e]=0;}}for(;32<=r;){ u(),a=a.concat(l(s.concat(l(o)))),r-=32; }return 0<r&&(u(),a=a.concat(l(s.concat(l(o))).slice(0,r))),a}function I(e,t,r,n,i){var o;for(R(e,16*(2*r-1),i,0,16),o=0;o<2*r;o++){ T(e,16*o,i,16),s(i,n),R(i,0,e,t+16*o,16); }for(o=0;o<r;o++){ R(e,t+2*o*16,e,16*o,16); }for(o=0;o<r;o++){ R(e,t+16*(2*o+1),e,16*(o+r),16); }}function i(e,t){return e<<t|e>>>32-t}function s(e,t){R(e,0,t,0,16);for(var r=8;0<r;r-=2){ t[4]^=i(t[0]+t[12],7),t[8]^=i(t[4]+t[0],9),t[12]^=i(t[8]+t[4],13),t[0]^=i(t[12]+t[8],18),t[9]^=i(t[5]+t[1],7),t[13]^=i(t[9]+t[5],9),t[1]^=i(t[13]+t[9],13),t[5]^=i(t[1]+t[13],18),t[14]^=i(t[10]+t[6],7),t[2]^=i(t[14]+t[10],9),t[6]^=i(t[2]+t[14],13),t[10]^=i(t[6]+t[2],18),t[3]^=i(t[15]+t[11],7),t[7]^=i(t[3]+t[15],9),t[11]^=i(t[7]+t[3],13),t[15]^=i(t[11]+t[7],18),t[1]^=i(t[0]+t[3],7),t[2]^=i(t[1]+t[0],9),t[3]^=i(t[2]+t[1],13),t[0]^=i(t[3]+t[2],18),t[6]^=i(t[5]+t[4],7),t[7]^=i(t[6]+t[5],9),t[4]^=i(t[7]+t[6],13),t[5]^=i(t[4]+t[7],18),t[11]^=i(t[10]+t[9],7),t[8]^=i(t[11]+t[10],9),t[9]^=i(t[8]+t[11],13),t[10]^=i(t[9]+t[8],18),t[12]^=i(t[15]+t[14],7),t[13]^=i(t[12]+t[15],9),t[14]^=i(t[13]+t[12],13),t[15]^=i(t[14]+t[13],18); }for(r=0;r<16;++r){ e[r]+=t[r]; }}function T(e,t,r,n){for(var i=0;i<n;i++){ r[i]^=e[t+i]; }}function R(e,t,r,n,i){for(;i--;){ r[n++]=e[t++]; }}function O(e){if(!e||"number"!=typeof e.length){ return !1; }for(var t=0;t<e.length;t++){if("number"!=typeof e[t]){ return !1; }var r=parseInt(e[t]);if(r!=e[t]||r<0||256<=r){ return !1 }}return !0}function C(e,t){var r=parseInt(e);if(e!=r){ throw new Error("invalid "+t); }return r}function e(o,e,s,a,u,l,h){if(!h){ throw new Error("missing callback"); }if(s=C(s,"N"),a=C(a,"r"),u=C(u,"p"),l=C(l,"dkLen"),0===s||0!=(s&s-1)){ throw new Error("N must be power of 2"); }if(B/128/a<s){ throw new Error("N too large"); }if(B/128/u<a){ throw new Error("r too large"); }if(!O(o)){ throw new Error("password must be an array or buffer"); }if(o=Array.prototype.slice.call(o),!O(e)){ throw new Error("salt must be an array or buffer"); }e=Array.prototype.slice.call(e);for(var f=x(o,e,128*u*a),c=new Uint32Array(32*u*a),t=0;t<c.length;t++){var r=4*t;c[t]=(255&f[3+r])<<24|(255&f[2+r])<<16|(255&f[1+r])<<8|(255&f[0+r])<<0;}var d,p,v=new Uint32Array(64*a),y=new Uint32Array(32*a*s),m=32*a,g=new Uint32Array(16),b=new Uint32Array(16),w=u*s*2,_=0,M=null,A=!1,E=0,S=0,k=parseInt(1e3/a),N=void 0!==n?n:setTimeout,P=function(){if(A){ return h(new Error("cancelled"),_/w); }switch(E){case 0:R(c,p=32*S*a,v,0,m),E=1,d=0;case 1:k<(t=s-d)&&(t=k);for(var e=0;e<t;e++){ R(v,0,y,(d+e)*m,m),I(v,m,a,g,b); }if(d+=t,_+=t,(r=parseInt(1e3*_/w))!==M){if(A=h(null,_/w)){ break; }M=r;}if(d<s){ break; }d=0,E=2;case 2:var t,r;k<(t=s-d)&&(t=k);for(e=0;e<t;e++){var n=v[16*(2*a-1)]&s-1;T(y,n*m,v,m),I(v,m,a,g,b);}if(d+=t,_+=t,(r=parseInt(1e3*_/w))!==M){if(A=h(null,_/w)){ break; }M=r;}if(d<s){ break; }if(R(v,0,c,p,m),++S<u){E=0;break}f=[];for(e=0;e<c.length;e++){ f.push(c[e]>>0&255),f.push(c[e]>>8&255),f.push(c[e]>>16&255),f.push(c[e]>>24&255); }var i=x(o,f,l);return h(null,1,i)}N(P);};P();}var t,B;t=this,B=2147483647,void 0!==o?r.exports=e:t&&(t.scrypt&&(t._scrypt=t.scrypt),t.scrypt=e);}).call(this,e("timers").setImmediate);},{timers:45}],44:[function(e,t,r){(function(y,e,t){!function(r,n){if(!r.setImmediate){var e,i,t,o,s=1,a={},u=!1,l=r.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(r);h=h&&h.setTimeout?h:r,e="[object process]"==={}.toString.call(r.process)?function(){var e=f(arguments);return y.nextTick(c(d,e)),e}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1;},r.postMessage("","*"),r.onmessage=t,e}}()?(o="setImmediate$"+Math.random()+"$",r.addEventListener?r.addEventListener("message",v,!1):r.attachEvent("onmessage",v),function(){var e=f(arguments);return r.postMessage(o+e,"*"),e}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){d(e.data);},function(){var e=f(arguments);return t.port2.postMessage(e),e}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,function(){var e=f(arguments),t=l.createElement("script");return t.onreadystatechange=function(){d(e),t.onreadystatechange=null,i.removeChild(t),t=null;},i.appendChild(t),e}):function(){var e=f(arguments);return setTimeout(c(d,e),0),e},h.setImmediate=e,h.clearImmediate=p;}function f(e){return a[s]=c.apply(n,e),s++}function c(e){var t=[].slice.call(arguments,1);return function(){"function"==typeof e?e.apply(n,t):new Function(""+e)();}}function d(e){if(u){ setTimeout(c(d,e),0); }else{var t=a[e];if(t){u=!0;try{t();}finally{p(e),u=!1;}}}}function p(e){delete a[e];}function v(e){e.source===r&&"string"==typeof e.data&&0===e.data.indexOf(o)&&d(+e.data.slice(o.length));}}("undefined"==typeof self?void 0===e?this:e:self);}).call(this,e("_process"),"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("timers").clearImmediate);},{_process:42,timers:45}],45:[function(e,t,r){(function(e){t.exports={setImmediate:e.setImmediate};}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],46:[function(e,i,t){(function(e){var t;if(e.crypto&&crypto.getRandomValues){var r=new Uint8Array(16);t=function(){return crypto.getRandomValues(r),r};}if(!t){var n=new Array(16);t=function(){for(var e,t=0;t<16;t++){ 0==(3&t)&&(e=4294967296*Math.random()),n[t]=e>>>((3&t)<<3)&255; }return n};}i.exports=t;}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],47:[function(e,t,r){for(var s=e("./rng"),i=[],o={},n=0;n<256;n++){ i[n]=(n+256).toString(16).substr(1),o[i[n]]=n; }function d(e,t){var r=t||0,n=i;return n[e[r++]]+n[e[r++]]+n[e[r++]]+n[e[r++]]+"-"+n[e[r++]]+n[e[r++]]+"-"+n[e[r++]]+n[e[r++]]+"-"+n[e[r++]]+n[e[r++]]+"-"+n[e[r++]]+n[e[r++]]+n[e[r++]]+n[e[r++]]+n[e[r++]]+n[e[r++]]}var a=s(),p=[1|a[0],a[1],a[2],a[3],a[4],a[5]],v=16383&(a[6]<<8|a[7]),y=0,m=0;function u(e,t,r){var n=t&&r||0;"string"==typeof e&&(t="binary"==e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||s)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){ for(var o=0;o<16;o++){ t[n+o]=i[o]; } }return t||d(i)}var l=u;l.v1=function(e,t,r){var n=t&&r||0,i=t||[],o=void 0!==(e=e||{}).clockseq?e.clockseq:v,s=void 0!==e.msecs?e.msecs:(new Date).getTime(),a=void 0!==e.nsecs?e.nsecs:m+1,u=s-y+(a-m)/1e4;if(u<0&&void 0===e.clockseq&&(o=o+1&16383),(u<0||y<s)&&void 0===e.nsecs&&(a=0),1e4<=a){ throw new Error("uuid.v1(): Can't create more than 10M uuids/sec"); }y=s,v=o;var l=(1e4*(268435455&(s+=122192928e5))+(m=a))%4294967296;i[n++]=l>>>24&255,i[n++]=l>>>16&255,i[n++]=l>>>8&255,i[n++]=255&l;var h=s/4294967296*1e4&268435455;i[n++]=h>>>8&255,i[n++]=255&h,i[n++]=h>>>24&15|16,i[n++]=h>>>16&255,i[n++]=o>>>8|128,i[n++]=255&o;for(var f=e.node||p,c=0;c<6;c++){ i[n+c]=f[c]; }return t||d(i)},l.v4=u,l.parse=function(e,t,r){var n=t&&r||0,i=0;for(t=t||[],e.toLowerCase().replace(/[0-9a-f]{2}/g,function(e){i<16&&(t[n+i++]=o[e]);});i<16;){ t[n+i++]=0; }return t},l.unparse=d,t.exports=l;},{"./rng":46}],48:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});try{t.exports.XMLHttpRequest=XMLHttpRequest;}catch(e){console.log("Warning: XMLHttpRequest is not defined"),t.exports.XMLHttpRequest=null;}},{}],49:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("../utils/properties"),i=(o.isProvider=function(e){return n.isType(e,"Provider")},o);function o(){n.setType(this,"Provider");}r.Provider=i;},{"../utils/properties":73}],50:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=e("../utils/address"),a=e("../utils/bignumber"),u=e("../utils/bytes"),l=e("../constants"),h=e("../utils/hash"),f=e("../utils/networks"),c=e("../utils/properties"),d=e("../utils/rlp"),p=e("../utils/transaction"),v=e("../utils/utf8"),y=e("../utils/web"),m=o(e("../errors")),g=e("./abstract-provider");function b(e,t){var r={};for(var n in e){ try{var i=e[n](t[n]);void 0!==i&&(r[n]=i);}catch(e){throw e.checkKey=n,e.checkValue=t[n],e} }return r}function w(t,r){return function(e){return null==e?r:t(e)}}function _(r){return function(e){if(!Array.isArray(e)){ throw new Error("not an array"); }var t=[];return e.forEach(function(e){t.push(r(e));}),t}}function M(e,t){return "string"==typeof e&&(t||"0x"===e.substring(0,2)||(e="0x"+e),32===u.hexDataLength(e))?e.toLowerCase():(m.throwError("invalid hash",m.INVALID_ARGUMENT,{arg:"hash",value:e}),null)}function A(e){return a.bigNumberify(e).toNumber()}function E(e){if(!u.isHexString(e)){ throw new Error("invalid uint256"); }for(;e.length<66;){ e="0x0"+e.substring(2); }return e}function S(e){if(null==e){ return "latest"; }if("earliest"===e){ return "0x0"; }if("latest"===e||"pending"===e){ return e; }if("number"==typeof e){ return u.hexStripZeros(u.hexlify(e)); }if(u.isHexString(e)){ return u.hexStripZeros(e); }throw new Error("invalid blockTag")}var k={hash:M,blockHash:w(M,null),blockNumber:w(A,null),transactionIndex:w(A,null),confirmations:w(A,null),from:s.getAddress,gasPrice:a.bigNumberify,gasLimit:a.bigNumberify,to:w(s.getAddress,null),value:a.bigNumberify,nonce:A,data:u.hexlify,r:w(E),s:w(E),v:w(A),creates:w(s.getAddress,null),raw:w(u.hexlify)};function N(e){if(null!=e.gas&&null==e.gasLimit&&(e.gasLimit=e.gas),e.to&&a.bigNumberify(e.to).isZero()&&(e.to="0x0000000000000000000000000000000000000000"),null!=e.input&&null==e.data&&(e.data=e.input),null==e.to&&null==e.creates&&(e.creates=s.getContractAddress(e)),!e.raw&&e.v&&e.r&&e.s){var t=[u.stripZeros(u.hexlify(e.nonce)),u.stripZeros(u.hexlify(e.gasPrice)),u.stripZeros(u.hexlify(e.gasLimit)),e.to||"0x",u.stripZeros(u.hexlify(e.value||"0x")),u.hexlify(e.data||"0x"),u.stripZeros(u.hexlify(e.v||"0x")),u.stripZeros(u.hexlify(e.r)),u.stripZeros(u.hexlify(e.s))];e.raw=d.encode(t);}var r=b(k,e),n=e.networkId;return null!=e.chainId&&null==n&&null==r.v&&(n=e.chainId),u.isHexString(n)&&(n=a.bigNumberify(n).toNumber()),"number"!=typeof n&&null!=r.v&&((n=(r.v-35)/2)<0&&(n=0),n=parseInt(n)),"number"!=typeof n&&(n=0),r.networkId=n,r.blockHash&&"x"===r.blockHash.replace(/0/g,"")&&(r.blockHash=null),r}var P={hash:M,parentHash:M,number:A,timestamp:A,nonce:w(u.hexlify),difficulty:function(e){var t=a.bigNumberify(e);try{return t.toNumber()}catch(e){}return null},gasLimit:a.bigNumberify,gasUsed:a.bigNumberify,miner:s.getAddress,extraData:u.hexlify,transactions:w(_(M))},x=c.shallowCopy(P);function I(e,t){return null!=e.author&&null==e.miner&&(e.miner=e.author),b(t?x:P,e)}x.transactions=w(_(N));var T={from:w(s.getAddress),nonce:w(A),gasLimit:w(a.bigNumberify),gasPrice:w(a.bigNumberify),to:w(s.getAddress),value:w(a.bigNumberify),data:w(u.hexlify)};function R(e){return b(T,e)}var O={transactionLogIndex:w(A),transactionIndex:A,blockNumber:A,transactionHash:M,address:s.getAddress,topics:_(M),data:u.hexlify,logIndex:A,blockHash:M};var C={to:w(s.getAddress,null),from:w(s.getAddress,null),contractAddress:w(s.getAddress,null),transactionIndex:A,root:w(M),gasUsed:a.bigNumberify,logsBloom:w(u.hexlify),blockHash:M,transactionHash:M,logs:_(function(e){return b(O,e)}),blockNumber:A,confirmations:w(A,null),cumulativeGasUsed:a.bigNumberify,status:w(A)};function B(e){return Array.isArray(e)?e.forEach(function(e){B(e);}):null!=e&&M(e),e}var D={fromBlock:w(S,void 0),toBlock:w(S,void 0),address:w(s.getAddress,void 0),topics:w(B,void 0)},L={blockHash:w(M,void 0),address:w(s.getAddress,void 0),topics:w(B,void 0)};var U,F,j={blockNumber:w(A),blockHash:w(M),transactionIndex:A,removed:w(function(e){if("boolean"==typeof e){ return e; }if("string"==typeof e){if("true"===e){ return !0; }if("false"===e){ return !1 }}throw new Error("invaid boolean - "+e)}),address:s.getAddress,data:(U=u.hexlify,F="0x",function(e){return e?U(e):F}),topics:_(M),transactionHash:M,logIndex:A};function G(e){return b(j,e)}function H(e){return e.map(function(e){return "string"==typeof e?e:Array.isArray(e)?(e.forEach(function(e){null!==e&&32!==u.hexDataLength(e)&&m.throwError("invalid topic",m.INVALID_ARGUMENT,{argument:"topic",value:e});}),e.join(",")):null===e?"":m.throwError("invalid topic value",m.INVALID_ARGUMENT,{argument:"topic",value:e})}).join("&")}function z(e){if("string"==typeof e){if(20===u.hexDataLength(e)){ return "address:"+s.getAddress(e); }if(e=e.toLowerCase(),32===u.hexDataLength(e)){ return "tx:"+e; }if(-1===e.indexOf(":")){ return e }}else{if(Array.isArray(e)){ return "filter::"+H(e); }if(e&&"object"==typeof e){ return "filter:"+(e.address||"")+":"+H(e.topics||[]) }}throw new Error("invalid event - "+e)}function V(){return (new Date).getTime()}var K,q=(K=g.Provider,i(W,K),W.prototype._doPoll=function(){var u=this;this.getBlockNumber().then(function(s){if(u._setFastBlockNumber(s),s!==u._lastBlockNumber){-2===u._emitted.block&&(u._emitted.block=s-1);for(var e=u._emitted.block+1;e<=s;e++){ u.emit("block",e); }u._emitted.block!==s&&(u._emitted.block=s,Object.keys(u._emitted).forEach(function(e){if("block"!==e){var t=u._emitted[e];"pending"!==t&&12<s-t&&delete u._emitted[e];}})),-2===u._lastBlockNumber&&(u._lastBlockNumber=s-1);var a={},t={};return u._events.forEach(function(e){t[e.tag]=!0;}),Object.keys(t).forEach(function(e){var t=e.split(":");switch(t[0]){case"tx":var r=t[1];u.getTransactionReceipt(r).then(function(e){return e&&null!=e.blockNumber&&(u._emitted["t:"+r]=e.blockNumber,u.emit(r,e)),null}).catch(function(e){u.emit("error",e);});break;case"address":var n=t[1];u._balances[n]&&(a[n]=u._balances[n]),u.getBalance(n,"latest").then(function(e){var t=u._balances[n];if(!t||!e.eq(t)){ return u._balances[n]=e,u.emit(n,e),null }}).catch(function(e){u.emit("error",e);});break;case"filter":var i=function(e){return e.split(/&/g).map(function(e){var t=e.split(",");return 1===t.length?""===t[0]?null:e:t.map(function(e){return ""===e?null:e})})}(t[2]),o={address:t[1],fromBlock:u._lastBlockNumber+1,toBlock:s,topics:i};o.address||delete o.address,u.getLogs(o).then(function(e){if(0!==e.length){ return e.forEach(function(e){u._emitted["b:"+e.blockHash]=e.blockNumber,u._emitted["t:"+e.transactionHash]=e.blockNumber,u.emit(o,e);}),null }}).catch(function(e){u.emit("error",e);});}}),u._lastBlockNumber=s,u._balances=a,null}}).catch(function(e){}),this.doPoll();},W.prototype.resetEventsBlock=function(e){this._lastBlockNumber=e-1,this.polling&&this._doPoll();},Object.defineProperty(W.prototype,"network",{get:function(){return this._network},enumerable:!0,configurable:!0}),W.prototype.getNetwork=function(){return this.ready},Object.defineProperty(W.prototype,"blockNumber",{get:function(){return this._fastBlockNumber},enumerable:!0,configurable:!0}),Object.defineProperty(W.prototype,"polling",{get:function(){return null!=this._poller},set:function(e){var t=this;setTimeout(function(){e&&!t._poller?t._poller=setInterval(t._doPoll.bind(t),t.pollingInterval):!e&&t._poller&&(clearInterval(t._poller),t._poller=null);},0);},enumerable:!0,configurable:!0}),Object.defineProperty(W.prototype,"pollingInterval",{get:function(){return this._pollingInterval},set:function(e){var t=this;if("number"!=typeof e||e<=0||parseInt(String(e))!=e){ throw new Error("invalid polling interval"); }this._pollingInterval=e,this._poller&&(clearInterval(this._poller),this._poller=setInterval(function(){t._doPoll();},this._pollingInterval));},enumerable:!0,configurable:!0}),W.prototype._getFastBlockNumber=function(){var t=this,e=V();return e-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=e,this._fastBlockNumberPromise=this.getBlockNumber().then(function(e){return (null==t._fastBlockNumber||e>t._fastBlockNumber)&&(t._fastBlockNumber=e),t._fastBlockNumber})),this._fastBlockNumberPromise},W.prototype._setFastBlockNumber=function(e){null!=this._fastBlockNumber&&e<this._fastBlockNumber||(this._fastQueryDate=V(),(null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e,this._fastBlockNumberPromise=Promise.resolve(e)));},W.prototype.waitForTransaction=function(n,i){var o=this;return null==i&&(i=1),this.getTransactionReceipt(n).then(function(e){return 0===i||e&&e.confirmations>=i?e:new Promise(function(t){var r=function(e){e.confirmations<i||(o.removeListener(n,r),t(e));};o.on(n,r);})})},W.prototype.getBlockNumber=function(){var r=this;return this.ready.then(function(){return r.perform("getBlockNumber",{}).then(function(e){var t=parseInt(e);if(t!=e){ throw new Error("invalid response - getBlockNumber"); }return r._setFastBlockNumber(t),t})})},W.prototype.getGasPrice=function(){var e=this;return this.ready.then(function(){return e.perform("getGasPrice",{}).then(function(e){return a.bigNumberify(e)})})},W.prototype.getBalance=function(e,t){var n=this;return this.ready.then(function(){return c.resolveProperties({addressOrName:e,blockTag:t}).then(function(e){var t=e.addressOrName,r=e.blockTag;return n._getAddress(t).then(function(e){var t={address:e,blockTag:S(r)};return n.perform("getBalance",t).then(function(e){return a.bigNumberify(e)})})})})},W.prototype.getTransactionCount=function(e,t){var n=this;return this.ready.then(function(){return c.resolveProperties({addressOrName:e,blockTag:t}).then(function(e){var t=e.addressOrName,r=e.blockTag;return n._getAddress(t).then(function(e){var t={address:e,blockTag:S(r)};return n.perform("getTransactionCount",t).then(function(e){return a.bigNumberify(e).toNumber()})})})})},W.prototype.getCode=function(e,t){var n=this;return this.ready.then(function(){return c.resolveProperties({addressOrName:e,blockTag:t}).then(function(e){var t=e.addressOrName,r=e.blockTag;return n._getAddress(t).then(function(e){var t={address:e,blockTag:S(r)};return n.perform("getCode",t).then(function(e){return u.hexlify(e)})})})})},W.prototype.getStorageAt=function(e,t,r){var i=this;return this.ready.then(function(){return c.resolveProperties({addressOrName:e,position:t,blockTag:r}).then(function(e){var t=e.addressOrName,r=e.position,n=e.blockTag;return i._getAddress(t).then(function(e){var t={address:e,blockTag:S(n),position:u.hexStripZeros(u.hexlify(r))};return i.perform("getStorageAt",t).then(function(e){return u.hexlify(e)})})})})},W.prototype.sendTransaction=function(e){var n=this;return this.ready.then(function(){return c.resolveProperties({signedTransaction:e}).then(function(e){var t=e.signedTransaction,r={signedTransaction:u.hexlify(t)};return n.perform("sendTransaction",r).then(function(e){return n._wrapTransaction(p.parse(t),e)},function(e){throw e.transaction=p.parse(t),e.transaction.hash&&(e.transactionHash=e.transaction.hash),e})})})},W.prototype._wrapTransaction=function(r,e){var n=this;if(null!=e&&32!==u.hexDataLength(e)){ throw new Error("invalid response - sendTransaction"); }var t=r;return null!=e&&r.hash!==e&&m.throwError("Transaction hash mismatch from Provider.sendTransaction.",m.UNKNOWN_ERROR,{expectedHash:r.hash,returnedHash:e}),t.wait=function(t){return 0!==t&&(n._emitted["t:"+r.hash]="pending"),n.waitForTransaction(r.hash,t).then(function(e){return null==e&&0===t?null:(n._emitted["t:"+r.hash]=e.blockNumber,0===e.status&&m.throwError("transaction failed",m.CALL_EXCEPTION,{transactionHash:r.hash,transaction:r}),e)})},t},W.prototype.call=function(e,t){var n=this,r=c.shallowCopy(e);return this.ready.then(function(){return c.resolveProperties({blockTag:t,tx:r}).then(function(e){var r=e.blockTag,t=e.tx;return n._resolveNames(t,["to","from"]).then(function(e){var t={blockTag:S(r),transaction:R(e)};return n.perform("call",t).then(function(e){return u.hexlify(e)})})})})},W.prototype.estimateGas=function(e){var r=this,t={to:e.to,from:e.from,data:e.data,gasPrice:e.gasPrice,value:e.value};return this.ready.then(function(){return c.resolveProperties(t).then(function(e){return r._resolveNames(e,["to","from"]).then(function(e){var t={transaction:R(e)};return r.perform("estimateGas",t).then(function(e){return a.bigNumberify(e)})})})})},W.prototype.getBlock=function(e,o){var s=this;return this.ready.then(function(){return c.resolveProperties({blockHashOrBlockTag:e}).then(function(e){var t=e.blockHashOrBlockTag;try{var r=u.hexlify(t);if(32===u.hexDataLength(r)){ return y.poll(function(){return s.perform("getBlock",{blockHash:r,includeTransactions:!!o}).then(function(e){return null==e?null==s._emitted["b:"+r]?null:void 0:I(e,o)})},{onceBlock:s}) }}catch(e){}try{var n=-128,i=S(t);return u.isHexString(i)&&(n=parseInt(i.substring(2),16)),y.poll(function(){return s.perform("getBlock",{blockTag:i,includeTransactions:!!o}).then(function(e){return null!=e?I(e,o):n<=s._emitted.block?void 0:null})},{onceBlock:s})}catch(e){}throw new Error("invalid block hash or block tag")})})},W.prototype.getTransaction=function(e){var n=this;return this.ready.then(function(){return c.resolveProperties({transactionHash:e}).then(function(e){var t=e.transactionHash,r={transactionHash:M(t,!0)};return y.poll(function(){return n.perform("getTransaction",r).then(function(e){if(null==e){ return null==n._emitted["t:"+t]?null:void 0; }var r=W.checkTransactionResponse(e);if(null==r.blockNumber){ r.confirmations=0; }else if(null==r.confirmations){ return n._getFastBlockNumber().then(function(e){var t=e-r.blockNumber+1;return t<=0&&(t=1),r.confirmations=t,n._wrapTransaction(r)}); }return n._wrapTransaction(r)})},{onceBlock:n})})})},W.prototype.getTransactionReceipt=function(e){var n=this;return this.ready.then(function(){return c.resolveProperties({transactionHash:e}).then(function(e){var t=e.transactionHash,r={transactionHash:M(t,!0)};return y.poll(function(){return n.perform("getTransactionReceipt",r).then(function(e){if(null==e){ return null==n._emitted["t:"+t]?null:void 0; }if(null!=e.blockHash){var r=function(e){var t=b(C,e);return t.logs.forEach(function(e,t){null==e.transactionLogIndex&&(e.transactionLogIndex=t);}),null!=e.status&&(t.byzantium=!0),t}(e);if(null==r.blockNumber){ r.confirmations=0; }else if(null==r.confirmations){ return n._getFastBlockNumber().then(function(e){var t=e-r.blockNumber+1;return t<=0&&(t=1),r.confirmations=t,r}); }return r}})},{onceBlock:n})})})},W.prototype.getLogs=function(e){var r=this;return this.ready.then(function(){return c.resolveProperties(e).then(function(e){return r._resolveNames(e,["address"]).then(function(e){var t={filter:function(e){return e&&e.blockHash?b(L,e):b(D,e)}(e)};return r.perform("getLogs",t).then(function(e){return _(G)(e)})})})})},W.prototype.getEtherPrice=function(){var e=this;return this.ready.then(function(){return e.perform("getEtherPrice",{}).then(function(e){return e})})},W.prototype._getAddress=function(t){return this.resolveName(t).then(function(e){return null==e&&m.throwError("ENS name not configured",m.UNSUPPORTED_OPERATION,{operation:"resolveName("+JSON.stringify(t)+")"}),e})},W.prototype._resolveNames=function(e,t){var r=[],n=c.shallowCopy(e);return t.forEach(function(t){null!=n[t]&&r.push(this._getAddress(n[t]).then(function(e){n[t]=e;}));},this),Promise.all(r).then(function(){return n})},W.prototype._getResolver=function(n){var i=this;return this.getNetwork().then(function(e){e.ensAddress||m.throwError("network does support ENS",m.UNSUPPORTED_OPERATION,{operation:"ENS",network:e.name});var t="0x0178b8bf"+h.namehash(n).substring(2),r={to:e.ensAddress,data:t};return i.call(r).then(function(e){if(32!==u.hexDataLength(e)){ return null; }var t=s.getAddress(u.hexDataSlice(e,12));return t===l.AddressZero?null:t})})},W.prototype.resolveName=function(e){var t=this;if(e instanceof Promise){ return e.then(function(e){return t.resolveName(e)}); }try{return Promise.resolve(s.getAddress(e))}catch(e){}var r=this,n=h.namehash(e);return this._getResolver(e).then(function(e){if(null==e){ return null; }var t={to:e,data:"0x3b3b57de"+n.substring(2)};return r.call(t)}).then(function(e){if(32!==u.hexDataLength(e)){ return null; }var t=s.getAddress(u.hexDataSlice(e,12));return t===l.AddressZero?null:t})},W.prototype.lookupAddress=function(n){var t=this;if(n instanceof Promise){ return n.then(function(e){return t.lookupAddress(e)}); }var e=(n=s.getAddress(n)).substring(2)+".addr.reverse",r=h.namehash(e),i=this;return this._getResolver(e).then(function(e){if(!e){ return null; }var t={to:e,data:"0x691f3431"+r.substring(2)};return i.call(t)}).then(function(e){if((e=e.substring(2)).length<64){ return null; }if((e=e.substring(64)).length<64){ return null; }var t=a.bigNumberify("0x"+e.substring(0,64)).toNumber();if(2*t>(e=e.substring(64)).length){ return null; }var r=v.toUtf8String("0x"+e.substring(0,2*t));return i.resolveName(r).then(function(e){return e!=n?null:r})})},W.checkTransactionResponse=function(e){return N(e)},W.prototype.doPoll=function(){},W.prototype.perform=function(e,t){return m.throwError(e+" not implemented",m.NOT_IMPLEMENTED,{operation:e}),null},W.prototype._startPending=function(){m.warn("WARNING: this provider does not support pending events");},W.prototype._stopPending=function(){},W.prototype._addEventListener=function(e,t,r){this._events.push({tag:z(e),listener:t,once:r}),"pending"===e&&this._startPending(),this.polling=!0;},W.prototype.on=function(e,t){return this._addEventListener(e,t,!1),this},W.prototype.once=function(e,t){return this._addEventListener(e,t,!0),this},W.prototype.addEventListener=function(e,t){return this.on(e,t)},W.prototype.emit=function(e){
  var arguments$1 = arguments;
  for(var t=this,r=[],n=1;n<arguments.length;n++){ r[n-1]=arguments$1[n]; }var i=!1,o=z(e);return this._events=this._events.filter(function(e){return e.tag!==o||(setTimeout(function(){e.listener.apply(t,r);},0),i=!0,!e.once)}),0===this.listenerCount()&&(this.polling=!1),i},W.prototype.listenerCount=function(e){if(!e){ return this._events.length; }var t=z(e);return this._events.filter(function(e){return e.tag===t}).length},W.prototype.listeners=function(e){var t=z(e);return this._events.filter(function(e){return e.tag===t}).map(function(e){return e.listener})},W.prototype.removeAllListeners=function(e){if(null==e){ this._events=[],this._stopPending(); }else{var t=z(e);this._events=this._events.filter(function(e){return e.tag!==t}),"pending"===e&&this._stopPending();}return 0===this._events.length&&(this.polling=!1),this},W.prototype.removeListener=function(e,t){var r=!1,n=z(e);return this._events=this._events.filter(function(e){return e.tag!==n||e.listener!=t||!!r||!(r=!0)}),"pending"===e&&0===this.listenerCount("pending")&&this._stopPending(),0===this.listenerCount()&&(this.polling=!1),this},W);function W(e){var t=K.call(this)||this;if(m.checkNew(t,g.Provider),e instanceof Promise){ c.defineReadOnly(t,"ready",e.then(function(e){return c.defineReadOnly(t,"_network",e),e})),t.ready.catch(function(e){}); }else{var r=f.getNetwork(null==e?"homestead":e);r?(c.defineReadOnly(t,"_network",r),c.defineReadOnly(t,"ready",Promise.resolve(t._network))):m.throwError("invalid network",m.INVALID_ARGUMENT,{arg:"network",value:e});}return t._lastBlockNumber=-2,t._balances={},t._events=[],t._pollingInterval=4e3,t._emitted={block:-2},t._fastQueryDate=0,t}r.BaseProvider=q,c.defineReadOnly(g.Provider,"inherits",c.inheritable(g.Provider));},{"../constants":3,"../errors":5,"../utils/address":59,"../utils/bignumber":62,"../utils/bytes":63,"../utils/hash":64,"../utils/networks":71,"../utils/properties":73,"../utils/rlp":75,"../utils/transaction":82,"../utils/utf8":84,"../utils/web":85,"./abstract-provider":49}],51:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=e("./base-provider"),a=e("../utils/bytes"),u=e("../utils/properties"),l=e("../utils/web"),h=o(e("../errors"));function f(e){var t=[];for(var r in e){ if(null!=e[r]){var n=a.hexlify(e[r]);!{gasLimit:!0,gasPrice:!0,nonce:!0,value:!0}[r]||(n=a.hexStripZeros(n)),t.push(r+"="+n);} }return t.join("&")}function c(e){if(0==e.status&&("No records found"===e.message||"No transactions found"===e.message)){ return e.result; }if(1==e.status&&"OK"==e.message){ return e.result; }var t=new Error("invalid response");throw t.result=JSON.stringify(e),t}function d(e){if("2.0"!=e.jsonrpc){ throw(t=new Error("invalid response")).result=JSON.stringify(e),t; }if(e.error){var t=new Error(e.error.message||"unknown error");throw e.error.code&&(t.code=e.error.code),e.error.data&&(t.data=e.error.data),t}return e.result}function p(e){if("pending"===e){ throw new Error("pending not supported"); }return "latest"===e?e:parseInt(e.substring(2),16)}var v,y=(v=s.BaseProvider,i(m,v),m.prototype.perform=function(e,t){var r=this,n=this.baseUrl,i="";function o(t,e){return l.fetchJson(t,null,e||d).then(function(e){return r.emit("debug",{action:"perform",request:t,response:e,provider:r}),e})}switch(this.apiKey&&(i+="&apikey="+this.apiKey),e){case"getBlockNumber":return o(n+="/api?module=proxy&action=eth_blockNumber"+i);case"getGasPrice":return o(n+="/api?module=proxy&action=eth_gasPrice"+i);case"getBalance":return n+="/api?module=account&action=balance&address="+t.address,o(n+="&tag="+t.blockTag+i,c);case"getTransactionCount":return n+="/api?module=proxy&action=eth_getTransactionCount&address="+t.address,o(n+="&tag="+t.blockTag+i);case"getCode":return n+="/api?module=proxy&action=eth_getCode&address="+t.address,o(n+="&tag="+t.blockTag+i,d);case"getStorageAt":return n+="/api?module=proxy&action=eth_getStorageAt&address="+t.address,n+="&position="+t.position,o(n+="&tag="+t.blockTag+i,d);case"sendTransaction":return n+="/api?module=proxy&action=eth_sendRawTransaction&hex="+t.signedTransaction,o(n+=i).catch(function(e){throw e.responseText&&(0<=e.responseText.toLowerCase().indexOf("insufficient funds")&&h.throwError("insufficient funds",h.INSUFFICIENT_FUNDS,{}),0<=e.responseText.indexOf("same hash was already imported")&&h.throwError("nonce has already been used",h.NONCE_EXPIRED,{}),0<=e.responseText.indexOf("another transaction with same nonce")&&h.throwError("replacement fee too low",h.REPLACEMENT_UNDERPRICED,{})),e});case"getBlock":if(t.blockTag){ return n+="/api?module=proxy&action=eth_getBlockByNumber&tag="+t.blockTag,t.includeTransactions?n+="&boolean=true":n+="&boolean=false",o(n+=i); }throw new Error("getBlock by blockHash not implmeneted");case"getTransaction":return n+="/api?module=proxy&action=eth_getTransactionByHash&txhash="+t.transactionHash,o(n+=i);case"getTransactionReceipt":return n+="/api?module=proxy&action=eth_getTransactionReceipt&txhash="+t.transactionHash,o(n+=i);case"call":if(n+="/api?module=proxy&action=eth_call"+(s=(s=f(t.transaction))&&"&"+s),"latest"!==t.blockTag){ throw new Error("EtherscanProvider does not support blockTag for call"); }return o(n+=i);case"estimateGas":var s;return n+="/api?module=proxy&action=eth_estimateGas&"+(s=(s=f(t.transaction))&&"&"+s),o(n+=i);case"getLogs":n+="/api?module=logs&action=getLogs";try{if(t.filter.fromBlock&&(n+="&fromBlock="+p(t.filter.fromBlock)),t.filter.toBlock&&(n+="&toBlock="+p(t.filter.toBlock)),t.filter.blockHash){ try{h.throwError("Etherscan does not support blockHash filters",h.UNSUPPORTED_OPERATION,{operation:"getLogs(blockHash)"});}catch(e){return Promise.reject(e)} }if(t.filter.address&&(n+="&address="+t.filter.address),t.filter.topics&&0<t.filter.topics.length){if(1<t.filter.topics.length){ throw new Error("unsupported topic format"); }var a=t.filter.topics[0];if("string"!=typeof a||66!==a.length){ throw new Error("unsupported topic0 format"); }n+="&topic0="+a;}}catch(e){return Promise.reject(e)}var u=this;return o(n+=i,c).then(function(e){var r={},n=Promise.resolve();return e.forEach(function(t){n=n.then(function(){return null!=t.blockHash?null:(t.blockHash=r[t.transactionHash],null==t.blockHash?u.getTransaction(t.transactionHash).then(function(e){return r[t.transactionHash]=e.blockHash,t.blockHash=e.blockHash,null}):null)});}),n.then(function(){return e})});case"getEtherPrice":return "homestead"!==this.network.name?Promise.resolve(0):(n+="/api?module=stats&action=ethprice",o(n+=i,c).then(function(e){return parseFloat(e.ethusd)}))}return v.prototype.perform.call(this,e,t)},m.prototype.getHistory=function(e,t,r){var n=this,i=this.baseUrl,o="";return this.apiKey&&(o+="&apikey="+this.apiKey),null==t&&(t=0),null==r&&(r=99999999),this.resolveName(e).then(function(e){return i+="/api?module=account&action=txlist&address="+e,i+="&startblock="+t,i+="&endblock="+r,i+="&sort=asc"+o,l.fetchJson(i,null,c).then(function(e){n.emit("debug",{action:"getHistory",request:i,response:e,provider:n});var r=[];return e.forEach(function(t){["contractAddress","to"].forEach(function(e){""==t[e]&&delete t[e];}),null==t.creates&&null!=t.contractAddress&&(t.creates=t.contractAddress);var e=s.BaseProvider.checkTransactionResponse(t);t.timeStamp&&(e.timestamp=parseInt(t.timeStamp)),r.push(e);}),r})})},m);function m(e,t){var r=v.call(this,e)||this;h.checkNew(r,m);var n="invalid";r.network&&(n=r.network.name);var i=null;switch(n){case"homestead":i="https://api.etherscan.io";break;case"ropsten":i="https://api-ropsten.etherscan.io";break;case"rinkeby":i="https://api-rinkeby.etherscan.io";break;case"kovan":i="https://api-kovan.etherscan.io";break;case"goerli":i="https://api-goerli.etherscan.io";break;default:throw new Error("unsupported network")}return u.defineReadOnly(r,"baseUrl",i),u.defineReadOnly(r,"apiKey",t),r}r.EtherscanProvider=y;},{"../errors":5,"../utils/bytes":63,"../utils/properties":73,"../utils/web":85,"./base-provider":50}],52:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=e("./base-provider"),a=o(e("../errors"));function u(t){var r=!0,n=null;return t.forEach(function(e){null!=e?null!=n?n.name===e.name&&n.chainId===e.chainId&&(n.ensAddress===e.ensAddress||null==n.ensAddress&&null==e.ensAddress)||a.throwError("provider mismatch",a.INVALID_ARGUMENT,{arg:"networks",value:t}):n=e:r=!1;}),r}var l,h=(l=s.BaseProvider,i(f,l),Object.defineProperty(f.prototype,"providers",{get:function(){return this._providers.slice(0)},enumerable:!0,configurable:!0}),f.prototype.perform=function(i,o){var s=this.providers;return new Promise(function(r,e){var n=null;!function t(){s.length?s.shift().perform(i,o).then(function(e){return r(e)}).catch(function(e){n=n||e,setTimeout(t,0);}):e(n);}();})},f);function f(e){var t=this;if(0===e.length){ throw new Error("no providers"); }if(u(e.map(function(e){return e.network}))){ t=l.call(this,e[0].network)||this; }else{var r=Promise.all(e.map(function(e){return e.getNetwork()})).then(function(e){return u(e)||a.throwError("getNetwork returned null",a.UNKNOWN_ERROR,{}),e[0]});t=l.call(this,r)||this;}return a.checkNew(t,f),t._providers=e.slice(0),t}r.FallbackProvider=h;},{"../errors":5,"./base-provider":50}],53:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./abstract-provider");r.Provider=n.Provider;var i=e("./base-provider");r.BaseProvider=i.BaseProvider;var o=e("./etherscan-provider");r.EtherscanProvider=o.EtherscanProvider;var s=e("./fallback-provider");r.FallbackProvider=s.FallbackProvider;var a=e("./ipc-provider");r.IpcProvider=a.IpcProvider;var u=e("./infura-provider");r.InfuraProvider=u.InfuraProvider;var l=e("./json-rpc-provider");r.JsonRpcProvider=l.JsonRpcProvider,r.JsonRpcSigner=l.JsonRpcSigner;var h=e("./web3-provider");r.Web3Provider=h.Web3Provider;},{"./abstract-provider":49,"./base-provider":50,"./etherscan-provider":51,"./fallback-provider":52,"./infura-provider":54,"./ipc-provider":55,"./json-rpc-provider":56,"./web3-provider":57}],54:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s,a=e("./json-rpc-provider"),u=e("../utils/bytes"),l=e("../utils/networks"),h=e("../utils/properties"),f=o(e("../errors")),c=(s=a.JsonRpcProvider,i(d,s),d.prototype._startPending=function(){f.warn("WARNING: INFURA does not support pending filters");},d.prototype.getSigner=function(e){return f.throwError("INFURA does not support signing",f.UNSUPPORTED_OPERATION,{operation:"getSigner"})},d.prototype.listAccounts=function(){return Promise.resolve([])},d);function d(e,t){var r=this,n=l.getNetwork(null==e?"homestead":e);null==t&&(t="7d0d81d0919f4f05b9ab6634be01ee73");var i=null;switch(n.name){case"homestead":i="mainnet.infura.io";break;case"ropsten":i="ropsten.infura.io";break;case"rinkeby":i="rinkeby.infura.io";break;case"goerli":i="goerli.infura.io";break;case"kovan":i="kovan.infura.io";break;default:f.throwError("unsupported network",f.INVALID_ARGUMENT,{argument:"network",value:e});}return u.isHexString("0x"+t,16)?(r=s.call(this,"https://"+i+"/v3/"+t,n)||this,h.defineReadOnly(r,"apiAccessToken",null),h.defineReadOnly(r,"projectId",t)):(f.warn("The legacy INFURA apiAccesToken API is deprecated; please upgrade to a Project ID instead (see INFURA dshboard; https://infura.io)"),r=s.call(this,"https://"+i+"/"+t,n)||this,h.defineReadOnly(r,"apiAccessToken",t),h.defineReadOnly(r,"projectId",null)),f.checkNew(r,d),r}r.InfuraProvider=c;},{"../errors":5,"../utils/bytes":63,"../utils/networks":71,"../utils/properties":73,"./json-rpc-provider":56}],55:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});},{}],56:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=e("./base-provider"),a=e("../abstract-signer"),u=o(e("../errors")),l=e("../utils/address"),h=e("../utils/bytes"),f=e("../utils/networks"),c=e("../utils/properties"),d=e("../utils/utf8"),p=e("../utils/web");function v(e){if(e.error){var t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}function y(e){return e?e.toLowerCase():e}var m,g={},b=42,w=(m=a.Signer,i(_,m),_.prototype.getAddress=function(){var t=this;return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then(function(e){return e.length<=t._index&&u.throwError("unknown account #"+t._index,u.UNSUPPORTED_OPERATION,{operation:"getAddress"}),t._address=l.getAddress(e[t._index]),t._address})},_.prototype.getBalance=function(e){return this.provider.getBalance(this.getAddress(),e)},_.prototype.getTransactionCount=function(e){return this.provider.getTransactionCount(this.getAddress(),e)},_.prototype.sendUncheckedTransaction=function(e){var n=this;e=c.shallowCopy(e);var t=this.getAddress().then(function(e){return e=e&&e.toLowerCase()});if(null==e.gasLimit){var r=c.shallowCopy(e);r.from=t,e.gasLimit=this.provider.estimateGas(r);}return Promise.all([c.resolveProperties(e),t]).then(function(e){var t=e[0],r=E.hexlifyTransaction(t);return r.from=e[1],n.provider.send("eth_sendTransaction",[r]).then(function(e){return e},function(e){throw e.responseText&&(0<=e.responseText.indexOf("insufficient funds")&&u.throwError("insufficient funds",u.INSUFFICIENT_FUNDS,{transaction:t}),0<=e.responseText.indexOf("nonce too low")&&u.throwError("nonce has already been used",u.NONCE_EXPIRED,{transaction:t}),0<=e.responseText.indexOf("replacement transaction underpriced")&&u.throwError("replacement fee too low",u.REPLACEMENT_UNDERPRICED,{transaction:t})),e})})},_.prototype.sendTransaction=function(e){var r=this;return this.sendUncheckedTransaction(e).then(function(t){return p.poll(function(){return r.provider.getTransaction(t).then(function(e){if(null!==e){ return r.provider._wrapTransaction(e,t) }})},{fastRetry:250,onceBlock:r.provider}).catch(function(e){throw e.transactionHash=t,e})})},_.prototype.signMessage=function(e){var t=this,r="string"==typeof e?d.toUtf8Bytes(e):e;return this.getAddress().then(function(e){return t.provider.send("eth_sign",[e.toLowerCase(),h.hexlify(r)])})},_.prototype.unlock=function(t){var r=this.provider;return this.getAddress().then(function(e){return r.send("personal_unlockAccount",[e.toLowerCase(),t,null])})},_);function _(e,t,r){var n=m.call(this)||this;if(u.checkNew(n,_),e!==g){ throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner"); }return c.defineReadOnly(n,"provider",t),r?"string"==typeof r?c.defineReadOnly(n,"_address",l.getAddress(r)):"number"==typeof r?c.defineReadOnly(n,"_index",r):u.throwError("invalid address or index",u.INVALID_ARGUMENT,{argument:"addressOrIndex",value:r}):c.defineReadOnly(n,"_index",0),n}r.JsonRpcSigner=w;var M,A={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0},E=(M=s.BaseProvider,i(S,M),S.prototype.getSigner=function(e){return new w(g,this,e)},S.prototype.listAccounts=function(){return this.send("eth_accounts",[]).then(function(e){return e.map(function(e){return l.getAddress(e)})})},S.prototype.send=function(e,t){var r=this,n={method:e,params:t,id:b++,jsonrpc:"2.0"};return p.fetchJson(this.connection,JSON.stringify(n),v).then(function(e){return r.emit("debug",{action:"send",request:n,response:e,provider:r}),e})},S.prototype.perform=function(e,t){switch(e){case"getBlockNumber":return this.send("eth_blockNumber",[]);case"getGasPrice":return this.send("eth_gasPrice",[]);case"getBalance":return this.send("eth_getBalance",[y(t.address),t.blockTag]);case"getTransactionCount":return this.send("eth_getTransactionCount",[y(t.address),t.blockTag]);case"getCode":return this.send("eth_getCode",[y(t.address),t.blockTag]);case"getStorageAt":return this.send("eth_getStorageAt",[y(t.address),t.position,t.blockTag]);case"sendTransaction":return this.send("eth_sendRawTransaction",[t.signedTransaction]).catch(function(e){throw e.responseText&&(0<e.responseText.indexOf("insufficient funds")&&u.throwError("insufficient funds",u.INSUFFICIENT_FUNDS,{}),0<e.responseText.indexOf("nonce too low")&&u.throwError("nonce has already been used",u.NONCE_EXPIRED,{}),0<e.responseText.indexOf("replacement transaction underpriced")&&u.throwError("replacement fee too low",u.REPLACEMENT_UNDERPRICED,{})),e});case"getBlock":return t.blockTag?this.send("eth_getBlockByNumber",[t.blockTag,!!t.includeTransactions]):t.blockHash?this.send("eth_getBlockByHash",[t.blockHash,!!t.includeTransactions]):Promise.reject(new Error("invalid block tag or block hash"));case"getTransaction":return this.send("eth_getTransactionByHash",[t.transactionHash]);case"getTransactionReceipt":return this.send("eth_getTransactionReceipt",[t.transactionHash]);case"call":return this.send("eth_call",[S.hexlifyTransaction(t.transaction,{from:!0}),t.blockTag]);case"estimateGas":return this.send("eth_estimateGas",[S.hexlifyTransaction(t.transaction,{from:!0})]);case"getLogs":return t.filter&&null!=t.filter.address&&(t.filter.address=y(t.filter.address)),this.send("eth_getLogs",[t.filter])}return u.throwError(e+" not implemented",u.NOT_IMPLEMENTED,{operation:e}),null},S.prototype._startPending=function(){if(null==this._pendingFilter){var r=this,n=this.send("eth_newPendingTransactionFilter",[]);(this._pendingFilter=n).then(function(t){return function e(){r.send("eth_getFilterChanges",[t]).then(function(e){if(r._pendingFilter!=n){ return null; }var t=Promise.resolve();return e.forEach(function(e){r._emitted["t:"+e.toLowerCase()]="pending",t=t.then(function(){return r.getTransaction(e).then(function(e){return r.emit("pending",e),null})});}),t.then(function(){return function(t){return new Promise(function(e){setTimeout(function(){e();},t);})}(1e3)})}).then(function(){if(r._pendingFilter==n){ return setTimeout(function(){e();},0),null; }r.send("eth_uninstallFilter",[t]);}).catch(function(e){});}(),t}).catch(function(e){});}},S.prototype._stopPending=function(){this._pendingFilter=null;},S.hexlifyTransaction=function(r,e){var t=c.shallowCopy(A);if(e){ for(var n in e){ e[n]&&(t[n]=!0); } }c.checkProperties(r,t);var i={};return ["gasLimit","gasPrice","nonce","value"].forEach(function(e){if(null!=r[e]){var t=h.hexStripZeros(h.hexlify(r[e]));"gasLimit"===e&&(e="gas"),i[e]=t;}}),["from","to","data"].forEach(function(e){null!=r[e]&&(i[e]=h.hexlify(r[e]));}),i},S);function S(e,t){var n=this;if("string"==typeof e&&null===t&&f.getNetwork(e)&&(t=e,e=null),t){ n=M.call(this,t)||this; }else{var r=new Promise(function(t,r){setTimeout(function(){n.send("net_version",[]).then(function(e){return t(f.getNetwork(parseInt(e)))}).catch(function(e){r(e);});});});n=M.call(this,r)||this;}return u.checkNew(n,S),e=e||"http://localhost:8545",n.connection="string"==typeof e?{url:e}:e,n}r.JsonRpcProvider=E;},{"../abstract-signer":2,"../errors":5,"../utils/address":59,"../utils/bytes":63,"../utils/networks":71,"../utils/properties":73,"../utils/utf8":84,"../utils/web":85,"./base-provider":50}],57:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s,a=e("./json-rpc-provider"),u=e("../utils/properties"),l=o(e("../errors")),h=42,f=(s=a.JsonRpcProvider,i(c,s),c.prototype.send=function(t,r){var o=this;return "eth_sign"==t&&this._web3Provider.isMetaMask&&(t="personal_sign",r=[r[1],r[0]]),new Promise(function(n,i){var e={method:t,params:r,id:h++,jsonrpc:"2.0"};o._sendAsync(e,function(e,t){if(e){ i(e); }else{if(t.error){var r=new Error(t.error.message);return r.code=t.error.code,r.data=t.error.data,void i(r)}n(t.result);}});})},c);function c(e,t){var r=s.call(this,e.host||e.path||"",t)||this;return l.checkNew(r,c),e&&(e.sendAsync?r._sendAsync=e.sendAsync.bind(e):e.send&&(r._sendAsync=e.send.bind(e))),e&&r._sendAsync||l.throwError("invalid web3Provider",l.INVALID_ARGUMENT,{arg:"web3Provider",value:e}),u.defineReadOnly(r,"_web3Provider",e),r}r.Web3Provider=f;},{"../errors":5,"../utils/properties":73,"./json-rpc-provider":56}],58:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=e("../constants"),l=o(e("../errors")),a=e("./address"),u=e("./bignumber"),h=e("./bytes"),f=e("./utf8"),c=e("./properties"),d=new RegExp(/^bytes([0-9]*)$/),p=new RegExp(/^(u?int)([0-9]*)$/),v=new RegExp(/^(.*)\[([0-9]*)\]$/);r.defaultCoerceFunc=function(e,t){var r=e.match(p);return r&&parseInt(r[2])<=48?t.toNumber():t};var y=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"),m=new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");function g(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}function b(e,t){var r=e;function n(e){throw new Error('unexpected character "'+r[e]+'" at position '+e+' in "'+r+'"')}e=e.replace(/\s/g," ");for(var i={type:"",name:"",state:{allowType:!0}},o=i,s=0;s<e.length;s++){var a=e[s];switch(a){case"(":o.state.allowParams||n(s),o.state.allowType=!1,o.type=g(o.type),o.components=[{type:"",name:"",parent:o,state:{allowType:!0}}],o=o.components[0];break;case")":delete o.state,t&&"indexed"===o.name&&(o.indexed=!0,o.name=""),o.type=g(o.type);var u=o;(o=o.parent)||n(s),delete u.parent,o.state.allowParams=!1,o.state.allowName=!0,o.state.allowArray=!0;break;case",":delete o.state,t&&"indexed"===o.name&&(o.indexed=!0,o.name=""),o.type=g(o.type);var l={type:"",name:"",parent:o.parent,state:{allowType:!0}};o.parent.components.push(l),delete o.parent,o=l;break;case" ":o.state.allowType&&""!==o.type&&(o.type=g(o.type),delete o.state.allowType,o.state.allowName=!0,o.state.allowParams=!0),o.state.allowName&&""!==o.name&&(t&&"indexed"===o.name?(o.indexed=!0,o.name=""):o.state.allowName=!1);break;case"[":o.state.allowArray||n(s),o.type+=a,o.state.allowArray=!1,o.state.allowName=!1,o.state.readArray=!0;break;case"]":o.state.readArray||n(s),o.type+=a,o.state.readArray=!1,o.state.allowArray=!0,o.state.allowName=!0;break;default:o.state.allowType?(o.type+=a,o.state.allowParams=!0,o.state.allowArray=!0):o.state.allowName?(o.name+=a,delete o.state.allowArray):o.state.readArray?o.type+=a:n(s);}}if(o.parent){ throw new Error("unexpected eof"); }return delete i.state,t&&"indexed"===o.name&&(o.indexed=!0,o.name=""),i.type=g(i.type),i}function w(e){return se(r.defaultCoerceFunc,e).type}r.parseParamType=function(e){return b(e,!0)},r.formatParamType=w,r.formatSignature=function(e){return e.name+"("+e.inputs.map(function(e){return w(e)}).join(",")+")"},r.parseSignature=function(e){if("string"==typeof e){ return "event "===(e=(e=(e=e.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).substring(0,6)?function(e){var t={anonymous:!1,inputs:[],name:"",type:"event"},r=e.match(y);if(!r){ throw new Error("invalid event: "+e); }if(t.name=r[1].trim(),ie(r[2]).forEach(function(e){(e=b(e,!0)).indexed=!!e.indexed,t.inputs.push(e);}),r[3].split(" ").forEach(function(e){switch(e){case"anonymous":t.anonymous=!0;break;case"":break;default:l.info("unknown modifier: "+e);}}),t.name&&!t.name.match(m)){ throw new Error('invalid identifier: "'+t.name+'"'); }return t}(e.substring(6).trim()):("function "===e.substring(0,9)&&(e=e.substring(9)),function(e){var t={constant:!1,gas:null,inputs:[],name:"",outputs:[],payable:!1,stateMutability:null,type:"function"},r=e.split("@");if(1!==r.length){if(2<r.length){ throw new Error("invalid signature"); }if(!r[1].match(/^[0-9]+$/)){ throw new Error("invalid signature gas"); }t.gas=u.bigNumberify(r[1]),e=r[0];}var n=(r=e.split(" returns "))[0].match(y);if(!n){ throw new Error("invalid signature"); }if(t.name=n[1].trim(),!t.name.match(m)){ throw new Error('invalid identifier: "'+n[1]+'"'); }if(ie(n[2]).forEach(function(e){t.inputs.push(b(e));}),n[3].split(" ").forEach(function(e){switch(e){case"constant":t.constant=!0;break;case"payable":t.payable=!0,t.stateMutability="payable";break;case"pure":t.constant=!0,t.stateMutability="pure";break;case"view":t.constant=!0,t.stateMutability="view";break;case"external":case"public":case"":break;default:l.info("unknown modifier: "+e);}}),1<r.length){var i=r[1].match(y);if(""!=i[1].trim()||""!=i[3].trim()){ throw new Error("unexpected tokens"); }ie(i[2]).forEach(function(e){t.outputs.push(b(e));});}if("constructor"===t.name){if(t.type="constructor",t.outputs.length){ throw new Error("constructor may not have outputs"); }delete t.name,delete t.outputs;}return t}(e.trim())); }throw new Error("unknown signature")};function _(e,t,r,n,i){this.coerceFunc=e,this.name=t,this.type=r,this.localName=n,this.dynamic=i;}var M,A=(i(E,M=_),E.prototype.encode=function(e){return this.coder.encode(e)},E.prototype.decode=function(e,t){return this.coder.decode(e,t)},E);function E(e){var t=M.call(this,e.coerceFunc,e.name,e.type,void 0,e.dynamic)||this;return c.defineReadOnly(t,"coder",e),t}var S,k=(i(N,S=_),N.prototype.encode=function(e){return h.arrayify([])},N.prototype.decode=function(e,t){if(t>e.length){ throw new Error("invalid null"); }return {consumed:0,value:this.coerceFunc("null",void 0)}},N);function N(e,t){return S.call(this,e,"null","",t,!1)||this}var P,x=(i(I,P=_),I.prototype.encode=function(t){try{var e=u.bigNumberify(t);if(this.signed){var r=s.MaxUint256.maskn(8*this.size-1);if(e.gt(r)){ throw new Error("out-of-bounds"); }if(r=r.add(s.One).mul(s.NegativeOne),e.lt(r)){ throw new Error("out-of-bounds") }}else if(e.lt(s.Zero)||e.gt(s.MaxUint256.maskn(8*this.size))){ throw new Error("out-of-bounds"); }return e=e.toTwos(8*this.size).maskn(8*this.size),this.signed&&(e=e.fromTwos(8*this.size).toTwos(256)),h.padZeros(h.arrayify(e),32)}catch(e){l.throwError("invalid number value",l.INVALID_ARGUMENT,{arg:this.localName,coderType:this.name,value:t});}return null},I.prototype.decode=function(e,t){e.length<t+32&&l.throwError("insufficient data for "+this.name+" type",l.INVALID_ARGUMENT,{arg:this.localName,coderType:this.name,value:h.hexlify(e.slice(t,t+32))});var r=32-this.size,n=u.bigNumberify(e.slice(t+r,t+32));return n=this.signed?n.fromTwos(8*this.size):n.maskn(8*this.size),{consumed:32,value:this.coerceFunc(this.name,n)}},I);function I(e,t,r,n){var i=this,o=(r?"int":"uint")+8*t;return (i=P.call(this,e,o,o,n,!1)||this).size=t,i.signed=r,i}var T,R=new x(function(e,t){return t},32,!1,"none"),O=(i(C,T=_),C.prototype.encode=function(e){return R.encode(e?1:0)},C.prototype.decode=function(e,t){try{var r=R.decode(e,t);}catch(e){throw"insufficient data for uint256 type"===e.reason&&l.throwError("insufficient data for boolean type",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"boolean",value:e.value}),e}return {consumed:r.consumed,value:this.coerceFunc("bool",!r.value.isZero())}},C);function C(e,t){return T.call(this,e,"bool","bool",t,!1)||this}var B,D=(i(L,B=_),L.prototype.encode=function(t){var e=new Uint8Array(32);try{var r=h.arrayify(t);if(r.length!==this.length){ throw new Error("incorrect data length"); }e.set(r);}catch(e){l.throwError("invalid "+this.name+" value",l.INVALID_ARGUMENT,{arg:this.localName,coderType:this.name,value:e.value||t});}return e},L.prototype.decode=function(e,t){return e.length<t+32&&l.throwError("insufficient data for "+this.name+" type",l.INVALID_ARGUMENT,{arg:this.localName,coderType:this.name,value:h.hexlify(e.slice(t,t+32))}),{consumed:32,value:this.coerceFunc(this.name,h.hexlify(e.slice(t,t+this.length)))}},L);function L(e,t,r){var n=this,i="bytes"+t;return (n=B.call(this,e,i,i,r,!1)||this).length=t,n}var U,F=(i(j,U=_),j.prototype.encode=function(t){var e=new Uint8Array(32);try{e.set(h.arrayify(a.getAddress(t)),12);}catch(e){l.throwError("invalid address",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"address",value:t});}return e},j.prototype.decode=function(e,t){return e.length<t+32&&l.throwError("insufficuent data for address type",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"address",value:h.hexlify(e.slice(t,t+32))}),{consumed:32,value:this.coerceFunc("address",a.getAddress(h.hexlify(e.slice(t+12,t+32))))}},j);function j(e,t){return U.call(this,e,"address","address",t,!1)||this}function G(e){var t=32*Math.ceil(e.length/32),r=new Uint8Array(t-e.length);return h.concat([R.encode(e.length),e,r])}function H(e,t,r){e.length<t+32&&l.throwError("insufficient data for dynamicBytes length",l.INVALID_ARGUMENT,{arg:r,coderType:"dynamicBytes",value:h.hexlify(e.slice(t,t+32))});var n=R.decode(e,t).value;try{n=n.toNumber();}catch(e){l.throwError("dynamic bytes count too large",l.INVALID_ARGUMENT,{arg:r,coderType:"dynamicBytes",value:n.toString()});}return e.length<t+32+n&&l.throwError("insufficient data for dynamicBytes type",l.INVALID_ARGUMENT,{arg:r,coderType:"dynamicBytes",value:h.hexlify(e.slice(t,t+32+n))}),{consumed:32+32*Math.ceil(n/32),value:e.slice(t+32,t+32+n)}}var z,V=(i(K,z=_),K.prototype.encode=function(e){try{return G(h.arrayify(e))}catch(e){l.throwError("invalid bytes value",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"bytes",value:e.value});}return null},K.prototype.decode=function(e,t){var r=H(e,t,this.localName);return r.value=this.coerceFunc("bytes",h.hexlify(r.value)),r},K);function K(e,t){return z.call(this,e,"bytes","bytes",t,!0)||this}var q,W=(i(Z,q=_),Z.prototype.encode=function(e){return "string"!=typeof e&&l.throwError("invalid string value",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"string",value:e}),G(f.toUtf8Bytes(e))},Z.prototype.decode=function(e,t){var r=H(e,t,this.localName);return r.value=this.coerceFunc("string",f.toUtf8String(r.value)),r},Z);function Z(e,t){return q.call(this,e,"string","string",t,!0)||this}function J(e){return 32*Math.ceil(e/32)}function X(e,r){if(Array.isArray(r));else if(r&&"object"==typeof r){var t=[];e.forEach(function(e){t.push(r[e.localName]);}),r=t;}else { l.throwError("invalid tuple value",l.INVALID_ARGUMENT,{coderType:"tuple",value:r}); }e.length!==r.length&&l.throwError("types/value length mismatch",l.INVALID_ARGUMENT,{coderType:"tuple",value:r});var n=[];e.forEach(function(e,t){n.push({dynamic:e.dynamic,value:e.encode(r[t])});});var i=0,o=0;n.forEach(function(e){e.dynamic?(i+=32,o+=J(e.value.length)):i+=J(e.value.length);});var s=0,a=i,u=new Uint8Array(i+o);return n.forEach(function(e){e.dynamic?(u.set(R.encode(a),s),s+=32,u.set(e.value,a),a+=J(e.value.length)):(u.set(e.value,s),s+=J(e.value.length));}),u}function $(e,n,i){var o=i,s=0,a=[];return e.forEach(function(e){if(e.dynamic){var t=R.decode(n,i);(r=e.decode(n,o+t.value.toNumber())).consumed=t.consumed;}else { var r=e.decode(n,i); }null!=r.value&&a.push(r.value),i+=r.consumed,s+=r.consumed;}),e.forEach(function(e,t){var r=e.localName;r&&("length"===r&&(r="_length"),null==a[r]&&(a[r]=a[t]));}),{value:a,consumed:s}}var Q,Y=(i(ee,Q=_),ee.prototype.encode=function(e){Array.isArray(e)||l.throwError("expected array value",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"array",value:e});var t=this.length,r=new Uint8Array(0);-1===t&&(t=e.length,r=R.encode(t)),l.checkArgumentCount(t,e.length," in coder array"+(this.localName?" "+this.localName:""));for(var n=[],i=0;i<e.length;i++){ n.push(this.coder); }return h.concat([r,X(n,e)])},ee.prototype.decode=function(e,t){var r=0,n=this.length;if(-1===n){try{var i=R.decode(e,t);}catch(e){l.throwError("insufficient data for dynamic array length",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"array",value:e.value});}try{n=i.value.toNumber();}catch(e){l.throwError("array count too large",l.INVALID_ARGUMENT,{arg:this.localName,coderType:"array",value:i.value.toString()});}r+=i.consumed,t+=i.consumed;}for(var o=[],s=0;s<n;s++){ o.push(new A(this.coder)); }var a=$(o,e,t);return a.consumed+=r,a.value=this.coerceFunc(this.type,a.value),a},ee);function ee(e,t,r,n){var i=this,o=t.type+"["+(0<=r?r:"")+"]",s=-1===r||t.dynamic;return (i=Q.call(this,e,"array",o,n,s)||this).coder=t,i.length=r,i}var te,re=(i(ne,te=_),ne.prototype.encode=function(e){return X(this.coders,e)},ne.prototype.decode=function(e,t){var r=$(this.coders,e,t);return r.value=this.coerceFunc(this.type,r.value),r},ne);function ne(e,t,r){var n=this,i=!1,o=[];t.forEach(function(e){e.dynamic&&(i=!0),o.push(e.type);});var s="tuple("+o.join(",")+")";return (n=te.call(this,e,"tuple",s,r,i)||this).coders=t,n}function ie(e){e=e.trim();for(var t=[],r="",n=0,i=0;i<e.length;i++){var o=e[i];if(","===o&&0===n){ t.push(r),r=""; }else if(r+=o,"("===o){ n++; }else if(")"===o&&-1===--n){ throw new Error("unbalanced parenthsis") }}return r&&t.push(r),t}var oe={address:F,bool:O,string:W,bytes:V};function se(e,t){var r,n=oe[t.type];if(n){ return new n(e,t.name); }if(r=t.type.match(p)){ return (0===(i=parseInt(r[2]||"256"))||256<i||i%8!=0)&&l.throwError("invalid "+r[1]+" bit length",l.INVALID_ARGUMENT,{arg:"param",value:t}),new x(e,i/8,"int"===r[1],t.name); }if(r=t.type.match(d)){ return (0===(i=parseInt(r[1]))||32<i)&&l.throwError("invalid bytes length",l.INVALID_ARGUMENT,{arg:"param",value:t}),new D(e,i,t.name); }if(r=t.type.match(v)){var i=parseInt(r[2]||"-1");return (t=c.shallowCopy(t)).type=r[1],t=c.deepCopy(t),new Y(e,se(e,t),i,t.name)}return "tuple"===t.type.substring(0,5)?function(t,e,r){var n=[];return (e=e||[]).forEach(function(e){n.push(se(t,e));}),new re(t,n,r)}(e,t.components,t.name):""===t.type?new k(e,t.name):(l.throwError("invalid type",l.INVALID_ARGUMENT,{arg:"type",value:t.type}),null)}var ae=(ue.prototype.encode=function(e,t){e.length!==t.length&&l.throwError("types/values length mismatch",l.INVALID_ARGUMENT,{count:{types:e.length,values:t.length},value:{types:e,values:t}});var r=[];return e.forEach(function(e){var t=null;t="string"==typeof e?b(e):e,r.push(se(this.coerceFunc,t));},this),h.hexlify(new re(this.coerceFunc,r,"_").encode(t))},ue.prototype.decode=function(e,t){var r=[];return e.forEach(function(e){var t=null;t="string"==typeof e?b(e):c.deepCopy(e),r.push(se(this.coerceFunc,t));},this),new re(this.coerceFunc,r,"_").decode(h.arrayify(t),0).value},ue);function ue(e){l.checkNew(this,ue),e=e||r.defaultCoerceFunc,c.defineReadOnly(this,"coerceFunc",e);}r.AbiCoder=ae,r.defaultAbiCoder=new ae;},{"../constants":3,"../errors":5,"./address":59,"./bignumber":62,"./bytes":63,"./properties":73,"./utf8":84}],59:[function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var i=n(e("bn.js")),o=e("./bytes"),s=e("./keccak256"),a=e("./rlp"),u=e("../errors");function l(e){"string"==typeof e&&e.match(/^0x[0-9A-Fa-f]{40}$/)||u.throwError("invalid address",u.INVALID_ARGUMENT,{arg:"address",value:e});for(var t=(e=e.toLowerCase()).substring(2).split(""),r=new Uint8Array(40),n=0;n<40;n++){ r[n]=t[n].charCodeAt(0); }r=o.arrayify(s.keccak256(r));for(var i=0;i<40;i+=2){ 8<=r[i>>1]>>4&&(t[i]=t[i].toUpperCase()),8<=(15&r[i>>1])&&(t[i+1]=t[i+1].toUpperCase()); }return "0x"+t.join("")}for(var h={},f=0;f<10;f++){ h[String(f)]=String(f); }for(f=0;f<26;f++){ h[String.fromCharCode(65+f)]=String(10+f); }var c,d=Math.floor((c=9007199254740991,Math.log10?Math.log10(c):Math.log(c)/Math.LN10));function p(e){e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00";var t="";for(e.split("").forEach(function(e){t+=h[e];});t.length>=d;){var r=t.substring(0,d);t=parseInt(r,10)%97+t.substring(r.length);}for(var n=String(98-parseInt(t,10)%97);n.length<2;){ n="0"+n; }return n}function v(e){var t=null;if("string"!=typeof e&&u.throwError("invalid address",u.INVALID_ARGUMENT,{arg:"address",value:e}),e.match(/^(0x)?[0-9a-fA-F]{40}$/)){ "0x"!==e.substring(0,2)&&(e="0x"+e),t=l(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&u.throwError("bad address checksum",u.INVALID_ARGUMENT,{arg:"address",value:e}); }else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==p(e)&&u.throwError("bad icap checksum",u.INVALID_ARGUMENT,{arg:"address",value:e}),t=new i.default.BN(e.substring(4),36).toString(16);t.length<40;){ t="0"+t; }t=l("0x"+t);}else { u.throwError("invalid address",u.INVALID_ARGUMENT,{arg:"address",value:e}); }return t}r.getAddress=v,r.getIcapAddress=function(e){for(var t=new i.default.BN(v(e).substring(2),16).toString(36).toUpperCase();t.length<30;){ t="0"+t; }return "XE"+p("XE00"+t)+t},r.getContractAddress=function(e){if(!e.from){ throw new Error("missing from address"); }var t=e.nonce;return v("0x"+s.keccak256(a.encode([v(e.from),o.stripZeros(o.hexlify(t))])).substring(26))};},{"../errors":5,"./bytes":63,"./keccak256":70,"./rlp":75,"bn.js":9}],60:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("../utils/bytes");t.exports={decode:function(e){e=atob(e);for(var t=[],r=0;r<e.length;r++){ t.push(e.charCodeAt(r)); }return n.arrayify(t)},encode:function(e){e=n.arrayify(e);for(var t="",r=0;r<e.length;r++){ t+=String.fromCharCode(e[r]); }return btoa(t)}};},{"../utils/bytes":63}],61:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var l=e("./bytes"),n=e("./properties"),i=(o.prototype.encode=function(e){var t=l.arrayify(e);if(0===t.length){ return ""; }for(var r=[0],n=0;n<t.length;++n){for(var i=t[n],o=0;o<r.length;++o){ i+=r[o]<<8,r[o]=i%this.base,i=i/this.base|0; }for(;0<i;){ r.push(i%this.base),i=i/this.base|0; }}for(var s="",a=0;0===t[a]&&a<t.length-1;++a){ s+=this._leader; }for(var u=r.length-1;0<=u;--u){ s+=this.alphabet[r[u]]; }return s},o.prototype.decode=function(e){if("string"!=typeof e){ throw new TypeError("Expected String"); }var t=[];if(0===e.length){ return new Uint8Array(t); }t.push(0);for(var r=0;r<e.length;r++){var n=this._alphabetMap[e[r]];if(void 0===n){ throw new Error("Non-base"+this.base+" character"); }for(var i=n,o=0;o<t.length;++o){ i+=t[o]*this.base,t[o]=255&i,i>>=8; }for(;0<i;){ t.push(255&i),i>>=8; }}for(var s=0;e[s]===this._leader&&s<e.length-1;++s){ t.push(0); }return l.arrayify(new Uint8Array(t.reverse()))},o);function o(e){n.defineReadOnly(this,"alphabet",e),n.defineReadOnly(this,"base",e.length),n.defineReadOnly(this,"_alphabetMap",{}),n.defineReadOnly(this,"_leader",e.charAt(0));for(var t=0;t<e.length;t++){ this._alphabetMap[e.charAt(t)]=t; }}var s=new(r.BaseX=i)("abcdefghijklmnopqrstuvwxyz234567");r.Base32=s;var a=new i("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");r.Base58=a;},{"./bytes":63,"./properties":73}],62:[function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var o=n(e("bn.js")),s=e("./bytes"),a=e("./properties"),u=i(e("../errors")),l=new o.default.BN(-1);function h(e){var t=e.toString(16);return "-"===t[0]?t.length%2==0?"-0x0"+t.substring(1):"-0x"+t.substring(1):t.length%2==1?"0x0"+t:"0x"+t}function f(e){return d(y(e))}function c(e){return new p(h(e))}function d(e){var t=e._hex;return "-"===t[0]?new o.default.BN(t.substring(3),16).mul(l):new o.default.BN(t.substring(2),16)}var p=(v.prototype.fromTwos=function(e){return c(d(this).fromTwos(e))},v.prototype.toTwos=function(e){return c(d(this).toTwos(e))},v.prototype.abs=function(){return "-"===this._hex[0]?c(d(this).mul(l)):this},v.prototype.add=function(e){return c(d(this).add(f(e)))},v.prototype.sub=function(e){return c(d(this).sub(f(e)))},v.prototype.div=function(e){return y(e).isZero()&&u.throwError("division by zero",u.NUMERIC_FAULT,{operation:"divide",fault:"division by zero"}),c(d(this).div(f(e)))},v.prototype.mul=function(e){return c(d(this).mul(f(e)))},v.prototype.mod=function(e){return c(d(this).mod(f(e)))},v.prototype.pow=function(e){return c(d(this).pow(f(e)))},v.prototype.maskn=function(e){return c(d(this).maskn(e))},v.prototype.eq=function(e){return d(this).eq(f(e))},v.prototype.lt=function(e){return d(this).lt(f(e))},v.prototype.lte=function(e){return d(this).lte(f(e))},v.prototype.gt=function(e){return d(this).gt(f(e))},v.prototype.gte=function(e){return d(this).gte(f(e))},v.prototype.isZero=function(){return d(this).isZero()},v.prototype.toNumber=function(){try{return d(this).toNumber()}catch(e){u.throwError("overflow",u.NUMERIC_FAULT,{operation:"setValue",fault:"overflow",details:e.message});}return null},v.prototype.toString=function(){return d(this).toString(10)},v.prototype.toHexString=function(){return this._hex},v.isBigNumber=function(e){return a.isType(e,"BigNumber")},v);function v(e){if(u.checkNew(this,v),a.setType(this,"BigNumber"),"string"==typeof e){ s.isHexString(e)?("0x"==e&&(e="0x0"),a.defineReadOnly(this,"_hex",e)):"-"===e[0]&&s.isHexString(e.substring(1))?a.defineReadOnly(this,"_hex",e):e.match(/^-?[0-9]*$/)?(""==e&&(e="0"),a.defineReadOnly(this,"_hex",h(new o.default.BN(e)))):u.throwError("invalid BigNumber string value",u.INVALID_ARGUMENT,{arg:"value",value:e}); }else if("number"==typeof e){parseInt(String(e))!==e&&u.throwError("underflow",u.NUMERIC_FAULT,{operation:"setValue",fault:"underflow",value:e,outputValue:parseInt(String(e))});try{a.defineReadOnly(this,"_hex",h(new o.default.BN(e)));}catch(e){u.throwError("overflow",u.NUMERIC_FAULT,{operation:"setValue",fault:"overflow",details:e.message});}}else { e instanceof v?a.defineReadOnly(this,"_hex",e._hex):e.toHexString?a.defineReadOnly(this,"_hex",h(f(e.toHexString()))):e._hex&&s.isHexString(e._hex)?a.defineReadOnly(this,"_hex",e._hex):s.isArrayish(e)?a.defineReadOnly(this,"_hex",h(new o.default.BN(s.hexlify(e).substring(2),16))):u.throwError("invalid BigNumber value",u.INVALID_ARGUMENT,{arg:"value",value:e}); }}function y(e){return p.isBigNumber(e)?e:new p(e)}r.BigNumber=p,r.bigNumberify=y;},{"../errors":5,"./bytes":63,"./properties":73,"bn.js":9}],63:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s=n(e("../errors"));function a(e){return !!e.toHexString}function u(t){return t.slice||(t.slice=function(){var e=Array.prototype.slice.call(arguments);return u(new Uint8Array(Array.prototype.slice.apply(t,e)))}),t}function l(e){if(!e||parseInt(String(e.length))!=e.length||"string"==typeof e){ return !1; }for(var t=0;t<e.length;t++){var r=e[t];if(r<0||256<=r||parseInt(String(r))!=r){ return !1 }}return !0}function h(e){if(null==e&&s.throwError("cannot convert null value to array",s.INVALID_ARGUMENT,{arg:"value",value:e}),a(e)&&(e=e.toHexString()),"string"!=typeof e){ return l(e)?u(new Uint8Array(e)):(s.throwError("invalid arrayify value",null,{arg:"value",value:e,type:typeof e}),null); }var t=e.match(/^(0x)?[0-9a-fA-F]*$/);t||s.throwError("invalid hexidecimal string",s.INVALID_ARGUMENT,{arg:"value",value:e}),"0x"!==t[1]&&s.throwError("hex string must have 0x prefix",s.INVALID_ARGUMENT,{arg:"value",value:e}),(e=e.substring(2)).length%2&&(e="0"+e);for(var r=[],n=0;n<e.length;n+=2){ r.push(parseInt(e.substr(n,2),16)); }return u(new Uint8Array(r))}function i(e){for(var t=[],r=0,n=0;n<e.length;n++){var i=h(e[n]);t.push(i),r+=i.length;}var o=new Uint8Array(r),s=0;for(n=0;n<t.length;n++){ o.set(t[n],s),s+=t[n].length; }return u(o)}function o(e,t){return !("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/))&&(!t||e.length===2+2*t)}r.isHexable=a,r.isArrayish=l,r.arrayify=h,r.concat=i,r.stripZeros=function(e){var t=h(e);if(0===t.length){ return t; }for(var r=0;0===t[r];){ r++; }return r&&(t=t.slice(r)),t},r.padZeros=function(e,t){if(t<(e=h(e)).length){ throw new Error("cannot pad"); }var r=new Uint8Array(t);return r.set(e,t-e.length),u(r)},r.isHexString=o;var f="0123456789abcdef";function c(e){if(a(e)){ return e.toHexString(); }if("number"==typeof e){e<0&&s.throwError("cannot hexlify negative value",s.INVALID_ARGUMENT,{arg:"value",value:e}),9007199254740991<=e&&s.throwError("out-of-range",s.NUMERIC_FAULT,{operartion:"hexlify",fault:"out-of-safe-range"});for(var t="";e;){ t=f[15&e]+t,e=Math.floor(e/16); }return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("string"==typeof e){var r=e.match(/^(0x)?[0-9a-fA-F]*$/);return r||s.throwError("invalid hexidecimal string",s.INVALID_ARGUMENT,{arg:"value",value:e}),"0x"!==r[1]&&s.throwError("hex string must have 0x prefix",s.INVALID_ARGUMENT,{arg:"value",value:e}),e.length%2&&(e="0x0"+e.substring(2)),e}if(l(e)){for(var n=[],i=0;i<e.length;i++){var o=e[i];n.push(f[(240&o)>>4]+f[15&o]);}return "0x"+n.join("")}return s.throwError("invalid hexlify value",null,{arg:"value",value:e}),"never"}function d(e,t){for(o(e)||s.throwError("invalid hex string",s.INVALID_ARGUMENT,{arg:"value",value:e});e.length<2*t+2;){ e="0x0"+e.substring(2); }return e}function p(e){var t=0,r="0x",n="0x";if(function(e){return e&&null!=e.r&&null!=e.s}(e)){null==e.v&&null==e.recoveryParam&&s.throwError("at least on of recoveryParam or v must be specified",s.INVALID_ARGUMENT,{argument:"signature",value:e}),r=d(e.r,32),n=d(e.s,32),"string"==typeof(t=e.v)&&(t=parseInt(t,16));var i=e.recoveryParam;null==i&&null!=e.v&&(i=1-t%2),t=27+i;}else{var o=h(e);if(65!==o.length){ throw new Error("invalid signature"); }r=c(o.slice(0,32)),n=c(o.slice(32,64)),27!==(t=o[64])&&28!==t&&(t=27+t%2);}return {r:r,s:n,recoveryParam:t-27,v:t}}r.hexlify=c,r.hexDataLength=function(e){return o(e)&&e.length%2==0?(e.length-2)/2:null},r.hexDataSlice=function(e,t,r){return o(e)||s.throwError("invalid hex data",s.INVALID_ARGUMENT,{arg:"value",value:e}),e.length%2!=0&&s.throwError("hex data length must be even",s.INVALID_ARGUMENT,{arg:"value",value:e}),t=2+2*t,null!=r?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)},r.hexStripZeros=function(e){for(o(e)||s.throwError("invalid hex string",s.INVALID_ARGUMENT,{arg:"value",value:e});3<e.length&&"0x0"===e.substring(0,3);){ e="0x"+e.substring(3); }return e},r.hexZeroPad=d,r.splitSignature=p,r.joinSignature=function(e){return c(i([(e=p(e)).r,e.s,e.recoveryParam?"0x1c":"0x1b"]))};},{"../errors":5}],64:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=n(e("../errors")),o=e("./bytes"),s=e("./utf8"),a=e("./keccak256"),u=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),l=new RegExp("^((.*)\\.)?([^.]+)$"),h=new RegExp("^[a-z0-9.-]*$");r.namehash=function(e){"string"!=typeof e&&i.throwError("invalid address - "+String(e),i.INVALID_ARGUMENT,{argument:"name",value:e}),(e=e.toLowerCase()).match(h)||i.throwError("contains invalid UseSTD3ASCIIRules characters",i.INVALID_ARGUMENT,{argument:"name",value:e});for(var t=u;e.length;){var r=e.match(l),n=s.toUtf8Bytes(r[3]);t=a.keccak256(o.concat([t,a.keccak256(n)])),e=r[2]||"";}return o.hexlify(t)},r.id=function(e){return a.keccak256(s.toUtf8Bytes(e))},r.hashMessage=function(e){return a.keccak256(o.concat([s.toUtf8Bytes("\x19Ethereum Signed Message:\n"),s.toUtf8Bytes(String(e.length)),"string"==typeof e?s.toUtf8Bytes(e):e]))};},{"../errors":5,"./bytes":63,"./keccak256":70,"./utf8":84}],65:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var f=n(e("../errors")),c=e("../wordlists/lang-en"),a=e("./basex"),d=e("./bytes"),l=e("./bignumber"),i=e("./utf8"),o=e("./pbkdf2"),h=e("./hmac"),p=e("./properties"),v=e("./secp256k1"),y=e("./sha2"),m=l.bigNumberify("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),s=i.toUtf8Bytes("Bitcoin seed"),g=2147483648;function b(e){return (1<<e)-1<<8-e}function w(e){return d.hexZeroPad(d.hexlify(e),32)}function u(e){var t=d.hexDataSlice(y.sha256(y.sha256(e)),0,4);return a.Base58.encode(d.concat([e,t]))}var _={};r.defaultPath="m/44'/60'/0'/0/0";var M=(Object.defineProperty(A.prototype,"extendedKey",{get:function(){if(256<=this.depth){ throw new Error("Depth too large!"); }return u(d.concat([null!=this.privateKey?"0x0488ADE4":"0x0488B21E",d.hexlify(this.depth),this.parentFingerprint,d.hexZeroPad(d.hexlify(this.index),4),this.chainCode,null!=this.privateKey?d.concat(["0x00",this.privateKey]):this.publicKey]))},enumerable:!0,configurable:!0}),A.prototype.neuter=function(){return new A(_,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,null,this.path)},A.prototype._derive=function(e){if(4294967295<e){ throw new Error("invalid index - "+String(e)); }var t=this.path;t&&(t+="/"+(e&~g));var r=new Uint8Array(37);if(e&g){if(!this.privateKey){ throw new Error("cannot derive child of neutered node"); }r.set(d.arrayify(this.privateKey),1),t&&(t+="'");}else { r.set(d.arrayify(this.publicKey)); }for(var n=24;0<=n;n-=8){ r[33+(n>>3)]=e>>24-n&255; }var i=h.computeHmac(h.SupportedAlgorithms.sha512,this.chainCode,r),o=i.slice(0,32),s=i.slice(32),a=null,u=null;return this.privateKey?a=w(l.bigNumberify(o).add(this.privateKey).mod(m)):u=new v.KeyPair(d.hexlify(o))._addPoint(this.publicKey),new A(_,a,u,this.fingerprint,w(s),e,this.depth+1,this.mnemonic,t)},A.prototype.derivePath=function(e){var t=e.split("/");if(0===t.length||"m"===t[0]&&0!==this.depth){ throw new Error("invalid path - "+e); }"m"===t[0]&&t.shift();for(var r=this,n=0;n<t.length;n++){var i=t[n];if(i.match(/^[0-9]+'$/)){var o=parseInt(i.substring(0,i.length-1));if(g<=o){ throw new Error("invalid path index - "+i); }r=r._derive(g+o);}else{if(!i.match(/^[0-9]+$/)){ throw new Error("invlaid path component - "+i); }if(o=parseInt(i),g<=o){ throw new Error("invalid path index - "+i); }r=r._derive(o);}}return r},A.isHDNode=function(e){return p.isType(e,"HDNode")},A);function A(e,t,r,n,i,o,s,a,u){if(f.checkNew(this,A),e!==_){ throw new Error("HDNode constructor cannot be called directly"); }if(t){var l=new v.KeyPair(t);p.defineReadOnly(this,"privateKey",l.privateKey),p.defineReadOnly(this,"publicKey",l.compressedPublicKey);}else { p.defineReadOnly(this,"privateKey",null),p.defineReadOnly(this,"publicKey",d.hexlify(r)); }p.defineReadOnly(this,"parentFingerprint",n),p.defineReadOnly(this,"fingerprint",d.hexDataSlice(y.ripemd160(y.sha256(this.publicKey)),0,4)),p.defineReadOnly(this,"address",v.computeAddress(this.publicKey)),p.defineReadOnly(this,"chainCode",i),p.defineReadOnly(this,"index",o),p.defineReadOnly(this,"depth",s),p.defineReadOnly(this,"mnemonic",a),p.defineReadOnly(this,"path",u),p.setType(this,"HDNode");}function E(e,t){var r=d.arrayify(e);if(r.length<16||64<r.length){ throw new Error("invalid seed"); }var n=d.arrayify(h.computeHmac(h.SupportedAlgorithms.sha512,s,r));return new M(_,w(n.slice(0,32)),null,"0x00000000",w(n.slice(32)),0,0,t,"m")}function S(e,t){t=t||"";var r=i.toUtf8Bytes("mnemonic"+t,i.UnicodeNormalizationForm.NFKD);return d.hexlify(o.pbkdf2(i.toUtf8Bytes(e,i.UnicodeNormalizationForm.NFKD),r,2048,64,"sha512"))}function k(e,t){t=t||c.langEn,f.checkNormalize();var r=t.split(e);if(r.length%3!=0){ throw new Error("invalid mnemonic"); }for(var n=d.arrayify(new Uint8Array(Math.ceil(11*r.length/8))),i=0,o=0;o<r.length;o++){var s=t.getWordIndex(r[o].normalize("NFKD"));if(-1===s){ throw new Error("invalid mnemonic"); }for(var a=0;a<11;a++){ s&1<<10-a&&(n[i>>3]|=1<<7-i%8),i++; }}var u=32*r.length/3,l=b(r.length/3),h=d.arrayify(y.sha256(n.slice(0,u/8)))[0];if((h&=l)!=(n[n.length-1]&l)){ throw new Error("invalid checksum"); }return d.hexlify(n.slice(0,u/8))}function N(e,t){if((e=d.arrayify(e)).length%4!=0||e.length<16||32<e.length){ throw new Error("invalid entropy"); }for(var r=[0],n=11,i=0;i<e.length;i++){ 8<n?(r[r.length-1]<<=8,r[r.length-1]|=e[i],n-=8):(r[r.length-1]<<=n,r[r.length-1]|=e[i]>>8-n,r.push(e[i]&(1<<8-n)-1),n+=3); }var o=d.arrayify(y.sha256(e))[0],s=e.length/4;return o&=b(s),r[r.length-1]<<=s,r[r.length-1]|=o>>8-s,(t=t||c.langEn).join(r.map(function(e){return t.getWord(e)}))}r.HDNode=M,r.fromExtendedKey=function(e){var t=a.Base58.decode(e);82===t.length&&u(t.slice(0,78))===e||f.throwError("invalid extended key",f.INVALID_ARGUMENT,{argument:"extendedKey",value:"[REDACTED]"});var r=t[4],n=d.hexlify(t.slice(5,9)),i=parseInt(d.hexlify(t.slice(9,13)).substring(2),16),o=d.hexlify(t.slice(13,45)),s=t.slice(45,78);switch(d.hexlify(t.slice(0,4))){case"0x0488b21e":case"0x043587cf":return new M(_,null,d.hexlify(s),n,o,i,r,null,null);case"0x0488ade4":case"0x04358394":if(0!==s[0]){ break; }return new M(_,d.hexlify(s.slice(1)),null,n,o,i,r,null,null)}return f.throwError("invalid extended key",f.INVALID_ARGUMENT,{argument:"extendedKey",value:"[REDACTED]"})},r.fromMnemonic=function(e,t,r){return E(S(e=N(k(e,t),t),r),e)},r.fromSeed=function(e){return E(e,null)},r.mnemonicToSeed=S,r.mnemonicToEntropy=k,r.entropyToMnemonic=N,r.isValidMnemonic=function(e,t){try{return k(e,t),!0}catch(e){}return !1};},{"../errors":5,"../wordlists/lang-en":89,"./basex":61,"./bignumber":62,"./bytes":63,"./hmac":66,"./pbkdf2":72,"./properties":73,"./secp256k1":76,"./sha2":78,"./utf8":84}],66:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i,o,s=n(e("hash.js")),a=e("../utils/bytes"),u=n(e("../errors"));(o=i=r.SupportedAlgorithms||(r.SupportedAlgorithms={})).sha256="sha256",o.sha512="sha512",r.computeHmac=function(e,t,r){return i[e]||u.throwError("unsupported algorithm "+e,u.UNSUPPORTED_OPERATION,{operation:"hmac",algorithm:e}),a.arrayify(s.hmac(s[e],a.arrayify(t)).update(a.arrayify(r)).digest())};},{"../errors":5,"../utils/bytes":63,"hash.js":27}],67:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=e("./abi-coder");r.AbiCoder=i.AbiCoder,r.defaultAbiCoder=i.defaultAbiCoder,r.formatSignature=i.formatSignature,r.formatParamType=i.formatParamType,r.parseSignature=i.parseSignature,r.parseParamType=i.parseParamType;var o=e("./address");r.getAddress=o.getAddress,r.getContractAddress=o.getContractAddress,r.getIcapAddress=o.getIcapAddress;var s=n(e("./base64"));r.base64=s;var a=e("./bignumber");r.BigNumber=a.BigNumber,r.bigNumberify=a.bigNumberify;var u=e("./bytes");r.arrayify=u.arrayify,r.concat=u.concat,r.hexDataSlice=u.hexDataSlice,r.hexDataLength=u.hexDataLength,r.hexlify=u.hexlify,r.hexStripZeros=u.hexStripZeros,r.hexZeroPad=u.hexZeroPad,r.isHexString=u.isHexString,r.joinSignature=u.joinSignature,r.padZeros=u.padZeros,r.splitSignature=u.splitSignature,r.stripZeros=u.stripZeros;var l=e("./hash");r.hashMessage=l.hashMessage,r.id=l.id,r.namehash=l.namehash;var h=n(e("./hdnode"));r.HDNode=h;var f=e("./interface");r.Interface=f.Interface;var c=e("./json-wallet");r.getJsonWalletAddress=c.getJsonWalletAddress;var d=e("./keccak256");r.keccak256=d.keccak256;var p=e("./sha2");r.sha256=p.sha256;var v=e("./solidity");r.solidityKeccak256=v.keccak256,r.solidityPack=v.pack,r.soliditySha256=v.sha256;var y=e("./random-bytes");r.randomBytes=y.randomBytes;var m=e("./networks");r.getNetwork=m.getNetwork;var g=e("./properties");r.checkProperties=g.checkProperties,r.deepCopy=g.deepCopy,r.defineReadOnly=g.defineReadOnly,r.resolveProperties=g.resolveProperties,r.shallowCopy=g.shallowCopy;var b=n(e("./rlp"));r.RLP=b;var w=e("./secp256k1");r.computeAddress=w.computeAddress,r.computePublicKey=w.computePublicKey,r.recoverAddress=w.recoverAddress,r.recoverPublicKey=w.recoverPublicKey,r.verifyMessage=w.verifyMessage;var _=e("./signing-key");r.SigningKey=_.SigningKey;var M=e("./transaction");r.populateTransaction=M.populateTransaction;var A=e("./transaction");r.parseTransaction=A.parse,r.serializeTransaction=A.serialize;var E=e("./utf8");r.formatBytes32String=E.formatBytes32String,r.parseBytes32String=E.parseBytes32String,r.toUtf8Bytes=E.toUtf8Bytes,r.toUtf8String=E.toUtf8String;var S=e("./units");r.commify=S.commify,r.formatEther=S.formatEther,r.parseEther=S.parseEther,r.formatUnits=S.formatUnits,r.parseUnits=S.parseUnits;var k=e("./web");r.fetchJson=k.fetchJson,r.poll=k.poll;var N=e("./hmac");r.SupportedAlgorithms=N.SupportedAlgorithms;var P=e("./utf8");r.UnicodeNormalizationForm=P.UnicodeNormalizationForm;var x=e("./wordlist");r.Wordlist=x.Wordlist;},{"./abi-coder":58,"./address":59,"./base64":60,"./bignumber":62,"./bytes":63,"./hash":64,"./hdnode":65,"./hmac":66,"./interface":68,"./json-wallet":69,"./keccak256":70,"./networks":71,"./properties":73,"./random-bytes":74,"./rlp":75,"./secp256k1":76,"./sha2":78,"./signing-key":80,"./solidity":81,"./transaction":82,"./units":83,"./utf8":84,"./web":85,"./wordlist":86}],68:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});function s(e){for(var t in p.setType(this,"Description"),e){ p.defineReadOnly(this,t,p.deepCopy(e[t],!0)); }Object.freeze(this);}var a,u=e("./address"),f=e("./abi-coder"),l=e("./bignumber"),c=e("./bytes"),h=e("./hash"),d=e("./keccak256"),p=e("./properties"),v=o(e("../errors")),y=function(e){p.setType(this,"Indexed"),p.defineReadOnly(this,"hash",e);},m=(i(g,a=s),g.prototype.encode=function(e,t){c.isHexString(e)||v.throwError("invalid contract bytecode",v.INVALID_ARGUMENT,{arg:"bytecode",value:e}),v.checkArgumentCount(t.length,this.inputs.length," in Interface constructor");try{return e+f.defaultAbiCoder.encode(this.inputs,t).substring(2)}catch(e){v.throwError("invalid constructor argument",v.INVALID_ARGUMENT,{arg:e.arg,reason:e.reason,value:e.value});}return null},g);function g(){return null!==a&&a.apply(this,arguments)||this}var b,w=(i(_,b=s),_.prototype.encode=function(e){v.checkArgumentCount(e.length,this.inputs.length," in interface function "+this.name);try{return this.sighash+f.defaultAbiCoder.encode(this.inputs,e).substring(2)}catch(e){v.throwError("invalid input argument",v.INVALID_ARGUMENT,{arg:e.arg,reason:e.reason,value:e.value});}return null},_.prototype.decode=function(t){try{return f.defaultAbiCoder.decode(this.outputs,c.arrayify(t))}catch(e){v.throwError("invalid data for function output",v.INVALID_ARGUMENT,{arg:"data",errorArg:e.arg,errorValue:e.value,value:t,reason:e.reason});}},_);function _(){return null!==b&&b.apply(this,arguments)||this}var M,A=(i(E,M=s),E);function E(){return null!==M&&M.apply(this,arguments)||this}var S,k=(i(N,S=s),N.prototype.encodeTopics=function(e){var n=this;e.length>this.inputs.length&&v.throwError("too many arguments for "+this.name,v.UNEXPECTED_ARGUMENT,{maxCount:e.length,expectedCount:this.inputs.length});var i=[];for(this.anonymous||i.push(this.topic),e.forEach(function(e,t){var r=n.inputs[t];r.indexed?null==e?i.push(null):"string"===r.type?i.push(h.id(e)):"bytes"===r.type?i.push(d.keccak256(e)):-1!==r.type.indexOf("[")||"tuple"===r.type.substring(0,5)?v.throwError("filtering with tuples or arrays not implemented yet; bug us on GitHub",v.NOT_IMPLEMENTED,{operation:"filter(array|tuple)"}):("address"===r.type&&u.getAddress(e),i.push(c.hexZeroPad(c.hexlify(e),32).toLowerCase())):null!=e&&v.throwError("cannot filter non-indexed parameters; must be null",v.INVALID_ARGUMENT,{argument:r.name||t,value:e});});i.length&&null===i[i.length-1];){ i.pop(); }return i},N.prototype.decode=function(e,r){null==r||this.anonymous||(r=r.slice(1));var n=[],i=[],o=[];if(this.inputs.forEach(function(e,t){e.indexed?"string"===e.type||"bytes"===e.type||0<=e.type.indexOf("[")||"tuple"===e.type.substring(0,5)?(n.push({type:"bytes32",name:e.name||""}),o.push(!0)):(n.push(e),o.push(!1)):(i.push(e),o.push(!1));}),null!=r){ var s=f.defaultAbiCoder.decode(n,c.concat(r)); }var a=f.defaultAbiCoder.decode(i,c.arrayify(e)),u={},l=0,h=0;return this.inputs.forEach(function(e,t){e.indexed?null==r?u[t]=new y(null):o[t]?u[t]=new y(s[h++]):u[t]=s[h++]:u[t]=a[l++],e.name&&(u[e.name]=u[t]);}),u.length=this.inputs.length,new A(u)},N);function N(){return null!==S&&S.apply(this,arguments)||this}var P,x=(i(I,P=s),I);function I(){return null!==P&&P.apply(this,arguments)||this}var T,R=(i(O,T=s),O);function O(){return null!==T&&T.apply(this,arguments)||this}function C(e){switch(e.type){case"constructor":var t=new m({inputs:e.inputs,payable:null==e.payable||!!e.payable});this.deployFunction||(this.deployFunction=t);break;case"function":var r=f.formatSignature(e).replace(/tuple/g,""),n=h.id(r).substring(0,10);t=new w({inputs:e.inputs,outputs:e.outputs,gas:e.gas,payable:null==e.payable||!!e.payable,type:e.constant?"call":"transaction",name:e.name,signature:r,sighash:n});e.name&&(null==this.functions[e.name]?p.defineReadOnly(this.functions,e.name,t):v.warn("WARNING: Multiple definitions for "+e.name)),null==this.functions[t.signature]&&p.defineReadOnly(this.functions,t.signature,t);break;case"event":r=f.formatSignature(e).replace(/tuple/g,""),t=new k({name:e.name,signature:r,inputs:e.inputs,topic:h.id(r),anonymous:!!e.anonymous});e.name&&null==this.events[e.name]&&p.defineReadOnly(this.events,e.name,t),null==this.events[t.signature]&&p.defineReadOnly(this.events,t.signature,t);break;case"fallback":break;default:v.warn("WARNING: unsupported ABI type - "+e.type);}}var B=(D.prototype.parseTransaction=function(e){var t=e.data.substring(0,10).toLowerCase();for(var r in this.functions){ if(-1!==r.indexOf("(")){var n=this.functions[r];if(n.sighash===t){var i=f.defaultAbiCoder.decode(n.inputs,"0x"+e.data.substring(10));return new x({args:i,decode:n.decode,name:n.name,signature:n.signature,sighash:n.sighash,value:l.bigNumberify(e.value||"0")})}} }return null},D.prototype.parseLog=function(e){for(var t in this.events){ if(-1!==t.indexOf("(")){var r=this.events[t];if(!r.anonymous&&r.topic===e.topics[0]){ return new R({decode:r.decode,name:r.name,signature:r.signature,topic:r.topic,values:r.decode(e.data,e.topics)}) }} }return null},D.isInterface=function(e){return p.isType(e,"Interface")},D.isIndexed=function(e){return p.isType(e,"Indexed")},D);function D(t){if(v.checkNew(this,D),"string"==typeof t){try{t=JSON.parse(t);}catch(e){v.throwError("could not parse ABI JSON",v.INVALID_ARGUMENT,{arg:"abi",errorMessage:e.message,value:t});}if(!Array.isArray(t)){ return v.throwError("invalid abi",v.INVALID_ARGUMENT,{arg:"abi",value:t}),null }}p.defineReadOnly(this,"functions",{}),p.defineReadOnly(this,"events",{});var r=[];t.forEach(function(e){"string"==typeof e&&(e=f.parseSignature(e)),r.push(e);}),p.defineReadOnly(this,"abi",p.deepCopy(r,!0)),r.forEach(C,this),this.deployFunction||C.call(this,{type:"constructor",inputs:[]}),p.setType(this,"Interface");}r.Interface=B;},{"../errors":5,"./abi-coder":58,"./address":59,"./bignumber":62,"./bytes":63,"./hash":64,"./keccak256":70,"./properties":73}],69:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./address");function i(e){try{var t=JSON.parse(e);}catch(e){return !1}return t.encseed&&t.ethaddr}function o(e){try{var t=JSON.parse(e);}catch(e){return !1}return !(!t.version||parseInt(t.version)!==t.version||3!==parseInt(t.version))}r.isCrowdsaleWallet=i,r.isSecretStorageWallet=o,r.getJsonWalletAddress=function(e){if(i(e)){ try{return n.getAddress(JSON.parse(e).ethaddr)}catch(e){return null} }if(o(e)){ try{return n.getAddress(JSON.parse(e).address)}catch(e){return null} }return null};},{"./address":59}],70:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("js-sha3"),i=e("./bytes");r.keccak256=function(e){return "0x"+n.keccak_256(i.arrayify(e))};},{"./bytes":63,"js-sha3":40}],71:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var o=n(e("../errors"));function i(r){return function(e){var t=[];return e.InfuraProvider&&t.push(new e.InfuraProvider(r)),e.EtherscanProvider&&t.push(new e.EtherscanProvider(r)),0===t.length?null:e.FallbackProvider?new e.FallbackProvider(t):t[0]}}function s(t,r){return function(e){return e.JsonRpcProvider?new e.JsonRpcProvider(t,r):null}}var a={chainId:1,ensAddress:"0x314159265dd8dbb310642f98f50c066173c1259b",name:"homestead",_defaultProvider:i("homestead")},u={chainId:3,ensAddress:"0x112234455c3a32fd11230c42e7bccd4a84e02010",name:"ropsten",_defaultProvider:i("ropsten")},l={unspecified:{chainId:0,name:"unspecified"},homestead:a,mainnet:a,morden:{chainId:2,name:"morden"},ropsten:u,testnet:u,rinkeby:{chainId:4,ensAddress:"0xe7410170f87102DF0055eB195163A03B7F2Bff4A",name:"rinkeby",_defaultProvider:i("rinkeby")},goerli:{chainId:5,ensAddress:"0x112234455c3a32fd11230c42e7bccd4a84e02010",name:"goerli",_defaultProvider:i("goerli")},kovan:{chainId:42,name:"kovan",_defaultProvider:i("kovan")},classic:{chainId:61,name:"classic",_defaultProvider:s("https://web3.gastracker.io","classic")},classicTestnet:{chainId:62,name:"classicTestnet",_defaultProvider:s("https://web3.gastracker.io/morden","classicTestnet")}};r.getNetwork=function(e){if(null==e){ return null; }if("number"==typeof e){for(var t in l){var r=l[t];if(r.chainId===e){ return {name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null} }}return {chainId:e,name:"unknown"}}if("string"==typeof e){var n=l[e];return null==n?null:{name:n.name,chainId:n.chainId,ensAddress:n.ensAddress,_defaultProvider:n._defaultProvider||null}}var i=l[e.name];return i?(0!==e.chainId&&e.chainId!==i.chainId&&o.throwError("network chainId mismatch",o.INVALID_ARGUMENT,{arg:"network",value:e}),{name:e.name,chainId:i.chainId,ensAddress:e.ensAddress||i.ensAddress||null,_defaultProvider:e._defaultProvider||i._defaultProvider||null}):("number"!=typeof e.chainId&&o.throwError("invalid network chainId",o.INVALID_ARGUMENT,{arg:"network",value:e}),e)};},{"../errors":5}],72:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var m=e("../utils/bytes"),g=e("./hmac");r.pbkdf2=function(e,t,r,n,i){var o;e=m.arrayify(e),t=m.arrayify(t);var s,a,u=1,l=new Uint8Array(n),h=new Uint8Array(t.length+4);h.set(t);for(var f=1;f<=u;f++){h[t.length]=f>>24&255,h[t.length+1]=f>>16&255,h[t.length+2]=f>>8&255,h[t.length+3]=255&f;var c=g.computeHmac(i,e,h);o||(o=c.length,a=new Uint8Array(o),s=n-((u=Math.ceil(n/o))-1)*o),a.set(c);for(var d=1;d<r;d++){c=g.computeHmac(i,e,c);for(var p=0;p<o;p++){ a[p]^=c[p]; }}var v=(f-1)*o,y=f===u?s:o;l.set(m.arrayify(a).slice(0,y),v);}return m.arrayify(l)};},{"../utils/bytes":63,"./hmac":66}],73:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=n(e("../errors"));function s(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1});}function a(e,t){return e&&e._ethersType===t}r.defineReadOnly=s,r.setType=function(e,t){Object.defineProperty(e,"_ethersType",{configurable:!1,value:t,writable:!1});},r.isType=a,r.resolveProperties=function(r){var n={},i=[];return Object.keys(r).forEach(function(t){var e=r[t];e instanceof Promise?i.push(e.then(function(e){return n[t]=e,null})):n[t]=e;}),Promise.all(i).then(function(){return n})},r.checkProperties=function(t,r){t&&"object"==typeof t||i.throwError("invalid object",i.INVALID_ARGUMENT,{argument:"object",value:t}),Object.keys(t).forEach(function(e){r[e]||i.throwError("invalid object key - "+e,i.INVALID_ARGUMENT,{argument:"transaction",value:t,key:e});});},r.shallowCopy=function(e){var t={};for(var r in e){ t[r]=e[r]; }return t};var u={boolean:!0,number:!0,string:!0};r.deepCopy=function t(e,r){if(null==e||u[typeof e]){ return e; }if(Array.isArray(e)){var n=e.map(function(e){return t(e,r)});return r&&Object.freeze(n),n}if("object"==typeof e){if(a(e,"BigNumber")){ return e; }if(a(e,"Description")){ return e; }if(a(e,"Indexed")){ return e; }for(var i in n={},e){var o=e[i];void 0!==o&&s(n,i,t(o,r));}return r&&Object.freeze(n),n}if("function"==typeof e){ return e; }throw new Error("Cannot deepCopy "+typeof e)},r.inheritable=function t(r){return function(e){!function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}(e,r),s(e,"inherits",t(e));}};},{"../errors":5}],74:[function(o,e,s){(function(e){Object.defineProperty(s,"__esModule",{value:!0});var r=o("../utils/bytes"),t=o("../utils/properties"),n=e.crypto||e.msCrypto;function i(e){if(e<=0||1024<e||parseInt(String(e))!=e){ throw new Error("invalid length"); }var t=new Uint8Array(e);return n.getRandomValues(t),r.arrayify(t)}n&&n.getRandomValues||(console.log("WARNING: Missing strong random number source; using weak randomBytes"),n={getRandomValues:function(e){for(var t=0;t<20;t++){ for(var r=0;r<e.length;r++){ t?e[r]^=Math.trunc(256*Math.random()):e[r]=Math.trunc(256*Math.random()); } }return e},_weakCrypto:!0}),s.randomBytes=i,!0===n._weakCrypto&&t.defineReadOnly(i,"_weakCrypto",!0);}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{"../utils/bytes":63,"../utils/properties":73}],75:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var o=e("./bytes");function s(e){for(var t=[];e;){ t.unshift(255&e),e>>=8; }return t}function i(e,t,r){for(var n=0,i=0;i<r;i++){ n=256*n+e[t+i]; }return n}function a(e,t,r,n){for(var i=[];r<t+1+n;){var o=u(e,r);if(i.push(o.result),t+1+n<(r+=o.consumed)){ throw new Error("invalid rlp") }}return {consumed:1+n,result:i}}function u(e,t){if(0===e.length){ throw new Error("invalid rlp data"); }if(248<=e[t]){if(t+1+(r=e[t]-247)>e.length){ throw new Error("too short"); }if(t+1+r+(n=i(e,t+1,r))>e.length){ throw new Error("to short"); }return a(e,t,t+1+r,r+n)}if(192<=e[t]){if(t+1+(n=e[t]-192)>e.length){ throw new Error("invalid rlp data"); }return a(e,t,t+1,n)}if(184<=e[t]){var r;if(t+1+(r=e[t]-183)>e.length){ throw new Error("invalid rlp data"); }if(t+1+r+(n=i(e,t+1,r))>e.length){ throw new Error("invalid rlp data"); }return {consumed:1+r+n,result:o.hexlify(e.slice(t+1+r,t+1+r+n))}}if(128<=e[t]){var n;if(t+1+(n=e[t]-128)>e.length){ throw new Error("invlaid rlp data"); }return {consumed:1+n,result:o.hexlify(e.slice(t+1,t+1+n))}}return {consumed:1,result:o.hexlify(e[t])}}r.encode=function(e){return o.hexlify(function t(e){if(Array.isArray(e)){var r=[];return e.forEach(function(e){r=r.concat(t(e));}),r.length<=55?(r.unshift(192+r.length),r):((n=s(r.length)).unshift(247+n.length),n.concat(r))}var n,i=Array.prototype.slice.call(o.arrayify(e));return 1===i.length&&i[0]<=127?i:i.length<=55?(i.unshift(128+i.length),i):((n=s(i.length)).unshift(183+n.length),n.concat(i))}(e))},r.decode=function(e){var t=o.arrayify(e),r=u(t,0);if(r.consumed!==t.length){ throw new Error("invalid rlp data"); }return r.result};},{"./bytes":63}],76:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=e("elliptic"),o=e("./address"),s=e("./bytes"),a=e("./hash"),u=e("./keccak256"),l=e("./properties"),h=n(e("../errors")),f=null;function c(){return f=f||new i.ec("secp256k1")}var d=(p.prototype.sign=function(e){var t=c().keyFromPrivate(s.arrayify(this.privateKey)).sign(s.arrayify(e),{canonical:!0});return {recoveryParam:t.recoveryParam,r:s.hexZeroPad("0x"+t.r.toString(16),32),s:s.hexZeroPad("0x"+t.s.toString(16),32),v:27+t.recoveryParam}},p.prototype.computeSharedSecret=function(e){var t=c().keyFromPrivate(s.arrayify(this.privateKey)),r=c().keyFromPublic(s.arrayify(v(e)));return s.hexZeroPad("0x"+t.derive(r.getPublic()).toString(16),32)},p.prototype._addPoint=function(e){var t=c().keyFromPublic(s.arrayify(this.publicKey)),r=c().keyFromPublic(s.arrayify(e));return "0x"+t.pub.add(r.pub).encodeCompressed("hex")},p);function p(e){var t=c().keyFromPrivate(s.arrayify(e));l.defineReadOnly(this,"privateKey",s.hexlify(t.priv.toArray("be",32))),l.defineReadOnly(this,"publicKey","0x"+t.getPublic(!1,"hex")),l.defineReadOnly(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),l.defineReadOnly(this,"publicKeyBytes",t.getPublic().encode(null,!0));}function v(e,t){var r=s.arrayify(e);if(32!==r.length){ return 33===r.length?t?s.hexlify(r):"0x"+c().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?t?"0x"+c().keyFromPublic(r).getPublic(!0,"hex"):s.hexlify(r):(h.throwError("invalid public or private key",h.INVALID_ARGUMENT,{arg:"key",value:"[REDACTED]"}),null); }var n=new d(r);return t?n.compressedPublicKey:n.publicKey}function y(e){var t="0x"+v(e).slice(4);return o.getAddress("0x"+u.keccak256(t).substring(26))}function m(e,t){var r=s.splitSignature(t),n={r:s.arrayify(r.r),s:s.arrayify(r.s)};return "0x"+c().recoverPubKey(s.arrayify(e),n,r.recoveryParam).encode("hex",!1)}function g(e,t){return y(m(s.arrayify(e),t))}r.KeyPair=d,r.computePublicKey=v,r.computeAddress=y,r.recoverPublicKey=m,r.recoverAddress=g,r.verifyMessage=function(e,t){return g(a.hashMessage(e),t)};},{"../errors":5,"./address":59,"./bytes":63,"./hash":64,"./keccak256":70,"./properties":73,elliptic:12}],77:[function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var T=n(e("aes-js")),m=n(e("scrypt-js")),R=n(e("uuid")),O=e("./signing-key"),g=i(e("./hdnode")),b=e("./address"),C=e("./bytes"),w=e("./pbkdf2"),B=e("./keccak256"),p=e("./utf8"),D=e("./random-bytes");function _(e){return "string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),C.arrayify(e)}function L(e,t){for(e=String(e);e.length<t;){ e="0"+e; }return e}function U(e){return "string"==typeof e?p.toUtf8Bytes(e,p.UnicodeNormalizationForm.NFKC):C.arrayify(e)}function M(e,t){for(var r=e,n=t.toLowerCase().split("/"),i=0;i<n.length;i++){var o=null;for(var s in r){ if(s.toLowerCase()===n[i]){o=r[s];break} }if(null===o){ return null; }r=o;}return r}r.decryptCrowdsale=function(e,t){var r=JSON.parse(e);t=U(t);var n=b.getAddress(M(r,"ethaddr")),i=_(M(r,"encseed"));if(!i||i.length%16!=0){ throw new Error("invalid encseed"); }var o=w.pbkdf2(t,t,2e3,32,"sha256").slice(0,16),s=i.slice(0,16),a=i.slice(16),u=new T.default.ModeOfOperation.cbc(o,s),l=C.arrayify(u.decrypt(a));l=T.default.padding.pkcs7.strip(l);for(var h="",f=0;f<l.length;f++){ h+=String.fromCharCode(l[f]); }var c=p.toUtf8Bytes(h),d=new O.SigningKey(B.keccak256(c));if(d.address!==n){ throw new Error("corrupt crowdsale wallet"); }return d},r.decrypt=function(e,t,d){function p(e,t){var r=_(M(v,"crypto/ciphertext"));if(C.hexlify(function(e,t){return B.keccak256(C.concat([e,t]))}(e.slice(16,32),r)).substring(2)!==M(v,"crypto/mac").toLowerCase()){ return t(new Error("invalid password")),null; }var n=function(e,t){if("aes-128-ctr"!==M(v,"crypto/cipher")){ return null; }var r=_(M(v,"crypto/cipherparams/iv")),n=new T.default.Counter(r),i=new T.default.ModeOfOperation.ctr(e,n);return C.arrayify(i.decrypt(t))}(e.slice(0,16),r),i=e.slice(32,64);if(!n){ return t(new Error("unsupported cipher")),null; }var o=new O.SigningKey(n);if(o.address!==b.getAddress(v.address)){ return t(new Error("address mismatch")),null; }if("0.1"===M(v,"x-ethers/version")){var s=_(M(v,"x-ethers/mnemonicCiphertext")),a=_(M(v,"x-ethers/mnemonicCounter")),u=new T.default.Counter(a),l=new T.default.ModeOfOperation.ctr(i,u),h=M(v,"x-ethers/path")||g.defaultPath,f=C.arrayify(l.decrypt(s)),c=g.entropyToMnemonic(f),d=g.fromMnemonic(c).derivePath(h);if(d.privateKey!=C.hexlify(n)){ return t(new Error("mnemonic mismatch")),null; }o=new O.SigningKey(d);}return o}var v=JSON.parse(e),y=U(t);return new Promise(function(i,o){var e=M(v,"crypto/kdf");if(e&&"string"==typeof e){ if("scrypt"===e.toLowerCase()){var t=_(M(v,"crypto/kdfparams/salt")),r=parseInt(M(v,"crypto/kdfparams/n")),n=parseInt(M(v,"crypto/kdfparams/r")),s=parseInt(M(v,"crypto/kdfparams/p"));if(!r||!n||!s){ return void o(new Error("unsupported key-derivation function parameters")); }if(0!=(r&r-1)){ return void o(new Error("unsupported key-derivation function parameter value for N")); }if(32!==(l=parseInt(M(v,"crypto/kdfparams/dklen")))){ return void o(new Error("unsupported key-derivation derived-key length")); }d&&d(0),m.default(y,t,r,n,s,64,function(e,t,r){if(e){ e.progress=t,o(e); }else if(r){r=C.arrayify(r);var n=p(r,o);if(!n){ return; }d&&d(1),i(n);}else if(d){ return d(t) }});}else if("pbkdf2"===e.toLowerCase()){t=_(M(v,"crypto/kdfparams/salt"));var a=null,u=M(v,"crypto/kdfparams/prf");if("hmac-sha256"===u){ a="sha256"; }else{if("hmac-sha512"!==u){ return void o(new Error("unsupported prf")); }a="sha512";}var l,h=parseInt(M(v,"crypto/kdfparams/c"));if(32!==(l=parseInt(M(v,"crypto/kdfparams/dklen")))){ return void o(new Error("unsupported key-derivation derived-key length")); }var f=w.pbkdf2(y,t,h,l,a),c=p(f,o);if(!c){ return; }i(c);}else { o(new Error("unsupported key-derivation function")); } }else { o(new Error("unsupported key-derivation function")); }})},r.encrypt=function(e,t,r,w){"function"!=typeof r||w||(w=r,r={}),r=r||{};var _=null;if(32!==(_=O.SigningKey.isSigningKey(e)?C.arrayify(e.privateKey):C.arrayify(e)).length){ throw new Error("invalid private key"); }var n=U(t),M=null;if(r.entropy&&(M=C.arrayify(r.entropy)),r.mnemonic){ if(M){if(g.entropyToMnemonic(M)!==r.mnemonic){ throw new Error("entropy and mnemonic mismatch") }}else { M=C.arrayify(g.mnemonicToEntropy(r.mnemonic)); } }var A=r.path;M&&!A&&(A=g.defaultPath);var E=r.client;E=E||"ethers.js";var S=null;S=r.salt?C.arrayify(r.salt):D.randomBytes(32);var k=null;if(r.iv){if(16!==(k=C.arrayify(r.iv)).length){ throw new Error("invalid iv") }}else { k=D.randomBytes(16); }var N=null;if(r.uuid){if(16!==(N=C.arrayify(r.uuid)).length){ throw new Error("invalid uuid") }}else { N=D.randomBytes(16); }var P=1<<17,x=8,I=1;return r.scrypt&&(r.scrypt.N&&(P=r.scrypt.N),r.scrypt.r&&(x=r.scrypt.r),r.scrypt.p&&(I=r.scrypt.p)),new Promise(function(g,b){w&&w(0),m.default(n,S,P,x,I,64,function(e,t,r){if(e){ e.progress=t,b(e); }else if(r){var n=(r=C.arrayify(r)).slice(0,16),i=r.slice(16,32),o=r.slice(32,64),s=new O.SigningKey(_).address,a=new T.default.Counter(k),u=new T.default.ModeOfOperation.ctr(n,a),l=C.arrayify(u.encrypt(_)),h=B.keccak256(C.concat([i,l])),f={address:s.substring(2).toLowerCase(),id:R.default.v4({random:N}),version:3,Crypto:{cipher:"aes-128-ctr",cipherparams:{iv:C.hexlify(k).substring(2)},ciphertext:C.hexlify(l).substring(2),kdf:"scrypt",kdfparams:{salt:C.hexlify(S).substring(2),n:P,dklen:32,p:I,r:x},mac:h.substring(2)}};if(M){var c=D.randomBytes(16),d=new T.default.Counter(c),p=new T.default.ModeOfOperation.ctr(o,d),v=C.arrayify(p.encrypt(M)),y=new Date,m=y.getUTCFullYear()+"-"+L(y.getUTCMonth()+1,2)+"-"+L(y.getUTCDate(),2)+"T"+L(y.getUTCHours(),2)+"-"+L(y.getUTCMinutes(),2)+"-"+L(y.getUTCSeconds(),2)+".0Z";f["x-ethers"]={client:E,gethFilename:"UTC--"+m+"--"+f.address,mnemonicCounter:C.hexlify(c).substring(2),mnemonicCiphertext:C.hexlify(v).substring(2),path:A,version:"0.1"};}w&&w(1),g(JSON.stringify(f));}else if(w){ return w(t) }});})};},{"./address":59,"./bytes":63,"./hdnode":65,"./keccak256":70,"./pbkdf2":72,"./random-bytes":74,"./signing-key":80,"./utf8":84,"aes-js":8,"scrypt-js":43,uuid:47}],78:[function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var i=n(e("hash.js")),o=e("./bytes");r.ripemd160=function(e){return "0x"+i.default.ripemd160().update(o.arrayify(e)).digest("hex")},r.sha256=function(e){return "0x"+i.default.sha256().update(o.arrayify(e)).digest("hex")},r.sha512=function(e){return "0x"+i.default.sha512().update(o.arrayify(e)).digest("hex")};},{"./bytes":63,"hash.js":27}],79:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),e("setimmediate"),r.platform="browser";},{setimmediate:44}],80:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=e("./hdnode"),o=e("./bytes"),s=e("./properties"),a=e("./secp256k1"),u=n(e("../errors")),l=(h.prototype.signDigest=function(e){return this.keyPair.sign(e)},h.prototype.computeSharedSecret=function(e){return this.keyPair.computeSharedSecret(o.arrayify(e))},h.isSigningKey=function(e){return s.isType(e,"SigningKey")},h);function h(e){u.checkNew(this,h);var t=null;t=i.HDNode.isHDNode(e)?(s.defineReadOnly(this,"mnemonic",e.mnemonic),s.defineReadOnly(this,"path",e.path),o.arrayify(e.privateKey)):("string"==typeof e&&e.match(/^[0-9a-f]*$/i)&&64===e.length&&(e="0x"+e),o.arrayify(e));try{32!==t.length&&u.throwError("exactly 32 bytes required",u.INVALID_ARGUMENT,{arg:"privateKey",value:"[REDACTED]"});}catch(e){var r={arg:"privateKey",reason:e.reason,value:"[REDACTED]"};e.value&&("number"==typeof e.value.length&&(r.length=e.value.length),r.type=typeof e.value),u.throwError("invalid private key",e.code,r);}s.defineReadOnly(this,"privateKey",o.hexlify(t)),s.defineReadOnly(this,"keyPair",new a.KeyPair(t)),s.defineReadOnly(this,"publicKey",this.keyPair.publicKey),s.defineReadOnly(this,"address",a.computeAddress(this.keyPair.publicKey)),s.setType(this,"SigningKey");}r.SigningKey=l;},{"../errors":5,"./bytes":63,"./hdnode":65,"./properties":73,"./secp256k1":76}],81:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var u=e("./bignumber"),l=e("./bytes"),h=e("./utf8"),n=e("./keccak256"),i=e("./sha2"),f=new RegExp("^bytes([0-9]+)$"),c=new RegExp("^(u?int)([0-9]*)$"),d=new RegExp("^(.*)\\[([0-9]*)\\]$"),p="0000000000000000000000000000000000000000000000000000000000000000";function o(e,r){if(e.length!=r.length){ throw new Error("type/value count mismatch"); }var n=[];return e.forEach(function(e,t){n.push(function t(e,r,n){switch(e){case"address":return n?l.padZeros(r,32):l.arrayify(r);case"string":return h.toUtf8Bytes(r);case"bytes":return l.arrayify(r);case"bool":return r=r?"0x01":"0x00",n?l.padZeros(r,32):l.arrayify(r)}var i=e.match(c);if(i){if((o=parseInt(i[2]||"256"))%8!=0||0===o||256<o){ throw new Error("invalid number type - "+e); }return n&&(o=256),r=u.bigNumberify(r).toTwos(o),l.padZeros(r,o/8)}if(i=e.match(f)){var o=parseInt(i[1]);if(String(o)!=i[1]||0===o||32<o){ throw new Error("invalid number type - "+e); }if(l.arrayify(r).byteLength!==o){ throw new Error("invalid value for "+e); }return n?l.arrayify((r+p).substring(0,66)):r}if((i=e.match(d))&&Array.isArray(r)){var s=i[1];if(parseInt(i[2]||String(r.length))!=r.length){ throw new Error("invalid value for "+e); }var a=[];return r.forEach(function(e){a.push(t(s,e,!0));}),l.concat(a)}throw new Error("unknown type - "+e)}(e,r[t]));}),l.hexlify(l.concat(n))}r.pack=o,r.keccak256=function(e,t){return n.keccak256(o(e,t))},r.sha256=function(e,t){return i.sha256(o(e,t))};},{"./bignumber":62,"./bytes":63,"./keccak256":70,"./sha2":78,"./utf8":84}],82:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i=e("../constants"),s=n(e("../errors")),a=e("./secp256k1"),u=e("./address"),l=e("./bignumber"),h=e("./bytes"),f=e("./keccak256"),c=e("./properties"),d=n(e("./rlp")),o=e("../providers/abstract-provider");function p(e){return "0x"===e?i.Zero:l.bigNumberify(e)}var v=[{name:"nonce",maxLength:32},{name:"gasPrice",maxLength:32},{name:"gasLimit",maxLength:32},{name:"to",length:20},{name:"value",maxLength:32},{name:"data"}],y={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0};r.serialize=function(r,e){c.checkProperties(r,y);var n=[];v.forEach(function(e){var t=r[e.name]||[];t=h.arrayify(h.hexlify(t)),e.length&&t.length!==e.length&&0<t.length&&s.throwError("invalid length for "+e.name,s.INVALID_ARGUMENT,{arg:"transaction"+e.name,value:t}),e.maxLength&&(t=h.stripZeros(t)).length>e.maxLength&&s.throwError("invalid length for "+e.name,s.INVALID_ARGUMENT,{arg:"transaction"+e.name,value:t}),n.push(h.hexlify(t));}),null!=r.chainId&&0!==r.chainId&&(n.push(h.hexlify(r.chainId)),n.push("0x"),n.push("0x"));var t=d.encode(n);if(!e){ return t; }var i=h.splitSignature(e),o=27+i.recoveryParam;return 9===n.length&&(n.pop(),n.pop(),n.pop(),o+=2*r.chainId+8),n.push(h.hexlify(o)),n.push(h.stripZeros(h.arrayify(i.r))),n.push(h.stripZeros(h.arrayify(i.s))),d.encode(n)},r.parse=function(e){var t=d.decode(e);9!==t.length&&6!==t.length&&s.throwError("invalid raw transaction",s.INVALID_ARGUMENT,{arg:"rawTransactin",value:e});var r={nonce:p(t[0]).toNumber(),gasPrice:p(t[1]),gasLimit:p(t[2]),to:function(e){return "0x"===e?null:u.getAddress(e)}(t[3]),value:p(t[4]),data:t[5],chainId:0};if(6===t.length){ return r; }try{r.v=l.bigNumberify(t[6]).toNumber();}catch(e){return s.info(e),r}if(r.r=h.hexZeroPad(t[7],32),r.s=h.hexZeroPad(t[8],32),l.bigNumberify(r.r).isZero()&&l.bigNumberify(r.s).isZero()){ r.chainId=r.v,r.v=0; }else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);var n=r.v-27,i=t.slice(0,6);0!==r.chainId&&(i.push(h.hexlify(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);var o=f.keccak256(d.encode(i));try{r.from=a.recoverAddress(o,{r:h.hexlify(r.r),s:h.hexlify(r.s),recoveryParam:n});}catch(e){s.info(e);}r.hash=f.keccak256(e);}return r},r.populateTransaction=function(e,t,r){o.Provider.isProvider(t)||s.throwError("missing provider",s.INVALID_ARGUMENT,{argument:"provider",value:t}),c.checkProperties(e,y);var n=c.shallowCopy(e);if(null!=n.to&&(n.to=t.resolveName(n.to)),null==n.gasPrice&&(n.gasPrice=t.getGasPrice()),null==n.nonce&&(n.nonce=t.getTransactionCount(r)),null==n.gasLimit){var i=c.shallowCopy(n);i.from=r,n.gasLimit=t.estimateGas(i);}return null==n.chainId&&(n.chainId=t.getNetwork().then(function(e){return e.chainId})),c.resolveProperties(n)};},{"../constants":3,"../errors":5,"../providers/abstract-provider":49,"./address":59,"./bignumber":62,"./bytes":63,"./keccak256":70,"./properties":73,"./rlp":75,"./secp256k1":76}],83:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var i,h=e("../constants"),f=n(e("../errors")),c=e("./bignumber"),o={};function s(e){return {decimals:e.length-1,tenPower:c.bigNumberify(e)}}function d(e){var t=o[String(e).toLowerCase()];if(!t&&"number"==typeof e&&parseInt(String(e))==e&&0<=e&&e<=256){for(var r="1",n=0;n<e;n++){ r+="0"; }t=s(r);}return t||f.throwError("invalid unitType",f.INVALID_ARGUMENT,{argument:"name",value:e}),t}function a(e,t){var r=d(t),n=(e=c.bigNumberify(e)).lt(h.Zero);n&&(e=e.mul(h.NegativeOne));for(var i=e.mod(r.tenPower).toString();i.length<r.decimals;){ i="0"+i; }return i=i.match(/^([0-9]*[1-9]|0)(0*)/)[1],e=e.div(r.tenPower).toString()+"."+i,n&&(e="-"+e),e}function u(e,t){null==t&&(t=18);var r=d(t);if("string"==typeof e&&e.match(/^-?[0-9.,]+$/)||f.throwError("invalid decimal value",f.INVALID_ARGUMENT,{arg:"value",value:e}),0===r.decimals){ return c.bigNumberify(e); }var n="-"===e.substring(0,1);n&&(e=e.substring(1)),"."===e&&f.throwError("missing value",f.INVALID_ARGUMENT,{arg:"value",value:e});var i=e.split(".");2<i.length&&f.throwError("too many decimal points",f.INVALID_ARGUMENT,{arg:"value",value:e});var o=i[0],s=i[1];for(o=o||"0",(s=s||"0").length>r.decimals&&f.throwError("underflow occurred",f.NUMERIC_FAULT,{operation:"division",fault:"underflow"});s.length<r.decimals;){ s+="0"; }var a=c.bigNumberify(o),u=c.bigNumberify(s),l=a.mul(r.tenPower).add(u);return n&&(l=l.mul(h.NegativeOne)),l}i="1",["wei","kwei","Mwei","Gwei","szabo","finney","ether"].forEach(function(e){var t=s(i);o[e.toLowerCase()]=t,o[String(t.decimals)]=t,i+="000";}),r.commify=function(e){var t=String(e).split(".");(2<t.length||!t[0].match(/^-?[0-9]*$/)||t[1]&&!t[1].match(/^[0-9]*$/)||"."===e||"-."===e)&&f.throwError("invalid value",f.INVALID_ARGUMENT,{argument:"value",value:e});var r=t[0],n="";for("-"===r.substring(0,1)&&(n="-",r=r.substring(1));"0"===r.substring(0,1);){ r=r.substring(1); }""===r&&(r="0");var i="";2===t.length&&(i="."+(t[1]||"0"));for(var o=[];r.length;){if(r.length<=3){o.unshift(r);break}var s=r.length-3;o.unshift(r.substring(s)),r=r.substring(0,s);}return n+o.join(",")+i},r.formatUnits=a,r.parseUnits=u,r.formatEther=function(e){return a(e,18)},r.parseEther=function(e){return u(e,18)};},{"../constants":3,"../errors":5,"./bignumber":62}],84:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var s,n,i=e("../constants"),a=e("../errors"),h=e("./bytes");function o(e,t){void 0===t&&(t=s.current),t!=s.current&&(a.checkNormalize(),e=e.normalize(t));for(var r=[],n=0;n<e.length;n++){var i=e.charCodeAt(n);if(i<128){ r.push(i); }else if(i<2048){ r.push(i>>6|192),r.push(63&i|128); }else if(55296==(64512&i)){n++;var o=e.charCodeAt(n);if(n>=e.length||56320!=(64512&o)){ throw new Error("invalid utf-8 string"); }i=65536+((1023&i)<<10)+(1023&o),r.push(i>>18|240),r.push(i>>12&63|128),r.push(i>>6&63|128),r.push(63&i|128);}else { r.push(i>>12|224),r.push(i>>6&63|128),r.push(63&i|128); }}return h.arrayify(r)}function u(e,t){e=h.arrayify(e);for(var r="",n=0;n<e.length;){var i=e[n++];if(i>>7!=0){var o=null,s=null;if(192==(224&i)){ o=1,s=127; }else if(224==(240&i)){ o=2,s=2047; }else{if(240!=(248&i)){if(t){ continue; }if(128==(192&i)){ throw new Error("invalid utf8 byte sequence; unexpected continuation byte"); }throw new Error("invalid utf8 byte sequence; invalid prefix")}o=3,s=65535;}if(n+o>e.length){if(!t){ throw new Error("invalid utf8 byte sequence; too short"); }for(;n<e.length&&e[n]>>6==2;n++){ }}else{for(var a=i&(1<<8-o-1)-1,u=0;u<o;u++){var l=e[n];if(128!=(192&l)){a=null;break}a=a<<6|63&l,n++;}if(null!==a){ if(a<=s){if(!t){ throw new Error("invalid utf8 byte sequence; overlong") }}else if(1114111<a){if(!t){ throw new Error("invalid utf8 byte sequence; out-of-range") }}else if(55296<=a&&a<=57343){if(!t){ throw new Error("invalid utf8 byte sequence; utf-16 surrogate") }}else { a<=65535?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296+(a>>10&1023),56320+(1023&a))); } }else if(!t){ throw new Error("invalid utf8 byte sequence; invalid continuation byte") }}}else { r+=String.fromCharCode(i); }}return r}(n=s=r.UnicodeNormalizationForm||(r.UnicodeNormalizationForm={})).current="",n.NFC="NFC",n.NFD="NFD",n.NFKC="NFKC",n.NFKD="NFKD",r.toUtf8Bytes=o,r.toUtf8String=u,r.formatBytes32String=function(e){var t=o(e);if(31<t.length){ throw new Error("bytes32 string must be less than 32 bytes"); }return h.hexlify(h.concat([t,i.HashZero]).slice(0,32))},r.parseBytes32String=function(e){var t=h.arrayify(e);if(32!==t.length){ throw new Error("invalid bytes32 - not 32 bytes long"); }if(0!==t[31]){ throw new Error("invalid bytes32 string - no null terminator"); }for(var r=31;0===t[r-1];){ r--; }return u(t.slice(0,r))};},{"../constants":3,"../errors":5,"./bytes":63}],85:[function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var f=e("xmlhttprequest"),i=e("./base64"),o=e("./properties"),s=e("./utf8"),c=n(e("../errors"));r.fetchJson=function(e,a,u){var r={},l=null,h=12e4;if("string"==typeof e){ l=e; }else if("object"==typeof e){if(null==e.url&&c.throwError("missing URL",c.MISSING_ARGUMENT,{arg:"url"}),l=e.url,"number"==typeof e.timeout&&0<e.timeout&&(h=e.timeout),e.headers){ for(var t in e.headers){ r[t.toLowerCase()]={key:t,value:String(e.headers[t])}; } }if(null!=e.user&&null!=e.password){"https:"!==l.substring(0,6)&&!0!==e.allowInsecure&&c.throwError("basic authentication requires a secure https url",c.INVALID_ARGUMENT,{arg:"url",url:l,user:e.user,password:"[REDACTED]"});var n=e.user+":"+e.password;r.authorization={key:"Authorization",value:"Basic "+i.encode(s.toUtf8Bytes(n))};}}return new Promise(function(n,i){var o=new f.XMLHttpRequest,e=null;e=setTimeout(function(){null!=e&&(e=null,i(new Error("timeout")),setTimeout(function(){o.abort();},0));},h);function s(){null!=e&&(clearTimeout(e),e=null);}a?(o.open("POST",l,!0),r["content-type"]={key:"Content-Type",value:"application/json"}):o.open("GET",l,!0),Object.keys(r).forEach(function(e){var t=r[e];o.setRequestHeader(t.key,t.value);}),o.onreadystatechange=function(){if(4===o.readyState){if(200!=o.status){s();var e=new Error("invalid response - "+o.status);return e.statusCode=o.status,o.responseText&&(e.responseText=o.responseText),void i(e)}var t=null;try{t=JSON.parse(o.responseText);}catch(e){s();var r=new Error("invalid json response");return r.orginialError=e,r.responseText=o.responseText,null!=a&&(r.requestBody=a),r.url=l,void i(r)}if(u){ try{t=u(t);}catch(e){return s(),e.url=l,e.body=a,e.responseText=o.responseText,void i(e)} }s(),n(t);}},o.onerror=function(e){s(),i(e);};try{null!=a?o.send(a):o.send();}catch(e){s();var t=new Error("connection error");t.error=e,i(t);}})},r.poll=function(u,l){return l=l||{},null==(l=o.shallowCopy(l)).floor&&(l.floor=0),null==l.ceiling&&(l.ceiling=1e4),null==l.interval&&(l.interval=250),new Promise(function(n,t){var e=null,i=!1,o=function(){return !i&&(i=!0,e&&clearTimeout(e),!0)};l.timeout&&(e=setTimeout(function(){o()&&t(new Error("timeout"));},l.timeout));var s=l.fastRetry||null,a=0;!function r(){return u().then(function(e){if(void 0!==e){ o()&&n(e); }else if(l.onceBlock){ l.onceBlock.once("block",r); }else if(!i){a++;var t=l.interval*parseInt(String(Math.random()*Math.pow(2,a)));t<l.floor&&(t=l.floor),t>l.ceiling&&(t=l.ceiling),s&&(a--,t=s,s=null),setTimeout(r,t);}return null},function(e){o()&&t(e);})}();})};},{"../errors":5,"./base64":60,"./properties":73,"./utf8":84,xmlhttprequest:48}],86:[function(o,e,s){(function(e){Object.defineProperty(s,"__esModule",{value:!0});var i=o("../utils/hash"),t=o("../utils/properties");s.check=function(e){for(var t=[],r=0;r<2048;r++){var n=e.getWord(r);if(r!==e.getWordIndex(n)){ return "0x"; }t.push(n);}return i.id(t.join("\n")+"\n")};var r=(n.prototype.split=function(e){return e.toLowerCase().split(/ +/g)},n.prototype.join=function(e){return e.join(" ")},n);function n(e){t.defineReadOnly(this,"locale",e);}s.Wordlist=r,s.register=function(e,t){t=t||e.locale;};}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{"../utils/hash":64,"../utils/properties":73}],87:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__importStar||function(e){if(e&&e.__esModule){ return e; }var t={};if(null!=e){ for(var r in e){ Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]); } }return t.default=e,t};Object.defineProperty(r,"__esModule",{value:!0});var s,a=e("./utils/bytes"),u=e("./utils/hash"),l=e("./utils/hdnode"),h=e("./utils/json-wallet"),f=e("./utils/keccak256"),c=e("./utils/properties"),d=e("./utils/random-bytes"),p=o(e("./utils/secret-storage")),v=e("./utils/signing-key"),y=e("./utils/transaction"),m=e("./abstract-signer"),g=e("./providers/abstract-provider"),b=o(e("./errors")),w=(s=m.Signer,i(_,s),Object.defineProperty(_.prototype,"address",{get:function(){return this.signingKey.address},enumerable:!0,configurable:!0}),Object.defineProperty(_.prototype,"mnemonic",{get:function(){return this.signingKey.mnemonic},enumerable:!0,configurable:!0}),Object.defineProperty(_.prototype,"path",{get:function(){return this.signingKey.path},enumerable:!0,configurable:!0}),Object.defineProperty(_.prototype,"privateKey",{get:function(){return this.signingKey.privateKey},enumerable:!0,configurable:!0}),_.prototype.connect=function(e){return g.Provider.isProvider(e)||b.throwError("invalid provider",b.INVALID_ARGUMENT,{argument:"provider",value:e}),new _(this.signingKey,e)},_.prototype.getAddress=function(){return Promise.resolve(this.address)},_.prototype.sign=function(e){var n=this;return c.resolveProperties(e).then(function(e){var t=y.serialize(e),r=n.signingKey.signDigest(f.keccak256(t));return y.serialize(e,r)})},_.prototype.signMessage=function(e){return Promise.resolve(a.joinSignature(this.signingKey.signDigest(u.hashMessage(e))))},_.prototype.getBalance=function(e){if(!this.provider){ throw new Error("missing provider"); }return this.provider.getBalance(this.address,e)},_.prototype.getTransactionCount=function(e){if(!this.provider){ throw new Error("missing provider"); }return this.provider.getTransactionCount(this.address,e)},_.prototype.sendTransaction=function(e){var t=this;if(!this.provider){ throw new Error("missing provider"); }return null==e.nonce&&((e=c.shallowCopy(e)).nonce=this.getTransactionCount("pending")),y.populateTransaction(e,this.provider,this.address).then(function(e){return t.sign(e).then(function(e){return t.provider.sendTransaction(e)})})},_.prototype.encrypt=function(e,t,r){if("function"!=typeof t||r||(r=t,t={}),r&&"function"!=typeof r){ throw new Error("invalid callback"); }return t=t||{},this.mnemonic&&((t=c.shallowCopy(t)).mnemonic=this.mnemonic,t.path=this.path),p.encrypt(this.privateKey,e,t,r)},_.createRandom=function(e){var t=d.randomBytes(16);(e=e||{}).extraEntropy&&(t=a.arrayify(f.keccak256(a.concat([t,e.extraEntropy])).substring(0,34)));var r=l.entropyToMnemonic(t,e.locale);return _.fromMnemonic(r,e.path,e.locale)},_.fromEncryptedJson=function(e,t,r){if(h.isCrowdsaleWallet(e)){ try{r&&r(0);var n=p.decryptCrowdsale(e,t);return r&&r(1),Promise.resolve(new _(n))}catch(e){return Promise.reject(e)} }else if(h.isSecretStorageWallet(e)){ return p.decrypt(e,t,r).then(function(e){return new _(e)}); }return Promise.reject("invalid wallet JSON")},_.fromMnemonic=function(e,t,r){return t=t||l.defaultPath,new _(l.fromMnemonic(e,r).derivePath(t))},_);function _(e,t){var r=s.call(this)||this;return b.checkNew(r,_),v.SigningKey.isSigningKey(e)?c.defineReadOnly(r,"signingKey",e):c.defineReadOnly(r,"signingKey",new v.SigningKey(e)),c.defineReadOnly(r,"provider",t),r}r.Wallet=w;},{"./abstract-signer":2,"./errors":5,"./providers/abstract-provider":49,"./utils/bytes":63,"./utils/hash":64,"./utils/hdnode":65,"./utils/json-wallet":69,"./utils/keccak256":70,"./utils/properties":73,"./utils/random-bytes":74,"./utils/secret-storage":77,"./utils/signing-key":80,"./utils/transaction":82}],88:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("../wordlists/lang-en").langEn;r.en=n;},{"../wordlists/lang-en":89}],89:[function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t){ t.hasOwnProperty(r)&&(e[r]=t[r]); }},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(r,"__esModule",{value:!0});var o,s=e("../utils/wordlist"),a="AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo",u=null;function l(e){if(null==u&&(u=a.replace(/([A-Z])/g," $1").toLowerCase().substring(1).split(" "),"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"!==s.check(e))){ throw u=null,new Error("BIP39 Wordlist for en (English) FAILED") }}function h(){return o.call(this,"en")||this}var f=new(o=s.Wordlist,i(h,o),h.prototype.getWord=function(e){return l(this),u[e]},h.prototype.getWordIndex=function(e){return l(this),u.indexOf(e)},h);r.langEn=f,s.register(f);},{"../utils/wordlist":86}]},{},[7])(7)});

  });

  var ethers$1 = unwrapExports(ethers_min);

  var metamask_web3 = createCommonjsModule(function (module) {
  (function (factory) {
  	factory();
  }((function () {
  	var commonjsGlobal$$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

  	function createCommonjsModule$$1(fn, basedir, module) {
  		return module = {
  		  path: basedir,
  		  exports: {},
  		  require: function (path, base) {
  	      return commonjsRequire$$1(path, (base === undefined || base === null) ? module.path : base);
  	    }
  		}, fn(module, module.exports), module.exports;
  	}

  	function commonjsRequire$$1 () {
  		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  	}

  	var web3 = createCommonjsModule$$1(function (module) {
  	commonjsRequire$$1=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof commonjsRequire$$1&&commonjsRequire$$1;if(!f&&c){ return c(i,!0); }if(u){ return u(i,!0); }var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t);}return n[i].exports}for(var u="function"==typeof commonjsRequire$$1&&commonjsRequire$$1,i=0;i<t.length;i++){ o(t[i]); }return o}return r})()({1:[function(require,module,exports){
  	module.exports=[
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_owner",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "name",
  	    "outputs": [
  	      {
  	        "name": "o_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "owner",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "address"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "content",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "addr",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "address"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "reserve",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "subRegistrar",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "address"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_newOwner",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "transfer",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_registrar",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "setSubRegistrar",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [],
  	    "name": "Registrar",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_a",
  	        "type": "address"
  	      },
  	      {
  	        "name": "_primary",
  	        "type": "bool"
  	      }
  	    ],
  	    "name": "setAddress",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_content",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "setContent",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "disown",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "_winner",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "AuctionEnded",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "_bidder",
  	        "type": "address"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "_value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "NewBid",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "Changed",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": true,
  	        "name": "addr",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "PrimaryChanged",
  	    "type": "event"
  	  }
  	];

  	},{}],2:[function(require,module,exports){
  	module.exports=[
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "owner",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "address"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_refund",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "disown",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": true,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "addr",
  	    "outputs": [
  	      {
  	        "name": "",
  	        "type": "address"
  	      }
  	    ],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "reserve",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_newOwner",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "transfer",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "_name",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "_a",
  	        "type": "address"
  	      }
  	    ],
  	    "name": "setAddr",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "name",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "Changed",
  	    "type": "event"
  	  }
  	];

  	},{}],3:[function(require,module,exports){
  	module.exports=[
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "from",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "to",
  	        "type": "address"
  	      },
  	      {
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "transfer",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "from",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "to",
  	        "type": "address"
  	      },
  	      {
  	        "name": "indirectId",
  	        "type": "bytes32"
  	      },
  	      {
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "icapTransfer",
  	    "outputs": [],
  	    "type": "function"
  	  },
  	  {
  	    "constant": false,
  	    "inputs": [
  	      {
  	        "name": "to",
  	        "type": "bytes32"
  	      }
  	    ],
  	    "name": "deposit",
  	    "outputs": [],
  	    "payable": true,
  	    "type": "function"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "from",
  	        "type": "address"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "AnonymousDeposit",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "from",
  	        "type": "address"
  	      },
  	      {
  	        "indexed": true,
  	        "name": "to",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "Deposit",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "from",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": true,
  	        "name": "to",
  	        "type": "address"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "Transfer",
  	    "type": "event"
  	  },
  	  {
  	    "anonymous": false,
  	    "inputs": [
  	      {
  	        "indexed": true,
  	        "name": "from",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": true,
  	        "name": "to",
  	        "type": "address"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "indirectId",
  	        "type": "bytes32"
  	      },
  	      {
  	        "indexed": false,
  	        "name": "value",
  	        "type": "uint256"
  	      }
  	    ],
  	    "name": "IcapTransfer",
  	    "type": "event"
  	  }
  	];

  	},{}],4:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeAddress is a prootype that represents address type
  	 * It matches:
  	 * address
  	 * address[]
  	 * address[4]
  	 * address[][]
  	 * address[3][]
  	 * address[][6][], ...
  	 */
  	var SolidityTypeAddress = function () {
  	    this._inputFormatter = f.formatInputInt;
  	    this._outputFormatter = f.formatOutputAddress;
  	};

  	SolidityTypeAddress.prototype = new SolidityType({});
  	SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

  	SolidityTypeAddress.prototype.isType = function (name) {
  	    return !!name.match(/address(\[([0-9]*)\])?/);
  	};

  	module.exports = SolidityTypeAddress;

  	},{"./formatters":9,"./type":14}],5:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeBool is a prootype that represents bool type
  	 * It matches:
  	 * bool
  	 * bool[]
  	 * bool[4]
  	 * bool[][]
  	 * bool[3][]
  	 * bool[][6][], ...
  	 */
  	var SolidityTypeBool = function () {
  	    this._inputFormatter = f.formatInputBool;
  	    this._outputFormatter = f.formatOutputBool;
  	};

  	SolidityTypeBool.prototype = new SolidityType({});
  	SolidityTypeBool.prototype.constructor = SolidityTypeBool;

  	SolidityTypeBool.prototype.isType = function (name) {
  	    return !!name.match(/^bool(\[([0-9]*)\])*$/);
  	};

  	module.exports = SolidityTypeBool;

  	},{"./formatters":9,"./type":14}],6:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeBytes is a prototype that represents the bytes type.
  	 * It matches:
  	 * bytes
  	 * bytes[]
  	 * bytes[4]
  	 * bytes[][]
  	 * bytes[3][]
  	 * bytes[][6][], ...
  	 * bytes32
  	 * bytes8[4]
  	 * bytes[3][]
  	 */
  	var SolidityTypeBytes = function () {
  	    this._inputFormatter = f.formatInputBytes;
  	    this._outputFormatter = f.formatOutputBytes;
  	};

  	SolidityTypeBytes.prototype = new SolidityType({});
  	SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

  	SolidityTypeBytes.prototype.isType = function (name) {
  	    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
  	};

  	module.exports = SolidityTypeBytes;

  	},{"./formatters":9,"./type":14}],7:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file coder.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var f = require('./formatters');

  	var SolidityTypeAddress = require('./address');
  	var SolidityTypeBool = require('./bool');
  	var SolidityTypeInt = require('./int');
  	var SolidityTypeUInt = require('./uint');
  	var SolidityTypeDynamicBytes = require('./dynamicbytes');
  	var SolidityTypeString = require('./string');
  	var SolidityTypeReal = require('./real');
  	var SolidityTypeUReal = require('./ureal');
  	var SolidityTypeBytes = require('./bytes');

  	var isDynamic = function (solidityType, type) {
  	   return solidityType.isDynamicType(type) ||
  	          solidityType.isDynamicArray(type);
  	};

  	/**
  	 * SolidityCoder prototype should be used to encode/decode solidity params of any type
  	 */
  	var SolidityCoder = function (types) {
  	    this._types = types;
  	};

  	/**
  	 * This method should be used to transform type to SolidityType
  	 *
  	 * @method _requireType
  	 * @param {String} type
  	 * @returns {SolidityType}
  	 * @throws {Error} throws if no matching type is found
  	 */
  	SolidityCoder.prototype._requireType = function (type) {
  	    var solidityType = this._types.filter(function (t) {
  	        return t.isType(type);
  	    })[0];

  	    if (!solidityType) {
  	        throw Error('invalid solidity type!: ' + type);
  	    }

  	    return solidityType;
  	};

  	/**
  	 * Should be used to encode plain param
  	 *
  	 * @method encodeParam
  	 * @param {String} type
  	 * @param {Object} plain param
  	 * @return {String} encoded plain param
  	 */
  	SolidityCoder.prototype.encodeParam = function (type, param) {
  	    return this.encodeParams([type], [param]);
  	};

  	/**
  	 * Should be used to encode list of params
  	 *
  	 * @method encodeParams
  	 * @param {Array} types
  	 * @param {Array} params
  	 * @return {String} encoded list of params
  	 */
  	SolidityCoder.prototype.encodeParams = function (types, params) {
  	    var solidityTypes = this.getSolidityTypes(types);

  	    var encodeds = solidityTypes.map(function (solidityType, index) {
  	        return solidityType.encode(params[index], types[index]);
  	    });

  	    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
  	        var staticPartLength = solidityType.staticPartLength(types[index]);
  	        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

  	        return acc + (isDynamic(solidityTypes[index], types[index]) ?
  	            32 :
  	            roundedStaticPartLength);
  	    }, 0);

  	    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);

  	    return result;
  	};

  	SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
  	    var result = "";
  	    var self = this;

  	    types.forEach(function (type, i) {
  	        if (isDynamic(solidityTypes[i], types[i])) {
  	            result += f.formatInputInt(dynamicOffset).encode();
  	            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
  	            dynamicOffset += e.length / 2;
  	        } else {
  	            // don't add length to dynamicOffset. it's already counted
  	            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
  	        }

  	        // TODO: figure out nested arrays
  	    });

  	    types.forEach(function (type, i) {
  	        if (isDynamic(solidityTypes[i], types[i])) {
  	            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
  	            dynamicOffset += e.length / 2;
  	            result += e;
  	        }
  	    });
  	    return result;
  	};

  	SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {
  	    /* jshint maxcomplexity: 17 */
  	    /* jshint maxdepth: 5 */

  	    var self = this;
  	    var encodingMode={dynamic:1,static:2,other:3};

  	    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));

  	    if(mode !== encodingMode.other){
  	        var nestedName = solidityType.nestedName(type);
  	        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
  	        var result = (mode === encodingMode.dynamic ? encoded[0] : '');

  	        if (solidityType.isDynamicArray(nestedName)) {
  	            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);

  	            for (var i = 0; i < encoded.length; i++) {
  	                // calculate length of previous item
  	                if(mode === encodingMode.dynamic){
  	                    previousLength += +(encoded[i - 1])[0] || 0;
  	                }
  	                else if(mode === encodingMode.static){
  	                    previousLength += +(encoded[i - 1] || [])[0] || 0;
  	                }
  	                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
  	            }
  	        }

  	        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);
  	        for (var c = 0; c < len; c++) {
  	            var additionalOffset = result / 2;
  	            if(mode === encodingMode.dynamic){
  	                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);
  	            }
  	            else if(mode === encodingMode.static){
  	                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);
  	            }
  	        }

  	        return result;
  	    }

  	    return encoded;
  	};


  	/**
  	 * Should be used to decode bytes to plain param
  	 *
  	 * @method decodeParam
  	 * @param {String} type
  	 * @param {String} bytes
  	 * @return {Object} plain param
  	 */
  	SolidityCoder.prototype.decodeParam = function (type, bytes) {
  	    return this.decodeParams([type], bytes)[0];
  	};

  	/**
  	 * Should be used to decode list of params
  	 *
  	 * @method decodeParam
  	 * @param {Array} types
  	 * @param {String} bytes
  	 * @return {Array} array of plain params
  	 */
  	SolidityCoder.prototype.decodeParams = function (types, bytes) {
  	    var solidityTypes = this.getSolidityTypes(types);
  	    var offsets = this.getOffsets(types, solidityTypes);

  	    return solidityTypes.map(function (solidityType, index) {
  	        return solidityType.decode(bytes, offsets[index],  types[index], index);
  	    });
  	};

  	SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {
  	    var lengths =  solidityTypes.map(function (solidityType, index) {
  	        return solidityType.staticPartLength(types[index]);
  	    });

  	    for (var i = 1; i < lengths.length; i++) {
  	         // sum with length of previous element
  	        lengths[i] += lengths[i - 1];
  	    }

  	    return lengths.map(function (length, index) {
  	        // remove the current length, so the length is sum of previous elements
  	        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
  	        return length - staticPartLength;
  	    });
  	};

  	SolidityCoder.prototype.getSolidityTypes = function (types) {
  	    var self = this;
  	    return types.map(function (type) {
  	        return self._requireType(type);
  	    });
  	};

  	var coder = new SolidityCoder([
  	    new SolidityTypeAddress(),
  	    new SolidityTypeBool(),
  	    new SolidityTypeInt(),
  	    new SolidityTypeUInt(),
  	    new SolidityTypeDynamicBytes(),
  	    new SolidityTypeBytes(),
  	    new SolidityTypeString(),
  	    new SolidityTypeReal(),
  	    new SolidityTypeUReal()
  	]);

  	module.exports = coder;

  	},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	var SolidityTypeDynamicBytes = function () {
  	    this._inputFormatter = f.formatInputDynamicBytes;
  	    this._outputFormatter = f.formatOutputDynamicBytes;
  	};

  	SolidityTypeDynamicBytes.prototype = new SolidityType({});
  	SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

  	SolidityTypeDynamicBytes.prototype.isType = function (name) {
  	    return !!name.match(/^bytes(\[([0-9]*)\])*$/);
  	};

  	SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
  	    return true;
  	};

  	module.exports = SolidityTypeDynamicBytes;

  	},{"./formatters":9,"./type":14}],9:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file formatters.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var BigNumber = require('bignumber.js');
  	var utils = require('../utils/utils');
  	var c = require('../utils/config');
  	var SolidityParam = require('./param');


  	/**
  	 * Formats input value to byte representation of int
  	 * If value is negative, return it's two's complement
  	 * If the value is floating point, round it down
  	 *
  	 * @method formatInputInt
  	 * @param {String|Number|BigNumber} value that needs to be formatted
  	 * @returns {SolidityParam}
  	 */
  	var formatInputInt = function (value) {
  	    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);
  	    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);
  	    return new SolidityParam(result);
  	};

  	/**
  	 * Formats input bytes
  	 *
  	 * @method formatInputBytes
  	 * @param {String}
  	 * @returns {SolidityParam}
  	 */
  	var formatInputBytes = function (value) {
  	    var result = utils.toHex(value).substr(2);
  	    var l = Math.floor((result.length + 63) / 64);
  	    result = utils.padRight(result, l * 64);
  	    return new SolidityParam(result);
  	};

  	/**
  	 * Formats input bytes
  	 *
  	 * @method formatDynamicInputBytes
  	 * @param {String}
  	 * @returns {SolidityParam}
  	 */
  	var formatInputDynamicBytes = function (value) {
  	    var result = utils.toHex(value).substr(2);
  	    var length = result.length / 2;
  	    var l = Math.floor((result.length + 63) / 64);
  	    result = utils.padRight(result, l * 64);
  	    return new SolidityParam(formatInputInt(length).value + result);
  	};

  	/**
  	 * Formats input value to byte representation of string
  	 *
  	 * @method formatInputString
  	 * @param {String}
  	 * @returns {SolidityParam}
  	 */
  	var formatInputString = function (value) {
  	    var result = utils.fromUtf8(value).substr(2);
  	    var length = result.length / 2;
  	    var l = Math.floor((result.length + 63) / 64);
  	    result = utils.padRight(result, l * 64);
  	    return new SolidityParam(formatInputInt(length).value + result);
  	};

  	/**
  	 * Formats input value to byte representation of bool
  	 *
  	 * @method formatInputBool
  	 * @param {Boolean}
  	 * @returns {SolidityParam}
  	 */
  	var formatInputBool = function (value) {
  	    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');
  	    return new SolidityParam(result);
  	};

  	/**
  	 * Formats input value to byte representation of real
  	 * Values are multiplied by 2^m and encoded as integers
  	 *
  	 * @method formatInputReal
  	 * @param {String|Number|BigNumber}
  	 * @returns {SolidityParam}
  	 */
  	var formatInputReal = function (value) {
  	    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
  	};

  	/**
  	 * Check if input value is negative
  	 *
  	 * @method signedIsNegative
  	 * @param {String} value is hex format
  	 * @returns {Boolean} true if it is negative, otherwise false
  	 */
  	var signedIsNegative = function (value) {
  	    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
  	};

  	/**
  	 * Formats right-aligned output bytes to int
  	 *
  	 * @method formatOutputInt
  	 * @param {SolidityParam} param
  	 * @returns {BigNumber} right-aligned output bytes formatted to big number
  	 */
  	var formatOutputInt = function (param) {
  	    var value = param.staticPart() || "0";

  	    // check if it's negative number
  	    // it it is, return two's complement
  	    if (signedIsNegative(value)) {
  	        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
  	    }
  	    return new BigNumber(value, 16);
  	};

  	/**
  	 * Formats right-aligned output bytes to uint
  	 *
  	 * @method formatOutputUInt
  	 * @param {SolidityParam}
  	 * @returns {BigNumeber} right-aligned output bytes formatted to uint
  	 */
  	var formatOutputUInt = function (param) {
  	    var value = param.staticPart() || "0";
  	    return new BigNumber(value, 16);
  	};

  	/**
  	 * Formats right-aligned output bytes to real
  	 *
  	 * @method formatOutputReal
  	 * @param {SolidityParam}
  	 * @returns {BigNumber} input bytes formatted to real
  	 */
  	var formatOutputReal = function (param) {
  	    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));
  	};

  	/**
  	 * Formats right-aligned output bytes to ureal
  	 *
  	 * @method formatOutputUReal
  	 * @param {SolidityParam}
  	 * @returns {BigNumber} input bytes formatted to ureal
  	 */
  	var formatOutputUReal = function (param) {
  	    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));
  	};

  	/**
  	 * Should be used to format output bool
  	 *
  	 * @method formatOutputBool
  	 * @param {SolidityParam}
  	 * @returns {Boolean} right-aligned input bytes formatted to bool
  	 */
  	var formatOutputBool = function (param) {
  	    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;
  	};

  	/**
  	 * Should be used to format output bytes
  	 *
  	 * @method formatOutputBytes
  	 * @param {SolidityParam} left-aligned hex representation of string
  	 * @param {String} name type name
  	 * @returns {String} hex string
  	 */
  	var formatOutputBytes = function (param, name) {
  	    var matches = name.match(/^bytes([0-9]*)/);
  	    var size = parseInt(matches[1]);
  	    return '0x' + param.staticPart().slice(0, 2 * size);
  	};

  	/**
  	 * Should be used to format output bytes
  	 *
  	 * @method formatOutputDynamicBytes
  	 * @param {SolidityParam} left-aligned hex representation of string
  	 * @returns {String} hex string
  	 */
  	var formatOutputDynamicBytes = function (param) {
  	    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
  	    return '0x' + param.dynamicPart().substr(64, length);
  	};

  	/**
  	 * Should be used to format output string
  	 *
  	 * @method formatOutputString
  	 * @param {SolidityParam} left-aligned hex representation of string
  	 * @returns {String} ascii string
  	 */
  	var formatOutputString = function (param) {
  	    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
  	    return utils.toUtf8(param.dynamicPart().substr(64, length));
  	};

  	/**
  	 * Should be used to format output address
  	 *
  	 * @method formatOutputAddress
  	 * @param {SolidityParam} right-aligned input bytes
  	 * @returns {String} address
  	 */
  	var formatOutputAddress = function (param) {
  	    var value = param.staticPart();
  	    return "0x" + value.slice(value.length - 40, value.length);
  	};

  	module.exports = {
  	    formatInputInt: formatInputInt,
  	    formatInputBytes: formatInputBytes,
  	    formatInputDynamicBytes: formatInputDynamicBytes,
  	    formatInputString: formatInputString,
  	    formatInputBool: formatInputBool,
  	    formatInputReal: formatInputReal,
  	    formatOutputInt: formatOutputInt,
  	    formatOutputUInt: formatOutputUInt,
  	    formatOutputReal: formatOutputReal,
  	    formatOutputUReal: formatOutputUReal,
  	    formatOutputBool: formatOutputBool,
  	    formatOutputBytes: formatOutputBytes,
  	    formatOutputDynamicBytes: formatOutputDynamicBytes,
  	    formatOutputString: formatOutputString,
  	    formatOutputAddress: formatOutputAddress
  	};

  	},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeInt is a prootype that represents int type
  	 * It matches:
  	 * int
  	 * int[]
  	 * int[4]
  	 * int[][]
  	 * int[3][]
  	 * int[][6][], ...
  	 * int32
  	 * int64[]
  	 * int8[4]
  	 * int256[][]
  	 * int[3][]
  	 * int64[][6][], ...
  	 */
  	var SolidityTypeInt = function () {
  	    this._inputFormatter = f.formatInputInt;
  	    this._outputFormatter = f.formatOutputInt;
  	};

  	SolidityTypeInt.prototype = new SolidityType({});
  	SolidityTypeInt.prototype.constructor = SolidityTypeInt;

  	SolidityTypeInt.prototype.isType = function (name) {
  	    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
  	};

  	module.exports = SolidityTypeInt;

  	},{"./formatters":9,"./type":14}],11:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file param.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var utils = require('../utils/utils');

  	/**
  	 * SolidityParam object prototype.
  	 * Should be used when encoding, decoding solidity bytes
  	 */
  	var SolidityParam = function (value, offset) {
  	    this.value = value || '';
  	    this.offset = offset; // offset in bytes
  	};

  	/**
  	 * This method should be used to get length of params's dynamic part
  	 * 
  	 * @method dynamicPartLength
  	 * @returns {Number} length of dynamic part (in bytes)
  	 */
  	SolidityParam.prototype.dynamicPartLength = function () {
  	    return this.dynamicPart().length / 2;
  	};

  	/**
  	 * This method should be used to create copy of solidity param with different offset
  	 *
  	 * @method withOffset
  	 * @param {Number} offset length in bytes
  	 * @returns {SolidityParam} new solidity param with applied offset
  	 */
  	SolidityParam.prototype.withOffset = function (offset) {
  	    return new SolidityParam(this.value, offset);
  	};

  	/**
  	 * This method should be used to combine solidity params together
  	 * eg. when appending an array
  	 *
  	 * @method combine
  	 * @param {SolidityParam} param with which we should combine
  	 * @param {SolidityParam} result of combination
  	 */
  	SolidityParam.prototype.combine = function (param) {
  	    return new SolidityParam(this.value + param.value); 
  	};

  	/**
  	 * This method should be called to check if param has dynamic size.
  	 * If it has, it returns true, otherwise false
  	 *
  	 * @method isDynamic
  	 * @returns {Boolean}
  	 */
  	SolidityParam.prototype.isDynamic = function () {
  	    return this.offset !== undefined;
  	};

  	/**
  	 * This method should be called to transform offset to bytes
  	 *
  	 * @method offsetAsBytes
  	 * @returns {String} bytes representation of offset
  	 */
  	SolidityParam.prototype.offsetAsBytes = function () {
  	    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);
  	};

  	/**
  	 * This method should be called to get static part of param
  	 *
  	 * @method staticPart
  	 * @returns {String} offset if it is a dynamic param, otherwise value
  	 */
  	SolidityParam.prototype.staticPart = function () {
  	    if (!this.isDynamic()) {
  	        return this.value; 
  	    } 
  	    return this.offsetAsBytes();
  	};

  	/**
  	 * This method should be called to get dynamic part of param
  	 *
  	 * @method dynamicPart
  	 * @returns {String} returns a value if it is a dynamic param, otherwise empty string
  	 */
  	SolidityParam.prototype.dynamicPart = function () {
  	    return this.isDynamic() ? this.value : '';
  	};

  	/**
  	 * This method should be called to encode param
  	 *
  	 * @method encode
  	 * @returns {String}
  	 */
  	SolidityParam.prototype.encode = function () {
  	    return this.staticPart() + this.dynamicPart();
  	};

  	/**
  	 * This method should be called to encode array of params
  	 *
  	 * @method encodeList
  	 * @param {Array[SolidityParam]} params
  	 * @returns {String}
  	 */
  	SolidityParam.encodeList = function (params) {
  	    
  	    // updating offsets
  	    var totalOffset = params.length * 32;
  	    var offsetParams = params.map(function (param) {
  	        if (!param.isDynamic()) {
  	            return param;
  	        }
  	        var offset = totalOffset;
  	        totalOffset += param.dynamicPartLength();
  	        return param.withOffset(offset);
  	    });

  	    // encode everything!
  	    return offsetParams.reduce(function (result, param) {
  	        return result + param.dynamicPart();
  	    }, offsetParams.reduce(function (result, param) {
  	        return result + param.staticPart();
  	    }, ''));
  	};



  	module.exports = SolidityParam;


  	},{"../utils/utils":20}],12:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeReal is a prootype that represents real type
  	 * It matches:
  	 * real
  	 * real[]
  	 * real[4]
  	 * real[][]
  	 * real[3][]
  	 * real[][6][], ...
  	 * real32
  	 * real64[]
  	 * real8[4]
  	 * real256[][]
  	 * real[3][]
  	 * real64[][6][], ...
  	 */
  	var SolidityTypeReal = function () {
  	    this._inputFormatter = f.formatInputReal;
  	    this._outputFormatter = f.formatOutputReal;
  	};

  	SolidityTypeReal.prototype = new SolidityType({});
  	SolidityTypeReal.prototype.constructor = SolidityTypeReal;

  	SolidityTypeReal.prototype.isType = function (name) {
  	    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);
  	};

  	module.exports = SolidityTypeReal;

  	},{"./formatters":9,"./type":14}],13:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	var SolidityTypeString = function () {
  	    this._inputFormatter = f.formatInputString;
  	    this._outputFormatter = f.formatOutputString;
  	};

  	SolidityTypeString.prototype = new SolidityType({});
  	SolidityTypeString.prototype.constructor = SolidityTypeString;

  	SolidityTypeString.prototype.isType = function (name) {
  	    return !!name.match(/^string(\[([0-9]*)\])*$/);
  	};

  	SolidityTypeString.prototype.isDynamicType = function () {
  	    return true;
  	};

  	module.exports = SolidityTypeString;

  	},{"./formatters":9,"./type":14}],14:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityParam = require('./param');

  	/**
  	 * SolidityType prototype is used to encode/decode solidity params of certain type
  	 */
  	var SolidityType = function (config) {
  	    this._inputFormatter = config.inputFormatter;
  	    this._outputFormatter = config.outputFormatter;
  	};

  	/**
  	 * Should be used to determine if this SolidityType do match given name
  	 *
  	 * @method isType
  	 * @param {String} name
  	 * @return {Bool} true if type match this SolidityType, otherwise false
  	 */
  	SolidityType.prototype.isType = function (name) {
  	    throw "this method should be overrwritten for type " + name;
  	};

  	/**
  	 * Should be used to determine what is the length of static part in given type
  	 *
  	 * @method staticPartLength
  	 * @param {String} name
  	 * @return {Number} length of static part in bytes
  	 */
  	SolidityType.prototype.staticPartLength = function (name) {
  	    // If name isn't an array then treat it like a single element array.
  	    return (this.nestedTypes(name) || ['[1]'])
  	        .map(function (type) {
  	            // the length of the nested array
  	            return parseInt(type.slice(1, -1), 10) || 1;
  	        })
  	        .reduce(function (previous, current) {
  	            return previous * current;
  	        // all basic types are 32 bytes long
  	        }, 32);
  	};

  	/**
  	 * Should be used to determine if type is dynamic array
  	 * eg:
  	 * "type[]" => true
  	 * "type[4]" => false
  	 *
  	 * @method isDynamicArray
  	 * @param {String} name
  	 * @return {Bool} true if the type is dynamic array
  	 */
  	SolidityType.prototype.isDynamicArray = function (name) {
  	    var nestedTypes = this.nestedTypes(name);
  	    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  	};

  	/**
  	 * Should be used to determine if type is static array
  	 * eg:
  	 * "type[]" => false
  	 * "type[4]" => true
  	 *
  	 * @method isStaticArray
  	 * @param {String} name
  	 * @return {Bool} true if the type is static array
  	 */
  	SolidityType.prototype.isStaticArray = function (name) {
  	    var nestedTypes = this.nestedTypes(name);
  	    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  	};

  	/**
  	 * Should return length of static array
  	 * eg.
  	 * "int[32]" => 32
  	 * "int256[14]" => 14
  	 * "int[2][3]" => 3
  	 * "int" => 1
  	 * "int[1]" => 1
  	 * "int[]" => 1
  	 *
  	 * @method staticArrayLength
  	 * @param {String} name
  	 * @return {Number} static array length
  	 */
  	SolidityType.prototype.staticArrayLength = function (name) {
  	    var nestedTypes = this.nestedTypes(name);
  	    if (nestedTypes) {
  	       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
  	    }
  	    return 1;
  	};

  	/**
  	 * Should return nested type
  	 * eg.
  	 * "int[32]" => "int"
  	 * "int256[14]" => "int256"
  	 * "int[2][3]" => "int[2]"
  	 * "int" => "int"
  	 * "int[]" => "int"
  	 *
  	 * @method nestedName
  	 * @param {String} name
  	 * @return {String} nested name
  	 */
  	SolidityType.prototype.nestedName = function (name) {
  	    // remove last [] in name
  	    var nestedTypes = this.nestedTypes(name);
  	    if (!nestedTypes) {
  	        return name;
  	    }

  	    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
  	};

  	/**
  	 * Should return true if type has dynamic size by default
  	 * such types are "string", "bytes"
  	 *
  	 * @method isDynamicType
  	 * @param {String} name
  	 * @return {Bool} true if is dynamic, otherwise false
  	 */
  	SolidityType.prototype.isDynamicType = function () {
  	    return false;
  	};

  	/**
  	 * Should return array of nested types
  	 * eg.
  	 * "int[2][3][]" => ["[2]", "[3]", "[]"]
  	 * "int[] => ["[]"]
  	 * "int" => null
  	 *
  	 * @method nestedTypes
  	 * @param {String} name
  	 * @return {Array} array of nested types
  	 */
  	SolidityType.prototype.nestedTypes = function (name) {
  	    // return list of strings eg. "[]", "[3]", "[]", "[2]"
  	    return name.match(/(\[[0-9]*\])/g);
  	};

  	/**
  	 * Should be used to encode the value
  	 *
  	 * @method encode
  	 * @param {Object} value
  	 * @param {String} name
  	 * @return {String} encoded value
  	 */
  	SolidityType.prototype.encode = function (value, name) {
  	    var self = this;
  	    if (this.isDynamicArray(name)) {

  	        return (function () {
  	            var length = value.length;                          // in int
  	            var nestedName = self.nestedName(name);

  	            var result = [];
  	            result.push(f.formatInputInt(length).encode());

  	            value.forEach(function (v) {
  	                result.push(self.encode(v, nestedName));
  	            });

  	            return result;
  	        })();

  	    } else if (this.isStaticArray(name)) {

  	        return (function () {
  	            var length = self.staticArrayLength(name);          // in int
  	            var nestedName = self.nestedName(name);

  	            var result = [];
  	            for (var i = 0; i < length; i++) {
  	                result.push(self.encode(value[i], nestedName));
  	            }

  	            return result;
  	        })();

  	    }

  	    return this._inputFormatter(value, name).encode();
  	};

  	/**
  	 * Should be used to decode value from bytes
  	 *
  	 * @method decode
  	 * @param {String} bytes
  	 * @param {Number} offset in bytes
  	 * @param {String} name type name
  	 * @returns {Object} decoded value
  	 */
  	SolidityType.prototype.decode = function (bytes, offset, name) {
  	    var self = this;

  	    if (this.isDynamicArray(name)) {

  	        return (function () {
  	            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
  	            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
  	            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

  	            var nestedName = self.nestedName(name);
  	            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
  	            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
  	            var result = [];

  	            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
  	                result.push(self.decode(bytes, arrayStart + i, nestedName));
  	            }

  	            return result;
  	        })();

  	    } else if (this.isStaticArray(name)) {

  	        return (function () {
  	            var length = self.staticArrayLength(name);                      // in int
  	            var arrayStart = offset;                                        // in bytes

  	            var nestedName = self.nestedName(name);
  	            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
  	            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
  	            var result = [];

  	            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
  	                result.push(self.decode(bytes, arrayStart + i, nestedName));
  	            }

  	            return result;
  	        })();
  	    } else if (this.isDynamicType(name)) {

  	        return (function () {
  	            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
  	            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
  	            var roundedLength = Math.floor((length + 31) / 32);                     // in int
  	            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0);
  	            return self._outputFormatter(param, name);
  	        })();
  	    }

  	    var length = this.staticPartLength(name);
  	    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));
  	    return this._outputFormatter(param, name);
  	};

  	module.exports = SolidityType;

  	},{"./formatters":9,"./param":11}],15:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeUInt is a prootype that represents uint type
  	 * It matches:
  	 * uint
  	 * uint[]
  	 * uint[4]
  	 * uint[][]
  	 * uint[3][]
  	 * uint[][6][], ...
  	 * uint32
  	 * uint64[]
  	 * uint8[4]
  	 * uint256[][]
  	 * uint[3][]
  	 * uint64[][6][], ...
  	 */
  	var SolidityTypeUInt = function () {
  	    this._inputFormatter = f.formatInputInt;
  	    this._outputFormatter = f.formatOutputUInt;
  	};

  	SolidityTypeUInt.prototype = new SolidityType({});
  	SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

  	SolidityTypeUInt.prototype.isType = function (name) {
  	    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
  	};

  	module.exports = SolidityTypeUInt;

  	},{"./formatters":9,"./type":14}],16:[function(require,module,exports){
  	var f = require('./formatters');
  	var SolidityType = require('./type');

  	/**
  	 * SolidityTypeUReal is a prootype that represents ureal type
  	 * It matches:
  	 * ureal
  	 * ureal[]
  	 * ureal[4]
  	 * ureal[][]
  	 * ureal[3][]
  	 * ureal[][6][], ...
  	 * ureal32
  	 * ureal64[]
  	 * ureal8[4]
  	 * ureal256[][]
  	 * ureal[3][]
  	 * ureal64[][6][], ...
  	 */
  	var SolidityTypeUReal = function () {
  	    this._inputFormatter = f.formatInputReal;
  	    this._outputFormatter = f.formatOutputUReal;
  	};

  	SolidityTypeUReal.prototype = new SolidityType({});
  	SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;

  	SolidityTypeUReal.prototype.isType = function (name) {
  	    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);
  	};

  	module.exports = SolidityTypeUReal;

  	},{"./formatters":9,"./type":14}],17:[function(require,module,exports){

  	// go env doesn't have and need XMLHttpRequest
  	if (typeof XMLHttpRequest === 'undefined') {
  	    exports.XMLHttpRequest = {};
  	} else {
  	    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line
  	}


  	},{}],18:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file config.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	/**
  	 * Utils
  	 * 
  	 * @module utils
  	 */

  	/**
  	 * Utility functions
  	 * 
  	 * @class [utils] config
  	 * @constructor
  	 */


  	/// required to define ETH_BIGNUMBER_ROUNDING_MODE
  	var BigNumber = require('bignumber.js');

  	var ETH_UNITS = [
  	    'wei',
  	    'kwei',
  	    'Mwei',
  	    'Gwei',
  	    'szabo',
  	    'finney',
  	    'femtoether',
  	    'picoether',
  	    'nanoether',
  	    'microether',
  	    'milliether',
  	    'nano',
  	    'micro',
  	    'milli',
  	    'ether',
  	    'grand',
  	    'Mether',
  	    'Gether',
  	    'Tether',
  	    'Pether',
  	    'Eether',
  	    'Zether',
  	    'Yether',
  	    'Nether',
  	    'Dether',
  	    'Vether',
  	    'Uether'
  	];

  	module.exports = {
  	    ETH_PADDING: 32,
  	    ETH_SIGNATURE_LENGTH: 4,
  	    ETH_UNITS: ETH_UNITS,
  	    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },
  	    ETH_POLLING_TIMEOUT: 1000/2,
  	    defaultBlock: 'latest',
  	    defaultAccount: undefined
  	};


  	},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file sha3.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var CryptoJS = require('crypto-js');
  	var sha3 = require('crypto-js/sha3');

  	module.exports = function (value, options) {
  	    if (options && options.encoding === 'hex') {
  	        if (value.length > 2 && value.substr(0, 2) === '0x') {
  	            value = value.substr(2);
  	        }
  	        value = CryptoJS.enc.Hex.parse(value);
  	    }

  	    return sha3(value, {
  	        outputLength: 256
  	    }).toString();
  	};


  	},{"crypto-js":65,"crypto-js/sha3":86}],20:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file utils.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	/**
  	 * Utils
  	 *
  	 * @module utils
  	 */

  	/**
  	 * Utility functions
  	 *
  	 * @class [utils] utils
  	 * @constructor
  	 */


  	var BigNumber = require('bignumber.js');
  	var sha3 = require('./sha3.js');
  	var utf8 = require('utf8');

  	var unitMap = {
  	    'noether':      '0',
  	    'wei':          '1',
  	    'kwei':         '1000',
  	    'Kwei':         '1000',
  	    'babbage':      '1000',
  	    'femtoether':   '1000',
  	    'mwei':         '1000000',
  	    'Mwei':         '1000000',
  	    'lovelace':     '1000000',
  	    'picoether':    '1000000',
  	    'gwei':         '1000000000',
  	    'Gwei':         '1000000000',
  	    'shannon':      '1000000000',
  	    'nanoether':    '1000000000',
  	    'nano':         '1000000000',
  	    'szabo':        '1000000000000',
  	    'microether':   '1000000000000',
  	    'micro':        '1000000000000',
  	    'finney':       '1000000000000000',
  	    'milliether':   '1000000000000000',
  	    'milli':        '1000000000000000',
  	    'ether':        '1000000000000000000',
  	    'kether':       '1000000000000000000000',
  	    'grand':        '1000000000000000000000',
  	    'mether':       '1000000000000000000000000',
  	    'gether':       '1000000000000000000000000000',
  	    'tether':       '1000000000000000000000000000000'
  	};

  	/**
  	 * Should be called to pad string to expected length
  	 *
  	 * @method padLeft
  	 * @param {String} string to be padded
  	 * @param {Number} characters that result string should have
  	 * @param {String} sign, by default 0
  	 * @returns {String} right aligned string
  	 */
  	var padLeft = function (string, chars, sign) {
  	    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
  	};

  	/**
  	 * Should be called to pad string to expected length
  	 *
  	 * @method padRight
  	 * @param {String} string to be padded
  	 * @param {Number} characters that result string should have
  	 * @param {String} sign, by default 0
  	 * @returns {String} right aligned string
  	 */
  	var padRight = function (string, chars, sign) {
  	    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));
  	};

  	/**
  	 * Should be called to get utf8 from it's hex representation
  	 *
  	 * @method toUtf8
  	 * @param {String} string in hex
  	 * @returns {String} ascii string representation of hex value
  	 */
  	var toUtf8 = function(hex) {
  	// Find termination
  	    var str = "";
  	    var i = 0, l = hex.length;
  	    if (hex.substring(0, 2) === '0x') {
  	        i = 2;
  	    }
  	    for (; i < l; i+=2) {
  	        var code = parseInt(hex.substr(i, 2), 16);
  	        if (code === 0)
  	            { break; }
  	        str += String.fromCharCode(code);
  	    }

  	    return utf8.decode(str);
  	};

  	/**
  	 * Should be called to get ascii from it's hex representation
  	 *
  	 * @method toAscii
  	 * @param {String} string in hex
  	 * @returns {String} ascii string representation of hex value
  	 */
  	var toAscii = function(hex) {
  	// Find termination
  	    var str = "";
  	    var i = 0, l = hex.length;
  	    if (hex.substring(0, 2) === '0x') {
  	        i = 2;
  	    }
  	    for (; i < l; i+=2) {
  	        var code = parseInt(hex.substr(i, 2), 16);
  	        str += String.fromCharCode(code);
  	    }

  	    return str;
  	};

  	/**
  	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
  	 *
  	 * @method fromUtf8
  	 * @param {String} string
  	 * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string
  	 * @returns {String} hex representation of input string
  	 */
  	var fromUtf8 = function(str, allowZero) {
  	    str = utf8.encode(str);
  	    var hex = "";
  	    for(var i = 0; i < str.length; i++) {
  	        var code = str.charCodeAt(i);
  	        if (code === 0) {
  	            if (allowZero) {
  	                hex += '00';
  	            } else {
  	                break;
  	            }
  	        } else {
  	            var n = code.toString(16);
  	            hex += n.length < 2 ? '0' + n : n;
  	        }
  	    }

  	    return "0x" + hex;
  	};

  	/**
  	 * Should be called to get hex representation (prefixed by 0x) of ascii string
  	 *
  	 * @method fromAscii
  	 * @param {String} string
  	 * @param {Number} optional padding
  	 * @returns {String} hex representation of input string
  	 */
  	var fromAscii = function(str, num) {
  	    var hex = "";
  	    for(var i = 0; i < str.length; i++) {
  	        var code = str.charCodeAt(i);
  	        var n = code.toString(16);
  	        hex += n.length < 2 ? '0' + n : n;
  	    }

  	    return "0x" + hex.padEnd(num,'0');
  	};

  	/**
  	 * Should be used to create full function/event name from json abi
  	 *
  	 * @method transformToFullName
  	 * @param {Object} json-abi
  	 * @return {String} full fnction/event name
  	 */
  	var transformToFullName = function (json) {
  	    if (json.name.indexOf('(') !== -1) {
  	        return json.name;
  	    }

  	    var typeName = json.inputs.map(function(i){return i.type; }).join();
  	    return json.name + '(' + typeName + ')';
  	};

  	/**
  	 * Should be called to get display name of contract function
  	 *
  	 * @method extractDisplayName
  	 * @param {String} name of function/event
  	 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
  	 */
  	var extractDisplayName = function (name) {
  	    var stBracket = name.indexOf('(');
  	    var endBracket = name.indexOf(')');
  	    return (stBracket !== -1 && endBracket !== -1) ? name.substr(0, stBracket) : name;
  	};

  	/**
  	 * Should be called to get type name of contract function
  	 *
  	 * @method extractTypeName
  	 * @param {String} name of function/event
  	 * @returns {String} type name for function/event eg. multiply(uint256) -> uint256
  	 */
  	var extractTypeName = function (name) {
  	    var stBracket = name.indexOf('(');
  	    var endBracket = name.indexOf(')');
  	    return (stBracket !== -1 && endBracket !== -1) ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '') : "";
  	};

  	/**
  	 * Converts value to it's decimal representation in string
  	 *
  	 * @method toDecimal
  	 * @param {String|Number|BigNumber}
  	 * @return {String}
  	 */
  	var toDecimal = function (value) {
  	    return toBigNumber(value).toNumber();
  	};

  	/**
  	 * Converts value to it's hex representation
  	 *
  	 * @method fromDecimal
  	 * @param {String|Number|BigNumber}
  	 * @return {String}
  	 */
  	var fromDecimal = function (value) {
  	    var number = toBigNumber(value);
  	    var result = number.toString(16);

  	    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
  	};

  	/**
  	 * Auto converts any given value into it's hex representation.
  	 *
  	 * And even stringifys objects before.
  	 *
  	 * @method toHex
  	 * @param {String|Number|BigNumber|Object}
  	 * @return {String}
  	 */
  	var toHex = function (val) {
  	    /*jshint maxcomplexity: 8 */

  	    if (isBoolean(val))
  	        { return fromDecimal(+val); }

  	    if (isBigNumber(val))
  	        { return fromDecimal(val); }

  	    if (typeof val === 'object')
  	        { return fromUtf8(JSON.stringify(val)); }

  	    // if its a negative number, pass it through fromDecimal
  	    if (isString(val)) {
  	        if (val.indexOf('-0x') === 0)
  	            { return fromDecimal(val); }
  	        else if(val.indexOf('0x') === 0)
  	            { return val; }
  	        else if (!isFinite(val))
  	            { return fromUtf8(val,1); }
  	    }

  	    return fromDecimal(val);
  	};

  	/**
  	 * Returns value of unit in Wei
  	 *
  	 * @method getValueOfUnit
  	 * @param {String} unit the unit to convert to, default ether
  	 * @returns {BigNumber} value of the unit (in Wei)
  	 * @throws error if the unit is not correct:w
  	 */
  	var getValueOfUnit = function (unit) {
  	    unit = unit ? unit.toLowerCase() : 'ether';
  	    var unitValue = unitMap[unit];
  	    if (unitValue === undefined) {
  	        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
  	    }
  	    return new BigNumber(unitValue, 10);
  	};

  	/**
  	 * Takes a number of wei and converts it to any other ether unit.
  	 *
  	 * Possible units are:
  	 *   SI Short   SI Full        Effigy       Other
  	 * - kwei       femtoether     babbage
  	 * - mwei       picoether      lovelace
  	 * - gwei       nanoether      shannon      nano
  	 * - --         microether     szabo        micro
  	 * - --         milliether     finney       milli
  	 * - ether      --             --
  	 * - kether                    --           grand
  	 * - mether
  	 * - gether
  	 * - tether
  	 *
  	 * @method fromWei
  	 * @param {Number|String} number can be a number, number string or a HEX of a decimal
  	 * @param {String} unit the unit to convert to, default ether
  	 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
  	*/
  	var fromWei = function(number, unit) {
  	    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

  	    return isBigNumber(number) ? returnValue : returnValue.toString(10);
  	};

  	/**
  	 * Takes a number of a unit and converts it to wei.
  	 *
  	 * Possible units are:
  	 *   SI Short   SI Full        Effigy       Other
  	 * - kwei       femtoether     babbage
  	 * - mwei       picoether      lovelace
  	 * - gwei       nanoether      shannon      nano
  	 * - --         microether     szabo        micro
  	 * - --         milliether     finney       milli
  	 * - ether      --             --
  	 * - kether                    --           grand
  	 * - mether
  	 * - gether
  	 * - tether
  	 *
  	 * @method toWei
  	 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
  	 * @param {String} unit the unit to convert from, default ether
  	 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
  	*/
  	var toWei = function(number, unit) {
  	    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

  	    return isBigNumber(number) ? returnValue : returnValue.toString(10);
  	};

  	/**
  	 * Takes an input and transforms it into an bignumber
  	 *
  	 * @method toBigNumber
  	 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
  	 * @return {BigNumber} BigNumber
  	*/
  	var toBigNumber = function(number) {
  	    /*jshint maxcomplexity:5 */
  	    number = number || 0;
  	    if (isBigNumber(number))
  	        { return number; }

  	    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
  	        return new BigNumber(number.replace('0x',''), 16);
  	    }

  	    return new BigNumber(number.toString(10), 10);
  	};

  	/**
  	 * Takes and input transforms it into bignumber and if it is negative value, into two's complement
  	 *
  	 * @method toTwosComplement
  	 * @param {Number|String|BigNumber}
  	 * @return {BigNumber}
  	 */
  	var toTwosComplement = function (number) {
  	    var bigNumber = toBigNumber(number).round();
  	    if (bigNumber.lessThan(0)) {
  	        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
  	    }
  	    return bigNumber;
  	};

  	/**
  	 * Checks if the given string is strictly an address
  	 *
  	 * @method isStrictAddress
  	 * @param {String} address the given HEX adress
  	 * @return {Boolean}
  	*/
  	var isStrictAddress = function (address) {
  	    return /^0x[0-9a-f]{40}$/i.test(address);
  	};

  	/**
  	 * Checks if the given string is an address
  	 *
  	 * @method isAddress
  	 * @param {String} address the given HEX adress
  	 * @return {Boolean}
  	*/
  	var isAddress = function (address) {
  	    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
  	        // check if it has the basic requirements of an address
  	        return false;
  	    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
  	        // If it's all small caps or all all caps, return true
  	        return true;
  	    } else {
  	        // Otherwise check each case
  	        return isChecksumAddress(address);
  	    }
  	};

  	/**
  	 * Checks if the given string is a checksummed address
  	 *
  	 * @method isChecksumAddress
  	 * @param {String} address the given HEX adress
  	 * @return {Boolean}
  	*/
  	var isChecksumAddress = function (address) {
  	    // Check each case
  	    address = address.replace('0x','');
  	    var addressHash = sha3(address.toLowerCase());

  	    for (var i = 0; i < 40; i++ ) {
  	        // the nth letter should be uppercase if the nth digit of casemap is 1
  	        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
  	            return false;
  	        }
  	    }
  	    return true;
  	};



  	/**
  	 * Makes a checksum address
  	 *
  	 * @method toChecksumAddress
  	 * @param {String} address the given HEX adress
  	 * @return {String}
  	*/
  	var toChecksumAddress = function (address) {
  	    if (typeof address === 'undefined') { return ''; }

  	    address = address.toLowerCase().replace('0x','');
  	    var addressHash = sha3(address);
  	    var checksumAddress = '0x';

  	    for (var i = 0; i < address.length; i++ ) {
  	        // If ith character is 9 to f then make it uppercase
  	        if (parseInt(addressHash[i], 16) > 7) {
  	          checksumAddress += address[i].toUpperCase();
  	        } else {
  	            checksumAddress += address[i];
  	        }
  	    }
  	    return checksumAddress;
  	};

  	/**
  	 * Transforms given string to valid 20 bytes-length addres with 0x prefix
  	 *
  	 * @method toAddress
  	 * @param {String} address
  	 * @return {String} formatted address
  	 */
  	var toAddress = function (address) {
  	    if (isStrictAddress(address)) {
  	        return address;
  	    }

  	    if (/^[0-9a-f]{40}$/.test(address)) {
  	        return '0x' + address;
  	    }

  	    return '0x' + padLeft(toHex(address).substr(2), 40);
  	};

  	/**
  	 * Returns true if object is BigNumber, otherwise false
  	 *
  	 * @method isBigNumber
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isBigNumber = function (object) {
  	    return object instanceof BigNumber ||
  	        (object && object.constructor && object.constructor.name === 'BigNumber');
  	};

  	/**
  	 * Returns true if object is string, otherwise false
  	 *
  	 * @method isString
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isString = function (object) {
  	    return typeof object === 'string' ||
  	        (object && object.constructor && object.constructor.name === 'String');
  	};

  	/**
  	 * Returns true if object is function, otherwise false
  	 *
  	 * @method isFunction
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isFunction = function (object) {
  	    return typeof object === 'function';
  	};

  	/**
  	 * Returns true if object is Objet, otherwise false
  	 *
  	 * @method isObject
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isObject = function (object) {
  	    return object !== null && !(Array.isArray(object)) && typeof object === 'object';
  	};

  	/**
  	 * Returns true if object is boolean, otherwise false
  	 *
  	 * @method isBoolean
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isBoolean = function (object) {
  	    return typeof object === 'boolean';
  	};

  	/**
  	 * Returns true if object is array, otherwise false
  	 *
  	 * @method isArray
  	 * @param {Object}
  	 * @return {Boolean}
  	 */
  	var isArray = function (object) {
  	    return Array.isArray(object);
  	};

  	/**
  	 * Returns true if given string is valid json object
  	 *
  	 * @method isJson
  	 * @param {String}
  	 * @return {Boolean}
  	 */
  	var isJson = function (str) {
  	    try {
  	        return !!JSON.parse(str);
  	    } catch (e) {
  	        return false;
  	    }
  	};

  	/**
  	 * Returns true if given string is a valid Ethereum block header bloom.
  	 *
  	 * @method isBloom
  	 * @param {String} hex encoded bloom filter
  	 * @return {Boolean}
  	 */
  	var isBloom = function (bloom) {
  	    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
  	        return false;
  	    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
  	        return true;
  	    }
  	    return false;
  	};

  	/**
  	 * Returns true if given string is a valid log topic.
  	 *
  	 * @method isTopic
  	 * @param {String} hex encoded topic
  	 * @return {Boolean}
  	 */
  	var isTopic = function (topic) {
  	    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
  	        return false;
  	    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
  	        return true;
  	    }
  	    return false;
  	};

  	module.exports = {
  	    padLeft: padLeft,
  	    padRight: padRight,
  	    toHex: toHex,
  	    toDecimal: toDecimal,
  	    fromDecimal: fromDecimal,
  	    toUtf8: toUtf8,
  	    toAscii: toAscii,
  	    fromUtf8: fromUtf8,
  	    fromAscii: fromAscii,
  	    transformToFullName: transformToFullName,
  	    extractDisplayName: extractDisplayName,
  	    extractTypeName: extractTypeName,
  	    toWei: toWei,
  	    fromWei: fromWei,
  	    toBigNumber: toBigNumber,
  	    toTwosComplement: toTwosComplement,
  	    toAddress: toAddress,
  	    isBigNumber: isBigNumber,
  	    isStrictAddress: isStrictAddress,
  	    isAddress: isAddress,
  	    isChecksumAddress: isChecksumAddress,
  	    toChecksumAddress: toChecksumAddress,
  	    isFunction: isFunction,
  	    isString: isString,
  	    isObject: isObject,
  	    isBoolean: isBoolean,
  	    isArray: isArray,
  	    isJson: isJson,
  	    isBloom: isBloom,
  	    isTopic: isTopic,
  	};

  	},{"./sha3.js":19,"bignumber.js":"bignumber.js","utf8":123}],21:[function(require,module,exports){
  	module.exports={
  	    "version": "0.20.7"
  	};

  	},{}],22:[function(require,module,exports){
  	/*!
  	 * web3.js - Ethereum JavaScript API
  	 *
  	 * @license lgpl-3.0
  	 * @see https://github.com/ethereum/web3.js
  	*/

  	/*
  	 * This file is part of web3.js.
  	 * 
  	 * web3.js is free software: you can redistribute it and/or modify
  	 * it under the terms of the GNU Lesser General Public License as published by
  	 * the Free Software Foundation, either version 3 of the License, or
  	 * (at your option) any later version.
  	 * 
  	 * web3.js is distributed in the hope that it will be useful,
  	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	 * GNU Lesser General Public License for more details.
  	 * 
  	 * You should have received a copy of the GNU Lesser General Public License
  	 * along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	 *
  	 * @file web3.js
  	 * @authors:
  	 *   Jeffrey Wilcke <jeff@ethdev.com>
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 *   Marian Oancea <marian@ethdev.com>
  	 *   Fabian Vogelsteller <fabian@ethdev.com>
  	 *   Gav Wood <g@ethdev.com>
  	 * @date 2014
  	 */

  	var RequestManager = require('./web3/requestmanager');
  	var Iban = require('./web3/iban');
  	var Eth = require('./web3/methods/eth');
  	var DB = require('./web3/methods/db');
  	var Shh = require('./web3/methods/shh');
  	var Net = require('./web3/methods/net');
  	var Personal = require('./web3/methods/personal');
  	var Swarm = require('./web3/methods/swarm');
  	var Settings = require('./web3/settings');
  	var version = require('./version.json');
  	var utils = require('./utils/utils');
  	var sha3 = require('./utils/sha3');
  	var extend = require('./web3/extend');
  	var Batch = require('./web3/batch');
  	var Property = require('./web3/property');
  	var HttpProvider = require('./web3/httpprovider');
  	var IpcProvider = require('./web3/ipcprovider');
  	var BigNumber = require('bignumber.js');



  	function Web3 (provider) {
  	    this._requestManager = new RequestManager(provider);
  	    this.currentProvider = provider;
  	    this.eth = new Eth(this);
  	    this.db = new DB(this);
  	    this.shh = new Shh(this);
  	    this.net = new Net(this);
  	    this.personal = new Personal(this);
  	    this.bzz = new Swarm(this);
  	    this.settings = new Settings();
  	    this.version = {
  	        api: version.version
  	    };
  	    this.providers = {
  	        HttpProvider: HttpProvider,
  	        IpcProvider: IpcProvider
  	    };
  	    this._extend = extend(this);
  	    this._extend({
  	        properties: properties()
  	    });
  	}

  	// expose providers on the class
  	Web3.providers = {
  	    HttpProvider: HttpProvider,
  	    IpcProvider: IpcProvider
  	};

  	Web3.prototype.setProvider = function (provider) {
  	    this._requestManager.setProvider(provider);
  	    this.currentProvider = provider;
  	};

  	Web3.prototype.reset = function (keepIsSyncing) {
  	    this._requestManager.reset(keepIsSyncing);
  	    this.settings = new Settings();
  	};

  	Web3.prototype.BigNumber = BigNumber;
  	Web3.prototype.toHex = utils.toHex;
  	Web3.prototype.toAscii = utils.toAscii;
  	Web3.prototype.toUtf8 = utils.toUtf8;
  	Web3.prototype.fromAscii = utils.fromAscii;
  	Web3.prototype.fromUtf8 = utils.fromUtf8;
  	Web3.prototype.toDecimal = utils.toDecimal;
  	Web3.prototype.fromDecimal = utils.fromDecimal;
  	Web3.prototype.toBigNumber = utils.toBigNumber;
  	Web3.prototype.toWei = utils.toWei;
  	Web3.prototype.fromWei = utils.fromWei;
  	Web3.prototype.isAddress = utils.isAddress;
  	Web3.prototype.isChecksumAddress = utils.isChecksumAddress;
  	Web3.prototype.toChecksumAddress = utils.toChecksumAddress;
  	Web3.prototype.isIBAN = utils.isIBAN;
  	Web3.prototype.padLeft = utils.padLeft;
  	Web3.prototype.padRight = utils.padRight;


  	Web3.prototype.sha3 = function(string, options) {
  	    return '0x' + sha3(string, options);
  	};

  	/**
  	 * Transforms direct icap to address
  	 */
  	Web3.prototype.fromICAP = function (icap) {
  	    var iban = new Iban(icap);
  	    return iban.address();
  	};

  	var properties = function () {
  	    return [
  	        new Property({
  	            name: 'version.node',
  	            getter: 'web3_clientVersion'
  	        }),
  	        new Property({
  	            name: 'version.network',
  	            getter: 'net_version',
  	            inputFormatter: utils.toDecimal
  	        }),
  	        new Property({
  	            name: 'version.ethereum',
  	            getter: 'eth_protocolVersion',
  	            inputFormatter: utils.toDecimal
  	        }),
  	        new Property({
  	            name: 'version.whisper',
  	            getter: 'shh_version',
  	            inputFormatter: utils.toDecimal
  	        })
  	    ];
  	};

  	Web3.prototype.isConnected = function(){
  	    return (this.currentProvider && this.currentProvider.isConnected());
  	};

  	Web3.prototype.createBatch = function () {
  	    return new Batch(this);
  	};

  	module.exports = Web3;


  	},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/personal":40,"./web3/methods/shh":41,"./web3/methods/swarm":42,"./web3/property":45,"./web3/requestmanager":46,"./web3/settings":47,"bignumber.js":"bignumber.js"}],23:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file allevents.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2014
  	 */

  	var sha3 = require('../utils/sha3');
  	var SolidityEvent = require('./event');
  	var formatters = require('./formatters');
  	var utils = require('../utils/utils');
  	var Filter = require('./filter');
  	var watches = require('./methods/watches');

  	var AllSolidityEvents = function (requestManager, json, address) {
  	    this._requestManager = requestManager;
  	    this._json = json;
  	    this._address = address;
  	};

  	AllSolidityEvents.prototype.encode = function (options) {
  	    options = options || {};
  	    var result = {};

  	    ['fromBlock', 'toBlock'].filter(function (f) {
  	        return options[f] !== undefined;
  	    }).forEach(function (f) {
  	        result[f] = formatters.inputBlockNumberFormatter(options[f]);
  	    });

  	    result.address = this._address;

  	    return result;
  	};

  	AllSolidityEvents.prototype.decode = function (data) {
  	    data.data = data.data || '';


  	    var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
  	    var match = this._json.filter(function (j) {
  	        return eventTopic === sha3(utils.transformToFullName(j));
  	    })[0];

  	    if (!match) { // cannot find matching event?
  	        return formatters.outputLogFormatter(data);
  	    }

  	    var event = new SolidityEvent(this._requestManager, match, this._address);
  	    return event.decode(data);
  	};

  	AllSolidityEvents.prototype.execute = function (options, callback) {

  	    if (utils.isFunction(arguments[arguments.length - 1])) {
  	        callback = arguments[arguments.length - 1];
  	        if(arguments.length === 1)
  	            { options = null; }
  	    }

  	    var o = this.encode(options);
  	    var formatter = this.decode.bind(this);
  	    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
  	};

  	AllSolidityEvents.prototype.attachToContract = function (contract) {
  	    var execute = this.execute.bind(this);
  	    contract.allEvents = execute;
  	};

  	module.exports = AllSolidityEvents;


  	},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":43}],24:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file batch.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var Jsonrpc = require('./jsonrpc');
  	var errors = require('./errors');

  	var Batch = function (web3) {
  	    this.requestManager = web3._requestManager;
  	    this.requests = [];
  	};

  	/**
  	 * Should be called to add create new request to batch request
  	 *
  	 * @method add
  	 * @param {Object} jsonrpc requet object
  	 */
  	Batch.prototype.add = function (request) {
  	    this.requests.push(request);
  	};

  	/**
  	 * Should be called to execute batch request
  	 *
  	 * @method execute
  	 */
  	Batch.prototype.execute = function () {
  	    var requests = this.requests;
  	    this.requestManager.sendBatch(requests, function (err, results) {
  	        results = results || [];
  	        requests.map(function (request, index) {
  	            return results[index] || {};
  	        }).forEach(function (result, index) {
  	            if (requests[index].callback) {

  	                if (!Jsonrpc.isValidResponse(result)) {
  	                    return requests[index].callback(errors.InvalidResponse(result));
  	                }

  	                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
  	            }
  	        });
  	    }); 
  	};

  	module.exports = Batch;


  	},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file contract.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2014
  	 */

  	var utils = require('../utils/utils');
  	var coder = require('../solidity/coder');
  	var SolidityEvent = require('./event');
  	var SolidityFunction = require('./function');
  	var AllEvents = require('./allevents');

  	/**
  	 * Should be called to encode constructor params
  	 *
  	 * @method encodeConstructorParams
  	 * @param {Array} abi
  	 * @param {Array} constructor params
  	 */
  	var encodeConstructorParams = function (abi, params) {
  	    return abi.filter(function (json) {
  	        return json.type === 'constructor' && json.inputs.length === params.length;
  	    }).map(function (json) {
  	        return json.inputs.map(function (input) {
  	            return input.type;
  	        });
  	    }).map(function (types) {
  	        return coder.encodeParams(types, params);
  	    })[0] || '';
  	};

  	/**
  	 * Should be called to add functions to contract object
  	 *
  	 * @method addFunctionsToContract
  	 * @param {Contract} contract
  	 * @param {Array} abi
  	 */
  	var addFunctionsToContract = function (contract) {
  	    contract.abi.filter(function (json) {
  	        return json.type === 'function';
  	    }).map(function (json) {
  	        return new SolidityFunction(contract._eth, json, contract.address);
  	    }).forEach(function (f) {
  	        f.attachToContract(contract);
  	    });
  	};

  	/**
  	 * Should be called to add events to contract object
  	 *
  	 * @method addEventsToContract
  	 * @param {Contract} contract
  	 * @param {Array} abi
  	 */
  	var addEventsToContract = function (contract) {
  	    var events = contract.abi.filter(function (json) {
  	        return json.type === 'event';
  	    });

  	    var All = new AllEvents(contract._eth._requestManager, events, contract.address);
  	    All.attachToContract(contract);

  	    events.map(function (json) {
  	        return new SolidityEvent(contract._eth._requestManager, json, contract.address);
  	    }).forEach(function (e) {
  	        e.attachToContract(contract);
  	    });
  	};


  	/**
  	 * Should be called to check if the contract gets properly deployed on the blockchain.
  	 *
  	 * @method checkForContractAddress
  	 * @param {Object} contract
  	 * @param {Function} callback
  	 * @returns {Undefined}
  	 */
  	var checkForContractAddress = function(contract, callback){
  	    var count = 0,
  	        callbackFired = false;

  	    // wait for receipt
  	    var filter = contract._eth.filter('latest', function(e){
  	        if (!e && !callbackFired) {
  	            count++;

  	            // stop watching after 50 blocks (timeout)
  	            if (count > 50) {

  	                filter.stopWatching(function() {});
  	                callbackFired = true;

  	                if (callback)
  	                    { callback(new Error('Contract transaction couldn\'t be found after 50 blocks')); }
  	                else
  	                    { throw new Error('Contract transaction couldn\'t be found after 50 blocks'); }


  	            } else {

  	                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){
  	                    if(receipt && receipt.blockHash && !callbackFired) {

  	                        contract._eth.getCode(receipt.contractAddress, function(e, code){
  	                            /*jshint maxcomplexity: 6 */

  	                            if(callbackFired || !code)
  	                                { return; }

  	                            filter.stopWatching(function() {});
  	                            callbackFired = true;

  	                            if(code.length > 3) {

  	                                // console.log('Contract code deployed!');

  	                                contract.address = receipt.contractAddress;

  	                                // attach events and methods again after we have
  	                                addFunctionsToContract(contract);
  	                                addEventsToContract(contract);

  	                                // call callback for the second time
  	                                if(callback)
  	                                    { callback(null, contract); }

  	                            } else {
  	                                if(callback)
  	                                    { callback(new Error('The contract code couldn\'t be stored, please check your gas amount.')); }
  	                                else
  	                                    { throw new Error('The contract code couldn\'t be stored, please check your gas amount.'); }
  	                            }
  	                        });
  	                    }
  	                });
  	            }
  	        }
  	    });
  	};

  	/**
  	 * Should be called to create new ContractFactory instance
  	 *
  	 * @method ContractFactory
  	 * @param {Array} abi
  	 */
  	var ContractFactory = function (eth, abi) {
  	    this.eth = eth;
  	    this.abi = abi;

  	    /**
  	     * Should be called to create new contract on a blockchain
  	     *
  	     * @method new
  	     * @param {Any} contract constructor param1 (optional)
  	     * @param {Any} contract constructor param2 (optional)
  	     * @param {Object} contract transaction object (required)
  	     * @param {Function} callback
  	     * @returns {Contract} returns contract instance
  	     */
  	    this.new = function () {
  	        /*jshint maxcomplexity: 7 */

  	        var contract = new Contract(this.eth, this.abi);

  	        // parse arguments
  	        var options = {}; // required!
  	        var callback;

  	        var args = Array.prototype.slice.call(arguments);
  	        if (utils.isFunction(args[args.length - 1])) {
  	            callback = args.pop();
  	        }

  	        var last = args[args.length - 1];
  	        if (utils.isObject(last) && !utils.isArray(last)) {
  	            options = args.pop();
  	        }

  	        if (options.value > 0) {
  	            var constructorAbi = abi.filter(function (json) {
  	                return json.type === 'constructor' && json.inputs.length === args.length;
  	            })[0] || {};

  	            if (!constructorAbi.payable) {
  	                throw new Error('Cannot send value to non-payable constructor');
  	            }
  	        }

  	        var bytes = encodeConstructorParams(this.abi, args);
  	        options.data += bytes;

  	        if (callback) {

  	            // wait for the contract address and check if the code was deployed
  	            this.eth.sendTransaction(options, function (err, hash) {
  	                if (err) {
  	                    callback(err);
  	                } else {
  	                    // add the transaction hash
  	                    contract.transactionHash = hash;

  	                    // call callback for the first time
  	                    callback(null, contract);

  	                    checkForContractAddress(contract, callback);
  	                }
  	            });
  	        } else {
  	            var hash = this.eth.sendTransaction(options);
  	            // add the transaction hash
  	            contract.transactionHash = hash;
  	            checkForContractAddress(contract);
  	        }

  	        return contract;
  	    };

  	    this.new.getData = this.getData.bind(this);
  	};

  	/**
  	 * Should be called to create new ContractFactory
  	 *
  	 * @method contract
  	 * @param {Array} abi
  	 * @returns {ContractFactory} new contract factory
  	 */
  	//var contract = function (abi) {
  	    //return new ContractFactory(abi);
  	//};



  	/**
  	 * Should be called to get access to existing contract on a blockchain
  	 *
  	 * @method at
  	 * @param {Address} contract address (required)
  	 * @param {Function} callback {optional)
  	 * @returns {Contract} returns contract if no callback was passed,
  	 * otherwise calls callback function (err, contract)
  	 */
  	ContractFactory.prototype.at = function (address, callback) {
  	    var contract = new Contract(this.eth, this.abi, address);

  	    // this functions are not part of prototype,
  	    // because we dont want to spoil the interface
  	    addFunctionsToContract(contract);
  	    addEventsToContract(contract);

  	    if (callback) {
  	        callback(null, contract);
  	    }
  	    return contract;
  	};

  	/**
  	 * Gets the data, which is data to deploy plus constructor params
  	 *
  	 * @method getData
  	 */
  	ContractFactory.prototype.getData = function () {
  	    var options = {}; // required!
  	    var args = Array.prototype.slice.call(arguments);

  	    var last = args[args.length - 1];
  	    if (utils.isObject(last) && !utils.isArray(last)) {
  	        options = args.pop();
  	    }

  	    var bytes = encodeConstructorParams(this.abi, args);
  	    options.data += bytes;

  	    return options.data;
  	};

  	/**
  	 * Should be called to create new contract instance
  	 *
  	 * @method Contract
  	 * @param {Array} abi
  	 * @param {Address} contract address
  	 */
  	var Contract = function (eth, abi, address) {
  	    this._eth = eth;
  	    this.transactionHash = null;
  	    this.address = address;
  	    this.abi = abi;
  	};

  	module.exports = ContractFactory;

  	},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file errors.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	module.exports = {
  	    InvalidNumberOfSolidityArgs: function () {
  	        return new Error('Invalid number of arguments to Solidity function');
  	    },
  	    InvalidNumberOfRPCParams: function () {
  	        return new Error('Invalid number of input parameters to RPC method');
  	    },
  	    InvalidConnection: function (host){
  	        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
  	    },
  	    InvalidProvider: function () {
  	        return new Error('Provider not set or invalid');
  	    },
  	    InvalidResponse: function (result){
  	        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
  	        return new Error(message);
  	    },
  	    ConnectionTimeout: function (ms){
  	        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
  	    }
  	};

  	},{}],27:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file event.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2014
  	 */

  	var utils = require('../utils/utils');
  	var coder = require('../solidity/coder');
  	var formatters = require('./formatters');
  	var sha3 = require('../utils/sha3');
  	var Filter = require('./filter');
  	var watches = require('./methods/watches');

  	/**
  	 * This prototype should be used to create event filters
  	 */
  	var SolidityEvent = function (requestManager, json, address) {
  	    this._requestManager = requestManager;
  	    this._params = json.inputs;
  	    this._name = utils.transformToFullName(json);
  	    this._address = address;
  	    this._anonymous = json.anonymous;
  	};

  	/**
  	 * Should be used to get filtered param types
  	 *
  	 * @method types
  	 * @param {Bool} decide if returned typed should be indexed
  	 * @return {Array} array of types
  	 */
  	SolidityEvent.prototype.types = function (indexed) {
  	    return this._params.filter(function (i) {
  	        return i.indexed === indexed;
  	    }).map(function (i) {
  	        return i.type;
  	    });
  	};

  	/**
  	 * Should be used to get event display name
  	 *
  	 * @method displayName
  	 * @return {String} event display name
  	 */
  	SolidityEvent.prototype.displayName = function () {
  	    return utils.extractDisplayName(this._name);
  	};

  	/**
  	 * Should be used to get event type name
  	 *
  	 * @method typeName
  	 * @return {String} event type name
  	 */
  	SolidityEvent.prototype.typeName = function () {
  	    return utils.extractTypeName(this._name);
  	};

  	/**
  	 * Should be used to get event signature
  	 *
  	 * @method signature
  	 * @return {String} event signature
  	 */
  	SolidityEvent.prototype.signature = function () {
  	    return sha3(this._name);
  	};

  	/**
  	 * Should be used to encode indexed params and options to one final object
  	 *
  	 * @method encode
  	 * @param {Object} indexed
  	 * @param {Object} options
  	 * @return {Object} everything combined together and encoded
  	 */
  	SolidityEvent.prototype.encode = function (indexed, options) {
  	    indexed = indexed || {};
  	    options = options || {};
  	    var result = {};

  	    ['fromBlock', 'toBlock'].filter(function (f) {
  	        return options[f] !== undefined;
  	    }).forEach(function (f) {
  	        result[f] = formatters.inputBlockNumberFormatter(options[f]);
  	    });

  	    result.topics = [];

  	    result.address = this._address;
  	    if (!this._anonymous) {
  	        result.topics.push('0x' + this.signature());
  	    }

  	    var indexedTopics = this._params.filter(function (i) {
  	        return i.indexed === true;
  	    }).map(function (i) {
  	        var value = indexed[i.name];
  	        if (value === undefined || value === null) {
  	            return null;
  	        }

  	        if (utils.isArray(value)) {
  	            return value.map(function (v) {
  	                return '0x' + coder.encodeParam(i.type, v);
  	            });
  	        }
  	        return '0x' + coder.encodeParam(i.type, value);
  	    });

  	    result.topics = result.topics.concat(indexedTopics);

  	    return result;
  	};

  	/**
  	 * Should be used to decode indexed params and options
  	 *
  	 * @method decode
  	 * @param {Object} data
  	 * @return {Object} result object with decoded indexed && not indexed params
  	 */
  	SolidityEvent.prototype.decode = function (data) {

  	    data.data = data.data || '';
  	    data.topics = data.topics || [];


  	    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
  	    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
  	    var indexedParams = coder.decodeParams(this.types(true), indexedData);

  	    var notIndexedData = data.data.slice(2);
  	    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

  	    var result = formatters.outputLogFormatter(data);
  	    result.event = this.displayName();
  	    result.address = data.address;

  	    result.args = this._params.reduce(function (acc, current) {
  	        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
  	        return acc;
  	    }, {});

  	    delete result.data;
  	    delete result.topics;

  	    return result;
  	};

  	/**
  	 * Should be used to create new filter object from event
  	 *
  	 * @method execute
  	 * @param {Object} indexed
  	 * @param {Object} options
  	 * @return {Object} filter object
  	 */
  	SolidityEvent.prototype.execute = function (indexed, options, callback) {

  	    if (utils.isFunction(arguments[arguments.length - 1])) {
  	        callback = arguments[arguments.length - 1];
  	        if(arguments.length === 2)
  	            { options = null; }
  	        if(arguments.length === 1) {
  	            options = null;
  	            indexed = {};
  	        }
  	    }

  	    var o = this.encode(indexed, options);
  	    var formatter = this.decode.bind(this);
  	    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
  	};

  	/**
  	 * Should be used to attach event to contract object
  	 *
  	 * @method attachToContract
  	 * @param {Contract}
  	 */
  	SolidityEvent.prototype.attachToContract = function (contract) {
  	    var execute = this.execute.bind(this);
  	    var displayName = this.displayName();
  	    if (!contract[displayName]) {
  	        contract[displayName] = execute;
  	    }
  	    contract[displayName][this.typeName()] = this.execute.bind(this, contract);
  	};

  	module.exports = SolidityEvent;


  	},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":43}],28:[function(require,module,exports){
  	var formatters = require('./formatters');
  	var utils = require('./../utils/utils');
  	var Method = require('./method');
  	var Property = require('./property');

  	// TODO: refactor, so the input params are not altered.
  	// it's necessary to make same 'extension' work with multiple providers
  	var extend = function (web3) {
  	    /* jshint maxcomplexity:5 */
  	    var ex = function (extension) {

  	        var extendedObject;
  	        if (extension.property) {
  	            if (!web3[extension.property]) {
  	                web3[extension.property] = {};
  	            }
  	            extendedObject = web3[extension.property];
  	        } else {
  	            extendedObject = web3;
  	        }

  	        if (extension.methods) {
  	            extension.methods.forEach(function (method) {
  	                method.attachToObject(extendedObject);
  	                method.setRequestManager(web3._requestManager);
  	            });
  	        }

  	        if (extension.properties) {
  	            extension.properties.forEach(function (property) {
  	                property.attachToObject(extendedObject);
  	                property.setRequestManager(web3._requestManager);
  	            });
  	        }
  	    };

  	    ex.formatters = formatters; 
  	    ex.utils = utils;
  	    ex.Method = Method;
  	    ex.Property = Property;

  	    return ex;
  	};



  	module.exports = extend;


  	},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":45}],29:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file filter.js
  	 * @authors:
  	 *   Jeffrey Wilcke <jeff@ethdev.com>
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 *   Marian Oancea <marian@ethdev.com>
  	 *   Fabian Vogelsteller <fabian@ethdev.com>
  	 *   Gav Wood <g@ethdev.com>
  	 * @date 2014
  	 */

  	var formatters = require('./formatters');
  	var utils = require('../utils/utils');

  	/**
  	* Converts a given topic to a hex string, but also allows null values.
  	*
  	* @param {Mixed} value
  	* @return {String}
  	*/
  	var toTopic = function(value){

  	    if(value === null || typeof value === 'undefined')
  	        { return null; }

  	    value = String(value);

  	    if(value.indexOf('0x') === 0)
  	        { return value; }
  	    else
  	        { return utils.fromUtf8(value); }
  	};

  	/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones
  	/// @param should be string or object
  	/// @returns options string or object
  	var getOptions = function (options, type) {
  	    /*jshint maxcomplexity: 6 */

  	    if (utils.isString(options)) {
  	        return options;
  	    }

  	    options = options || {};


  	    switch(type) {
  	        case 'eth':

  	            // make sure topics, get converted to hex
  	            options.topics = options.topics || [];
  	            options.topics = options.topics.map(function(topic){
  	                return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
  	            });

  	            return {
  	                topics: options.topics,
  	                from: options.from,
  	                to: options.to,
  	                address: options.address,
  	                fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),
  	                toBlock: formatters.inputBlockNumberFormatter(options.toBlock)
  	            };
  	        case 'shh':
  	            return options;
  	    }
  	};

  	/**
  	Adds the callback and sets up the methods, to iterate over the results.

  	@method getLogsAtStart
  	@param {Object} self
  	@param {function} callback
  	*/
  	var getLogsAtStart = function(self, callback){
  	    // call getFilterLogs for the first watch callback start
  	    if (!utils.isString(self.options)) {
  	        self.get(function (err, messages) {
  	            // don't send all the responses to all the watches again... just to self one
  	            if (err) {
  	                callback(err);
  	            }

  	            if(utils.isArray(messages)) {
  	                messages.forEach(function (message) {
  	                    callback(null, message);
  	                });
  	            }
  	        });
  	    }
  	};

  	/**
  	Adds the callback and sets up the methods, to iterate over the results.

  	@method pollFilter
  	@param {Object} self
  	*/
  	var pollFilter = function(self) {

  	    var onMessage = function (error, messages) {
  	        if (error) {
  	            return self.callbacks.forEach(function (callback) {
  	                callback(error);
  	            });
  	        }

  	        if(utils.isArray(messages)) {
  	            messages.forEach(function (message) {
  	                message = self.formatter ? self.formatter(message) : message;
  	                self.callbacks.forEach(function (callback) {
  	                    callback(null, message);
  	                });
  	            });
  	        }
  	    };

  	    self.requestManager.startPolling({
  	        method: self.implementation.poll.call,
  	        params: [self.filterId],
  	    }, self.filterId, onMessage, self.stopWatching.bind(self));

  	};

  	var Filter = function (options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {
  	    var self = this;
  	    var implementation = {};
  	    methods.forEach(function (method) {
  	        method.setRequestManager(requestManager);
  	        method.attachToObject(implementation);
  	    });
  	    this.requestManager = requestManager;
  	    this.options = getOptions(options, type);
  	    this.implementation = implementation;
  	    this.filterId = null;
  	    this.callbacks = [];
  	    this.getLogsCallbacks = [];
  	    this.pollFilters = [];
  	    this.formatter = formatter;
  	    this.implementation.newFilter(this.options, function(error, id){
  	        if(error) {
  	            self.callbacks.forEach(function(cb){
  	                cb(error);
  	            });
  	            if (typeof filterCreationErrorCallback === 'function') {
  	              filterCreationErrorCallback(error);
  	            }
  	        } else {
  	            self.filterId = id;

  	            // check if there are get pending callbacks as a consequence
  	            // of calling get() with filterId unassigned.
  	            self.getLogsCallbacks.forEach(function (cb){
  	                self.get(cb);
  	            });
  	            self.getLogsCallbacks = [];

  	            // get filter logs for the already existing watch calls
  	            self.callbacks.forEach(function(cb){
  	                getLogsAtStart(self, cb);
  	            });
  	            if(self.callbacks.length > 0)
  	                { pollFilter(self); }

  	            // start to watch immediately
  	            if(typeof callback === 'function') {
  	                return self.watch(callback);
  	            }
  	        }
  	    });

  	    return this;
  	};

  	Filter.prototype.watch = function (callback) {
  	    this.callbacks.push(callback);

  	    if(this.filterId) {
  	        getLogsAtStart(this, callback);
  	        pollFilter(this);
  	    }

  	    return this;
  	};

  	Filter.prototype.stopWatching = function (callback) {
  	    this.requestManager.stopPolling(this.filterId);
  	    this.callbacks = [];
  	    // remove filter async
  	    if (callback) {
  	        this.implementation.uninstallFilter(this.filterId, callback);
  	    } else {
  	        return this.implementation.uninstallFilter(this.filterId);
  	    }
  	};

  	Filter.prototype.get = function (callback) {
  	    var self = this;
  	    if (utils.isFunction(callback)) {
  	        if (this.filterId === null) {
  	            // If filterId is not set yet, call it back
  	            // when newFilter() assigns it.
  	            this.getLogsCallbacks.push(callback);
  	        } else {
  	            this.implementation.getLogs(this.filterId, function(err, res){
  	                if (err) {
  	                    callback(err);
  	                } else {
  	                    callback(null, res.map(function (log) {
  	                        return self.formatter ? self.formatter(log) : log;
  	                    }));
  	                }
  	            });
  	        }
  	    } else {
  	        if (this.filterId === null) {
  	            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
  	        }
  	        var logs = this.implementation.getLogs(this.filterId);
  	        return logs.map(function (log) {
  	            return self.formatter ? self.formatter(log) : log;
  	        });
  	    }

  	    return this;
  	};

  	module.exports = Filter;


  	},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){


  	var utils = require('../utils/utils');
  	var config = require('../utils/config');
  	var Iban = require('./iban');

  	/**
  	 * Should the format output to a big number
  	 *
  	 * @method outputBigNumberFormatter
  	 * @param {String|Number|BigNumber}
  	 * @returns {BigNumber} object
  	 */
  	var outputBigNumberFormatter = function (number) {
  	    return utils.toBigNumber(number);
  	};

  	var isPredefinedBlockNumber = function (blockNumber) {
  	    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
  	};

  	var inputDefaultBlockNumberFormatter = function (blockNumber) {
  	    if (blockNumber === undefined) {
  	        return config.defaultBlock;
  	    }
  	    return inputBlockNumberFormatter(blockNumber);
  	};

  	var inputBlockNumberFormatter = function (blockNumber) {
  	    if (blockNumber === undefined) {
  	        return undefined;
  	    } else if (isPredefinedBlockNumber(blockNumber)) {
  	        return blockNumber;
  	    }
  	    return utils.toHex(blockNumber);
  	};

  	/**
  	 * Formats the input of a transaction and converts all values to HEX
  	 *
  	 * @method inputCallFormatter
  	 * @param {Object} transaction options
  	 * @returns object
  	*/
  	var inputCallFormatter = function (options){

  	    options.from = options.from || config.defaultAccount;

  	    if (options.from) {
  	        options.from = inputAddressFormatter(options.from);
  	    }

  	    if (options.to) { // it might be contract creation
  	        options.to = inputAddressFormatter(options.to);
  	    }

  	    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
  	        return options[key] !== undefined;
  	    }).forEach(function(key){
  	        options[key] = utils.fromDecimal(options[key]);
  	    });

  	    return options;
  	};

  	/**
  	 * Formats the input of a transaction and converts all values to HEX
  	 *
  	 * @method inputTransactionFormatter
  	 * @param {Object} transaction options
  	 * @returns object
  	*/
  	var inputTransactionFormatter = function (options){

  	    options.from = options.from || config.defaultAccount;
  	    options.from = inputAddressFormatter(options.from);

  	    if (options.to) { // it might be contract creation
  	        options.to = inputAddressFormatter(options.to);
  	    }

  	    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
  	        return options[key] !== undefined;
  	    }).forEach(function(key){
  	        options[key] = utils.fromDecimal(options[key]);
  	    });

  	    return options;
  	};

  	/**
  	 * Formats the output of a transaction to its proper values
  	 *
  	 * @method outputTransactionFormatter
  	 * @param {Object} tx
  	 * @returns {Object}
  	*/
  	var outputTransactionFormatter = function (tx){
  	    if(tx.blockNumber !== null)
  	        { tx.blockNumber = utils.toDecimal(tx.blockNumber); }
  	    if(tx.transactionIndex !== null)
  	        { tx.transactionIndex = utils.toDecimal(tx.transactionIndex); }
  	    tx.nonce = utils.toDecimal(tx.nonce);
  	    tx.gas = utils.toDecimal(tx.gas);
  	    tx.gasPrice = utils.toBigNumber(tx.gasPrice);
  	    tx.value = utils.toBigNumber(tx.value);
  	    return tx;
  	};

  	/**
  	 * Formats the output of a transaction receipt to its proper values
  	 *
  	 * @method outputTransactionReceiptFormatter
  	 * @param {Object} receipt
  	 * @returns {Object}
  	*/
  	var outputTransactionReceiptFormatter = function (receipt){
  	    if(receipt.blockNumber !== null)
  	        { receipt.blockNumber = utils.toDecimal(receipt.blockNumber); }
  	    if(receipt.transactionIndex !== null)
  	        { receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex); }
  	    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);
  	    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);

  	    if(utils.isArray(receipt.logs)) {
  	        receipt.logs = receipt.logs.map(function(log){
  	            return outputLogFormatter(log);
  	        });
  	    }

  	    return receipt;
  	};

  	/**
  	 * Formats the output of a block to its proper values
  	 *
  	 * @method outputBlockFormatter
  	 * @param {Object} block
  	 * @returns {Object}
  	*/
  	var outputBlockFormatter = function(block) {

  	    // transform to number
  	    block.gasLimit = utils.toDecimal(block.gasLimit);
  	    block.gasUsed = utils.toDecimal(block.gasUsed);
  	    block.size = utils.toDecimal(block.size);
  	    block.timestamp = utils.toDecimal(block.timestamp);
  	    if(block.number !== null)
  	        { block.number = utils.toDecimal(block.number); }

  	    block.difficulty = utils.toBigNumber(block.difficulty);
  	    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);

  	    if (utils.isArray(block.transactions)) {
  	        block.transactions.forEach(function(item){
  	            if(!utils.isString(item))
  	                { return outputTransactionFormatter(item); }
  	        });
  	    }

  	    return block;
  	};

  	/**
  	 * Formats the output of a log
  	 *
  	 * @method outputLogFormatter
  	 * @param {Object} log object
  	 * @returns {Object} log
  	*/
  	var outputLogFormatter = function(log) {
  	    if(log.blockNumber)
  	        { log.blockNumber = utils.toDecimal(log.blockNumber); }
  	    if(log.transactionIndex)
  	        { log.transactionIndex = utils.toDecimal(log.transactionIndex); }
  	    if(log.logIndex)
  	        { log.logIndex = utils.toDecimal(log.logIndex); }

  	    return log;
  	};

  	/**
  	 * Formats the input of a whisper post and converts all values to HEX
  	 *
  	 * @method inputPostFormatter
  	 * @param {Object} transaction object
  	 * @returns {Object}
  	*/
  	var inputPostFormatter = function(post) {

  	    // post.payload = utils.toHex(post.payload);
  	    post.ttl = utils.fromDecimal(post.ttl);
  	    post.workToProve = utils.fromDecimal(post.workToProve);
  	    post.priority = utils.fromDecimal(post.priority);

  	    // fallback
  	    if (!utils.isArray(post.topics)) {
  	        post.topics = post.topics ? [post.topics] : [];
  	    }

  	    // format the following options
  	    post.topics = post.topics.map(function(topic){
  	        // convert only if not hex
  	        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
  	    });

  	    return post;
  	};

  	/**
  	 * Formats the output of a received post message
  	 *
  	 * @method outputPostFormatter
  	 * @param {Object}
  	 * @returns {Object}
  	 */
  	var outputPostFormatter = function(post){

  	    post.expiry = utils.toDecimal(post.expiry);
  	    post.sent = utils.toDecimal(post.sent);
  	    post.ttl = utils.toDecimal(post.ttl);
  	    post.workProved = utils.toDecimal(post.workProved);
  	    // post.payloadRaw = post.payload;
  	    // post.payload = utils.toAscii(post.payload);

  	    // if (utils.isJson(post.payload)) {
  	    //     post.payload = JSON.parse(post.payload);
  	    // }

  	    // format the following options
  	    if (!post.topics) {
  	        post.topics = [];
  	    }
  	    post.topics = post.topics.map(function(topic){
  	        return utils.toAscii(topic);
  	    });

  	    return post;
  	};

  	var inputAddressFormatter = function (address) {
  	    var iban = new Iban(address);
  	    if (iban.isValid() && iban.isDirect()) {
  	        return '0x' + iban.address();
  	    } else if (utils.isStrictAddress(address)) {
  	        return address;
  	    } else if (utils.isAddress(address)) {
  	        return '0x' + address;
  	    }
  	    throw new Error('invalid address');
  	};


  	var outputSyncingFormatter = function(result) {
  	    if (!result) {
  	        return result;
  	    }

  	    result.startingBlock = utils.toDecimal(result.startingBlock);
  	    result.currentBlock = utils.toDecimal(result.currentBlock);
  	    result.highestBlock = utils.toDecimal(result.highestBlock);
  	    if (result.knownStates) {
  	        result.knownStates = utils.toDecimal(result.knownStates);
  	        result.pulledStates = utils.toDecimal(result.pulledStates);
  	    }

  	    return result;
  	};

  	module.exports = {
  	    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
  	    inputBlockNumberFormatter: inputBlockNumberFormatter,
  	    inputCallFormatter: inputCallFormatter,
  	    inputTransactionFormatter: inputTransactionFormatter,
  	    inputAddressFormatter: inputAddressFormatter,
  	    inputPostFormatter: inputPostFormatter,
  	    outputBigNumberFormatter: outputBigNumberFormatter,
  	    outputTransactionFormatter: outputTransactionFormatter,
  	    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
  	    outputBlockFormatter: outputBlockFormatter,
  	    outputLogFormatter: outputLogFormatter,
  	    outputPostFormatter: outputPostFormatter,
  	    outputSyncingFormatter: outputSyncingFormatter
  	};


  	},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file function.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var coder = require('../solidity/coder');
  	var utils = require('../utils/utils');
  	var errors = require('./errors');
  	var formatters = require('./formatters');
  	var sha3 = require('../utils/sha3');

  	/**
  	 * This prototype should be used to call/sendTransaction to solidity functions
  	 */
  	var SolidityFunction = function (eth, json, address) {
  	    this._eth = eth;
  	    this._inputTypes = json.inputs.map(function (i) {
  	        return i.type;
  	    });
  	    this._outputTypes = json.outputs.map(function (i) {
  	        return i.type;
  	    });
  	    this._constant = (json.stateMutability === "view" || json.stateMutability === "pure" || json.constant);
  	    this._payable = (json.stateMutability === "payable" || json.payable);
  	    this._name = utils.transformToFullName(json);
  	    this._address = address;
  	};

  	SolidityFunction.prototype.extractCallback = function (args) {
  	    if (utils.isFunction(args[args.length - 1])) {
  	        return args.pop(); // modify the args array!
  	    }
  	};

  	SolidityFunction.prototype.extractDefaultBlock = function (args) {
  	    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {
  	        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
  	    }
  	};

  	/**
  	 * Should be called to check if the number of arguments is correct
  	 *
  	 * @method validateArgs
  	 * @param {Array} arguments
  	 * @throws {Error} if it is not
  	 */
  	SolidityFunction.prototype.validateArgs = function (args) {
  	    var inputArgs = args.filter(function (a) {
  	      // filter the options object but not arguments that are arrays
  	      return !( (utils.isObject(a) === true) &&
  	                (utils.isArray(a) === false) &&
  	                (utils.isBigNumber(a) === false)
  	              );
  	    });
  	    if (inputArgs.length !== this._inputTypes.length) {
  	        throw errors.InvalidNumberOfSolidityArgs();
  	    }
  	};

  	/**
  	 * Should be used to create payload from arguments
  	 *
  	 * @method toPayload
  	 * @param {Array} solidity function params
  	 * @param {Object} optional payload options
  	 */
  	SolidityFunction.prototype.toPayload = function (args) {
  	    var options = {};
  	    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {
  	        options = args[args.length - 1];
  	    }
  	    this.validateArgs(args);
  	    options.to = this._address;
  	    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
  	    return options;
  	};

  	/**
  	 * Should be used to get function signature
  	 *
  	 * @method signature
  	 * @return {String} function signature
  	 */
  	SolidityFunction.prototype.signature = function () {
  	    return sha3(this._name).slice(0, 8);
  	};


  	SolidityFunction.prototype.unpackOutput = function (output) {
  	    if (!output) {
  	        return;
  	    }

  	    output = output.length >= 2 ? output.slice(2) : output;
  	    var result = coder.decodeParams(this._outputTypes, output);
  	    return result.length === 1 ? result[0] : result;
  	};

  	/**
  	 * Calls a contract function.
  	 *
  	 * @method call
  	 * @param {...Object} Contract function arguments
  	 * @param {function} If the last argument is a function, the contract function
  	 *   call will be asynchronous, and the callback will be passed the
  	 *   error and result.
  	 * @return {String} output bytes
  	 */
  	SolidityFunction.prototype.call = function () {
  	    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });
  	    var callback = this.extractCallback(args);
  	    var defaultBlock = this.extractDefaultBlock(args);
  	    var payload = this.toPayload(args);


  	    if (!callback) {
  	        var output = this._eth.call(payload, defaultBlock);
  	        return this.unpackOutput(output);
  	    }

  	    var self = this;
  	    this._eth.call(payload, defaultBlock, function (error, output) {
  	        if (error) { return callback(error, null); }

  	        var unpacked = null;
  	        try {
  	            unpacked = self.unpackOutput(output);
  	        }
  	        catch (e) {
  	            error = e;
  	        }

  	        callback(error, unpacked);
  	    });
  	};

  	/**
  	 * Should be used to sendTransaction to solidity function
  	 *
  	 * @method sendTransaction
  	 */
  	SolidityFunction.prototype.sendTransaction = function () {
  	    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });
  	    var callback = this.extractCallback(args);
  	    var payload = this.toPayload(args);

  	    if (payload.value > 0 && !this._payable) {
  	        throw new Error('Cannot send value to non-payable function');
  	    }

  	    if (!callback) {
  	        return this._eth.sendTransaction(payload);
  	    }

  	    this._eth.sendTransaction(payload, callback);
  	};

  	/**
  	 * Should be used to estimateGas of solidity function
  	 *
  	 * @method estimateGas
  	 */
  	SolidityFunction.prototype.estimateGas = function () {
  	    var args = Array.prototype.slice.call(arguments);
  	    var callback = this.extractCallback(args);
  	    var payload = this.toPayload(args);

  	    if (!callback) {
  	        return this._eth.estimateGas(payload);
  	    }

  	    this._eth.estimateGas(payload, callback);
  	};

  	/**
  	 * Return the encoded data of the call
  	 *
  	 * @method getData
  	 * @return {String} the encoded data
  	 */
  	SolidityFunction.prototype.getData = function () {
  	    var args = Array.prototype.slice.call(arguments);
  	    var payload = this.toPayload(args);

  	    return payload.data;
  	};

  	/**
  	 * Should be used to get function display name
  	 *
  	 * @method displayName
  	 * @return {String} display name of the function
  	 */
  	SolidityFunction.prototype.displayName = function () {
  	    return utils.extractDisplayName(this._name);
  	};

  	/**
  	 * Should be used to get function type name
  	 *
  	 * @method typeName
  	 * @return {String} type name of the function
  	 */
  	SolidityFunction.prototype.typeName = function () {
  	    return utils.extractTypeName(this._name);
  	};

  	/**
  	 * Should be called to get rpc requests from solidity function
  	 *
  	 * @method request
  	 * @returns {Object}
  	 */
  	SolidityFunction.prototype.request = function () {
  	    var args = Array.prototype.slice.call(arguments);
  	    var callback = this.extractCallback(args);
  	    var payload = this.toPayload(args);
  	    var format = this.unpackOutput.bind(this);

  	    return {
  	        method: this._constant ? 'eth_call' : 'eth_sendTransaction',
  	        callback: callback,
  	        params: [payload],
  	        format: format
  	    };
  	};

  	/**
  	 * Should be called to execute function
  	 *
  	 * @method execute
  	 */
  	SolidityFunction.prototype.execute = function () {
  	    var transaction = !this._constant;

  	    // send transaction
  	    if (transaction) {
  	        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
  	    }

  	    // call
  	    return this.call.apply(this, Array.prototype.slice.call(arguments));
  	};

  	/**
  	 * Should be called to attach function to contract
  	 *
  	 * @method attachToContract
  	 * @param {Contract}
  	 */
  	SolidityFunction.prototype.attachToContract = function (contract) {
  	    var execute = this.execute.bind(this);
  	    execute.request = this.request.bind(this);
  	    execute.call = this.call.bind(this);
  	    execute.sendTransaction = this.sendTransaction.bind(this);
  	    execute.estimateGas = this.estimateGas.bind(this);
  	    execute.getData = this.getData.bind(this);
  	    var displayName = this.displayName();
  	    if (!contract[displayName]) {
  	        contract[displayName] = execute;
  	    }
  	    contract[displayName][this.typeName()] = execute; // circular!!!!
  	};

  	module.exports = SolidityFunction;

  	},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./errors":26,"./formatters":30}],32:[function(require,module,exports){
  	(function (Buffer){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file httpprovider.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 *   Marian Oancea <marian@ethdev.com>
  	 *   Fabian Vogelsteller <fabian@ethdev.com>
  	 * @date 2015
  	 */

  	var errors = require('./errors');

  	// workaround to use httpprovider in different envs

  	// browser
  	if (typeof window !== 'undefined' && window.XMLHttpRequest) {
  	  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line
  	// node
  	} else {
  	  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line
  	}

  	var XHR2 = require('xhr2-cookies').XMLHttpRequest; // jshint ignore: line

  	/**
  	 * HttpProvider should be used to send rpc calls over http
  	 */
  	var HttpProvider = function (host, timeout, user, password, headers) {
  	  this.host = host || 'http://localhost:8545';
  	  this.timeout = timeout || 0;
  	  this.user = user;
  	  this.password = password;
  	  this.headers = headers;
  	};

  	/**
  	 * Should be called to prepare new XMLHttpRequest
  	 *
  	 * @method prepareRequest
  	 * @param {Boolean} true if request should be async
  	 * @return {XMLHttpRequest} object
  	 */
  	HttpProvider.prototype.prepareRequest = function (async) {
  	  var request;

  	  if (async) {
  	    request = new XHR2();
  	    request.timeout = this.timeout;
  	  } else {
  	    request = new XMLHttpRequest();
  	  }
  	  request.withCredentials = true;

  	  request.open('POST', this.host, async);
  	  if (this.user && this.password) {
  	    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');
  	    request.setRequestHeader('Authorization', auth);
  	  } request.setRequestHeader('Content-Type', 'application/json');
  	  if(this.headers) {
  	      this.headers.forEach(function(header) {
  	          request.setRequestHeader(header.name, header.value);
  	      });
  	  }
  	  return request;
  	};

  	/**
  	 * Should be called to make sync request
  	 *
  	 * @method send
  	 * @param {Object} payload
  	 * @return {Object} result
  	 */
  	HttpProvider.prototype.send = function (payload) {
  	  var request = this.prepareRequest(false);

  	  try {
  	    request.send(JSON.stringify(payload));
  	  } catch (error) {
  	    throw errors.InvalidConnection(this.host);
  	  }

  	  var result = request.responseText;

  	  try {
  	    result = JSON.parse(result);
  	  } catch (e) {
  	    throw errors.InvalidResponse(request.responseText);
  	  }

  	  return result;
  	};

  	/**
  	 * Should be used to make async request
  	 *
  	 * @method sendAsync
  	 * @param {Object} payload
  	 * @param {Function} callback triggered on end with (err, result)
  	 */
  	HttpProvider.prototype.sendAsync = function (payload, callback) {
  	  var request = this.prepareRequest(true);

  	  request.onreadystatechange = function () {
  	    if (request.readyState === 4 && request.timeout !== 1) {
  	      var result = request.responseText;
  	      var error = null;

  	      try {
  	        result = JSON.parse(result);
  	      } catch (e) {
  	        error = errors.InvalidResponse(request.responseText);
  	      }

  	      callback(error, result);
  	    }
  	  };

  	  request.ontimeout = function () {
  	    callback(errors.ConnectionTimeout(this.timeout));
  	  };

  	  try {
  	    request.send(JSON.stringify(payload));
  	  } catch (error) {
  	    callback(errors.InvalidConnection(this.host));
  	  }
  	};

  	/**
  	 * Synchronously tries to make Http request
  	 *
  	 * @method isConnected
  	 * @return {Boolean} returns true if request haven't failed. Otherwise false
  	 */
  	HttpProvider.prototype.isConnected = function () {
  	  try {
  	    this.send({
  	      id: 9999999999,
  	      jsonrpc: '2.0',
  	      method: 'net_listening',
  	      params: []
  	    });
  	    return true;
  	  } catch (e) {
  	    return false;
  	  }
  	};

  	module.exports = HttpProvider;

  	}).call(this,require("buffer").Buffer);

  	},{"./errors":26,"buffer":53,"xhr2-cookies":126,"xmlhttprequest":17}],33:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file iban.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var BigNumber = require('bignumber.js');

  	var padLeft = function (string, bytes) {
  	    var result = string;
  	    while (result.length < bytes * 2) {
  	        result = '0' + result;
  	    }
  	    return result;
  	};

  	/**
  	 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
  	 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
  	 *
  	 * @method iso13616Prepare
  	 * @param {String} iban the IBAN
  	 * @returns {String} the prepared IBAN
  	 */
  	var iso13616Prepare = function (iban) {
  	    var A = 'A'.charCodeAt(0);
  	    var Z = 'Z'.charCodeAt(0);

  	    iban = iban.toUpperCase();
  	    iban = iban.substr(4) + iban.substr(0,4);

  	    return iban.split('').map(function(n){
  	        var code = n.charCodeAt(0);
  	        if (code >= A && code <= Z){
  	            // A = 10, B = 11, ... Z = 35
  	            return code - A + 10;
  	        } else {
  	            return n;
  	        }
  	    }).join('');
  	};

  	/**
  	 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
  	 *
  	 * @method mod9710
  	 * @param {String} iban
  	 * @returns {Number}
  	 */
  	var mod9710 = function (iban) {
  	    var remainder = iban,
  	        block;

  	    while (remainder.length > 2){
  	        block = remainder.slice(0, 9);
  	        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
  	    }

  	    return parseInt(remainder, 10) % 97;
  	};

  	/**
  	 * This prototype should be used to create iban object from iban correct string
  	 *
  	 * @param {String} iban
  	 */
  	var Iban = function (iban) {
  	    this._iban = iban;
  	};

  	/**
  	 * This method should be used to create iban object from ethereum address
  	 *
  	 * @method fromAddress
  	 * @param {String} address
  	 * @return {Iban} the IBAN object
  	 */
  	Iban.fromAddress = function (address) {
  	    var asBn = new BigNumber(address, 16);
  	    var base36 = asBn.toString(36);
  	    var padded = padLeft(base36, 15);
  	    return Iban.fromBban(padded.toUpperCase());
  	};

  	/**
  	 * Convert the passed BBAN to an IBAN for this country specification.
  	 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
  	 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
  	 *
  	 * @method fromBban
  	 * @param {String} bban the BBAN to convert to IBAN
  	 * @returns {Iban} the IBAN object
  	 */
  	Iban.fromBban = function (bban) {
  	    var countryCode = 'XE';

  	    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
  	    var checkDigit = ('0' + (98 - remainder)).slice(-2);

  	    return new Iban(countryCode + checkDigit + bban);
  	};

  	/**
  	 * Should be used to create IBAN object for given institution and identifier
  	 *
  	 * @method createIndirect
  	 * @param {Object} options, required options are "institution" and "identifier"
  	 * @return {Iban} the IBAN object
  	 */
  	Iban.createIndirect = function (options) {
  	    return Iban.fromBban('ETH' + options.institution + options.identifier);
  	};

  	/**
  	 * Thos method should be used to check if given string is valid iban object
  	 *
  	 * @method isValid
  	 * @param {String} iban string
  	 * @return {Boolean} true if it is valid IBAN
  	 */
  	Iban.isValid = function (iban) {
  	    var i = new Iban(iban);
  	    return i.isValid();
  	};

  	/**
  	 * Should be called to check if iban is correct
  	 *
  	 * @method isValid
  	 * @returns {Boolean} true if it is, otherwise false
  	 */
  	Iban.prototype.isValid = function () {
  	    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
  	        mod9710(iso13616Prepare(this._iban)) === 1;
  	};

  	/**
  	 * Should be called to check if iban number is direct
  	 *
  	 * @method isDirect
  	 * @returns {Boolean} true if it is, otherwise false
  	 */
  	Iban.prototype.isDirect = function () {
  	    return this._iban.length === 34 || this._iban.length === 35;
  	};

  	/**
  	 * Should be called to check if iban number if indirect
  	 *
  	 * @method isIndirect
  	 * @returns {Boolean} true if it is, otherwise false
  	 */
  	Iban.prototype.isIndirect = function () {
  	    return this._iban.length === 20;
  	};

  	/**
  	 * Should be called to get iban checksum
  	 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
  	 *
  	 * @method checksum
  	 * @returns {String} checksum
  	 */
  	Iban.prototype.checksum = function () {
  	    return this._iban.substr(2, 2);
  	};

  	/**
  	 * Should be called to get institution identifier
  	 * eg. XREG
  	 *
  	 * @method institution
  	 * @returns {String} institution identifier
  	 */
  	Iban.prototype.institution = function () {
  	    return this.isIndirect() ? this._iban.substr(7, 4) : '';
  	};

  	/**
  	 * Should be called to get client identifier within institution
  	 * eg. GAVOFYORK
  	 *
  	 * @method client
  	 * @returns {String} client identifier
  	 */
  	Iban.prototype.client = function () {
  	    return this.isIndirect() ? this._iban.substr(11) : '';
  	};

  	/**
  	 * Should be called to get client direct address
  	 *
  	 * @method address
  	 * @returns {String} client direct address
  	 */
  	Iban.prototype.address = function () {
  	    if (this.isDirect()) {
  	        var base36 = this._iban.substr(4);
  	        var asBn = new BigNumber(base36, 36);
  	        return padLeft(asBn.toString(16), 20);
  	    } 

  	    return '';
  	};

  	Iban.prototype.toString = function () {
  	    return this._iban;
  	};

  	module.exports = Iban;


  	},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){

  	var utils = require('../utils/utils');
  	var errors = require('./errors');


  	var IpcProvider = function (path, net) {
  	    var _this = this;
  	    this.responseCallbacks = {};
  	    this.path = path;
  	    
  	    this.connection = net.connect({path: this.path});

  	    this.connection.on('error', function(e){
  	        console.error('IPC Connection Error', e);
  	        _this._timeout();
  	    });

  	    this.connection.on('end', function(){
  	        _this._timeout();
  	    }); 


  	    // LISTEN FOR CONNECTION RESPONSES
  	    this.connection.on('data', function(data) {
  	        /*jshint maxcomplexity: 6 */

  	        _this._parseResponse(data.toString()).forEach(function(result){

  	            var id = null;

  	            // get the id which matches the returned id
  	            if(utils.isArray(result)) {
  	                result.forEach(function(load){
  	                    if(_this.responseCallbacks[load.id])
  	                        { id = load.id; }
  	                });
  	            } else {
  	                id = result.id;
  	            }

  	            // fire the callback
  	            if(_this.responseCallbacks[id]) {
  	                _this.responseCallbacks[id](null, result);
  	                delete _this.responseCallbacks[id];
  	            }
  	        });
  	    });
  	};

  	/**
  	Will parse the response and make an array out of it.

  	@method _parseResponse
  	@param {String} data
  	*/
  	IpcProvider.prototype._parseResponse = function(data) {
  	    var _this = this,
  	        returnValues = [];
  	    
  	    // DE-CHUNKER
  	    var dechunkedData = data
  	        .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
  	        .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
  	        .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
  	        .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
  	        .split('|--|');

  	    dechunkedData.forEach(function(data){

  	        // prepend the last chunk
  	        if(_this.lastChunk)
  	            { data = _this.lastChunk + data; }

  	        var result = null;

  	        try {
  	            result = JSON.parse(data);

  	        } catch(e) {

  	            _this.lastChunk = data;

  	            // start timeout to cancel all requests
  	            clearTimeout(_this.lastChunkTimeout);
  	            _this.lastChunkTimeout = setTimeout(function(){
  	                _this._timeout();
  	                throw errors.InvalidResponse(data);
  	            }, 1000 * 15);

  	            return;
  	        }

  	        // cancel timeout and set chunk to null
  	        clearTimeout(_this.lastChunkTimeout);
  	        _this.lastChunk = null;

  	        if(result)
  	            { returnValues.push(result); }
  	    });

  	    return returnValues;
  	};


  	/**
  	Get the adds a callback to the responseCallbacks object,
  	which will be called if a response matching the response Id will arrive.

  	@method _addResponseCallback
  	*/
  	IpcProvider.prototype._addResponseCallback = function(payload, callback) {
  	    var id = payload.id || payload[0].id;
  	    var method = payload.method || payload[0].method;

  	    this.responseCallbacks[id] = callback;
  	    this.responseCallbacks[id].method = method;
  	};

  	/**
  	Timeout all requests when the end/error event is fired

  	@method _timeout
  	*/
  	IpcProvider.prototype._timeout = function() {
  	    for(var key in this.responseCallbacks) {
  	        if(this.responseCallbacks.hasOwnProperty(key)){
  	            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
  	            delete this.responseCallbacks[key];
  	        }
  	    }
  	};


  	/**
  	Check if the current connection is still valid.

  	@method isConnected
  	*/
  	IpcProvider.prototype.isConnected = function() {
  	    var _this = this;

  	    // try reconnect, when connection is gone
  	    if(!_this.connection.writable)
  	        { _this.connection.connect({path: _this.path}); }

  	    return !!this.connection.writable;
  	};

  	IpcProvider.prototype.send = function (payload) {

  	    if(this.connection.writeSync) {
  	        var result;

  	        // try reconnect, when connection is gone
  	        if(!this.connection.writable)
  	            { this.connection.connect({path: this.path}); }

  	        var data = this.connection.writeSync(JSON.stringify(payload));

  	        try {
  	            result = JSON.parse(data);
  	        } catch(e) {
  	            throw errors.InvalidResponse(data);                
  	        }

  	        return result;

  	    } else {
  	        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
  	    }
  	};

  	IpcProvider.prototype.sendAsync = function (payload, callback) {
  	    // try reconnect, when connection is gone
  	    if(!this.connection.writable)
  	        { this.connection.connect({path: this.path}); }


  	    this.connection.write(JSON.stringify(payload));
  	    this._addResponseCallback(payload, callback);
  	};

  	module.exports = IpcProvider;


  	},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file jsonrpc.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 *   Aaron Kumavis <aaron@kumavis.me>
  	 * @date 2015
  	 */

  	// Initialize Jsonrpc as a simple object with utility functions.
  	var Jsonrpc = {
  	    messageId: 0
  	};

  	/**
  	 * Should be called to valid json create payload object
  	 *
  	 * @method toPayload
  	 * @param {Function} method of jsonrpc call, required
  	 * @param {Array} params, an array of method params, optional
  	 * @returns {Object} valid jsonrpc payload object
  	 */
  	Jsonrpc.toPayload = function (method, params) {
  	    if (!method)
  	        { console.error('jsonrpc method should be specified!'); }

  	    // advance message ID
  	    Jsonrpc.messageId++;

  	    return {
  	        jsonrpc: '2.0',
  	        id: Jsonrpc.messageId,
  	        method: method,
  	        params: params || []
  	    };
  	};

  	/**
  	 * Should be called to check if jsonrpc response is valid
  	 *
  	 * @method isValidResponse
  	 * @param {Object}
  	 * @returns {Boolean} true if response is valid, otherwise false
  	 */
  	Jsonrpc.isValidResponse = function (response) {
  	    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

  	    function validateSingleMessage(message){
  	      return !!message &&
  	        !message.error &&
  	        message.jsonrpc === '2.0' &&
  	        typeof message.id === 'number' &&
  	        message.result !== undefined; // only undefined is not valid json object
  	    }
  	};

  	/**
  	 * Should be called to create batch payload object
  	 *
  	 * @method toBatchPayload
  	 * @param {Array} messages, an array of objects with method (required) and params (optional) fields
  	 * @returns {Array} batch payload
  	 */
  	Jsonrpc.toBatchPayload = function (messages) {
  	    return messages.map(function (message) {
  	        return Jsonrpc.toPayload(message.method, message.params);
  	    });
  	};

  	module.exports = Jsonrpc;


  	},{}],36:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file method.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var utils = require('../utils/utils');
  	var errors = require('./errors');

  	var Method = function (options) {
  	    this.name = options.name;
  	    this.call = options.call;
  	    this.params = options.params || 0;
  	    this.inputFormatter = options.inputFormatter;
  	    this.outputFormatter = options.outputFormatter;
  	    this.requestManager = null;
  	};

  	Method.prototype.setRequestManager = function (rm) {
  	    this.requestManager = rm;
  	};

  	/**
  	 * Should be used to determine name of the jsonrpc method based on arguments
  	 *
  	 * @method getCall
  	 * @param {Array} arguments
  	 * @return {String} name of jsonrpc method
  	 */
  	Method.prototype.getCall = function (args) {
  	    return utils.isFunction(this.call) ? this.call(args) : this.call;
  	};

  	/**
  	 * Should be used to extract callback from array of arguments. Modifies input param
  	 *
  	 * @method extractCallback
  	 * @param {Array} arguments
  	 * @return {Function|Null} callback, if exists
  	 */
  	Method.prototype.extractCallback = function (args) {
  	    if (utils.isFunction(args[args.length - 1])) {
  	        return args.pop(); // modify the args array!
  	    }
  	};

  	/**
  	 * Should be called to check if the number of arguments is correct
  	 * 
  	 * @method validateArgs
  	 * @param {Array} arguments
  	 * @throws {Error} if it is not
  	 */
  	Method.prototype.validateArgs = function (args) {
  	    if (args.length !== this.params) {
  	        throw errors.InvalidNumberOfRPCParams();
  	    }
  	};

  	/**
  	 * Should be called to format input args of method
  	 * 
  	 * @method formatInput
  	 * @param {Array}
  	 * @return {Array}
  	 */
  	Method.prototype.formatInput = function (args) {
  	    if (!this.inputFormatter) {
  	        return args;
  	    }

  	    return this.inputFormatter.map(function (formatter, index) {
  	        return formatter ? formatter(args[index]) : args[index];
  	    });
  	};

  	/**
  	 * Should be called to format output(result) of method
  	 *
  	 * @method formatOutput
  	 * @param {Object}
  	 * @return {Object}
  	 */
  	Method.prototype.formatOutput = function (result) {
  	    return this.outputFormatter && result ? this.outputFormatter(result) : result;
  	};

  	/**
  	 * Should create payload from given input args
  	 *
  	 * @method toPayload
  	 * @param {Array} args
  	 * @return {Object}
  	 */
  	Method.prototype.toPayload = function (args) {
  	    var call = this.getCall(args);
  	    var callback = this.extractCallback(args);
  	    var params = this.formatInput(args);
  	    this.validateArgs(params);

  	    return {
  	        method: call,
  	        params: params,
  	        callback: callback
  	    };
  	};

  	Method.prototype.attachToObject = function (obj) {
  	    var func = this.buildCall();
  	    func.call = this.call; // TODO!!! that's ugly. filter.js uses it
  	    var name = this.name.split('.');
  	    if (name.length > 1) {
  	        obj[name[0]] = obj[name[0]] || {};
  	        obj[name[0]][name[1]] = func;
  	    } else {
  	        obj[name[0]] = func; 
  	    }
  	};

  	Method.prototype.buildCall = function() {
  	    var method = this;
  	    var send = function () {
  	        var payload = method.toPayload(Array.prototype.slice.call(arguments));
  	        if (payload.callback) {
  	            return method.requestManager.sendAsync(payload, function (err, result) {
  	                payload.callback(err, method.formatOutput(result));
  	            });
  	        }
  	        return method.formatOutput(method.requestManager.send(payload));
  	    };
  	    send.request = this.request.bind(this);
  	    return send;
  	};

  	/**
  	 * Should be called to create pure JSONRPC request which can be used in batch request
  	 *
  	 * @method request
  	 * @param {...} params
  	 * @return {Object} jsonrpc request
  	 */
  	Method.prototype.request = function () {
  	    var payload = this.toPayload(Array.prototype.slice.call(arguments));
  	    payload.format = this.formatOutput.bind(this);
  	    return payload;
  	};

  	module.exports = Method;

  	},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file db.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var Method = require('../method');

  	var DB = function (web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;
  	    
  	    methods().forEach(function(method) { 
  	        method.attachToObject(self);
  	        method.setRequestManager(web3._requestManager);
  	    });
  	};

  	var methods = function () {
  	    var putString = new Method({
  	        name: 'putString',
  	        call: 'db_putString',
  	        params: 3
  	    });

  	    var getString = new Method({
  	        name: 'getString',
  	        call: 'db_getString',
  	        params: 2
  	    });

  	    var putHex = new Method({
  	        name: 'putHex',
  	        call: 'db_putHex',
  	        params: 3
  	    });

  	    var getHex = new Method({
  	        name: 'getHex',
  	        call: 'db_getHex',
  	        params: 2
  	    });

  	    return [
  	        putString, getString, putHex, getHex
  	    ];
  	};

  	module.exports = DB;

  	},{"../method":36}],38:[function(require,module,exports){

  	var formatters = require('../formatters');
  	var utils = require('../../utils/utils');
  	var Method = require('../method');
  	var Property = require('../property');
  	var c = require('../../utils/config');
  	var Contract = require('../contract');
  	var watches = require('./watches');
  	var Filter = require('../filter');
  	var IsSyncing = require('../syncing');
  	var namereg = require('../namereg');
  	var Iban = require('../iban');
  	var transfer = require('../transfer');

  	var blockCall = function (args) {
  	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
  	};

  	var transactionFromBlockCall = function (args) {
  	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
  	};

  	var uncleCall = function (args) {
  	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
  	};

  	var getBlockTransactionCountCall = function (args) {
  	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
  	};

  	var uncleCountCall = function (args) {
  	    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
  	};

  	function Eth(web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;

  	    methods().forEach(function(method) {
  	        method.attachToObject(self);
  	        method.setRequestManager(self._requestManager);
  	    });

  	    properties().forEach(function(p) {
  	        p.attachToObject(self);
  	        p.setRequestManager(self._requestManager);
  	    });


  	    this.iban = Iban;
  	    this.sendIBANTransaction = transfer.bind(null, this);
  	}

  	Object.defineProperty(Eth.prototype, 'defaultBlock', {
  	    get: function () {
  	        return c.defaultBlock;
  	    },
  	    set: function (val) {
  	        c.defaultBlock = val;
  	        return val;
  	    }
  	});

  	Object.defineProperty(Eth.prototype, 'defaultAccount', {
  	    get: function () {
  	        return c.defaultAccount;
  	    },
  	    set: function (val) {
  	        c.defaultAccount = val;
  	        return val;
  	    }
  	});

  	var methods = function () {
  	    var getBalance = new Method({
  	        name: 'getBalance',
  	        call: 'eth_getBalance',
  	        params: 2,
  	        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
  	        outputFormatter: formatters.outputBigNumberFormatter
  	    });

  	    var getStorageAt = new Method({
  	        name: 'getStorageAt',
  	        call: 'eth_getStorageAt',
  	        params: 3,
  	        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
  	    });

  	    var getCode = new Method({
  	        name: 'getCode',
  	        call: 'eth_getCode',
  	        params: 2,
  	        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
  	    });

  	    var getBlock = new Method({
  	        name: 'getBlock',
  	        call: blockCall,
  	        params: 2,
  	        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],
  	        outputFormatter: formatters.outputBlockFormatter
  	    });

  	    var getUncle = new Method({
  	        name: 'getUncle',
  	        call: uncleCall,
  	        params: 2,
  	        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
  	        outputFormatter: formatters.outputBlockFormatter,

  	    });

  	    var getCompilers = new Method({
  	        name: 'getCompilers',
  	        call: 'eth_getCompilers',
  	        params: 0
  	    });

  	    var getBlockTransactionCount = new Method({
  	        name: 'getBlockTransactionCount',
  	        call: getBlockTransactionCountCall,
  	        params: 1,
  	        inputFormatter: [formatters.inputBlockNumberFormatter],
  	        outputFormatter: utils.toDecimal
  	    });

  	    var getBlockUncleCount = new Method({
  	        name: 'getBlockUncleCount',
  	        call: uncleCountCall,
  	        params: 1,
  	        inputFormatter: [formatters.inputBlockNumberFormatter],
  	        outputFormatter: utils.toDecimal
  	    });

  	    var getTransaction = new Method({
  	        name: 'getTransaction',
  	        call: 'eth_getTransactionByHash',
  	        params: 1,
  	        outputFormatter: formatters.outputTransactionFormatter
  	    });

  	    var getTransactionFromBlock = new Method({
  	        name: 'getTransactionFromBlock',
  	        call: transactionFromBlockCall,
  	        params: 2,
  	        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
  	        outputFormatter: formatters.outputTransactionFormatter
  	    });

  	    var getTransactionReceipt = new Method({
  	        name: 'getTransactionReceipt',
  	        call: 'eth_getTransactionReceipt',
  	        params: 1,
  	        outputFormatter: formatters.outputTransactionReceiptFormatter
  	    });

  	    var getTransactionCount = new Method({
  	        name: 'getTransactionCount',
  	        call: 'eth_getTransactionCount',
  	        params: 2,
  	        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],
  	        outputFormatter: utils.toDecimal
  	    });

  	    var sendRawTransaction = new Method({
  	        name: 'sendRawTransaction',
  	        call: 'eth_sendRawTransaction',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var sendTransaction = new Method({
  	        name: 'sendTransaction',
  	        call: 'eth_sendTransaction',
  	        params: 1,
  	        inputFormatter: [formatters.inputTransactionFormatter]
  	    });

  	    var signTransaction = new Method({
  	        name: 'signTransaction',
  	        call: 'eth_signTransaction',
  	        params: 1,
  	        inputFormatter: [formatters.inputTransactionFormatter]
  	    });

  	    var sign = new Method({
  	        name: 'sign',
  	        call: 'eth_sign',
  	        params: 2,
  	        inputFormatter: [formatters.inputAddressFormatter, null]
  	    });

  	    var call = new Method({
  	        name: 'call',
  	        call: 'eth_call',
  	        params: 2,
  	        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
  	    });

  	    var estimateGas = new Method({
  	        name: 'estimateGas',
  	        call: 'eth_estimateGas',
  	        params: 1,
  	        inputFormatter: [formatters.inputCallFormatter],
  	        outputFormatter: utils.toDecimal
  	    });

  	    var compileSolidity = new Method({
  	        name: 'compile.solidity',
  	        call: 'eth_compileSolidity',
  	        params: 1
  	    });

  	    var compileLLL = new Method({
  	        name: 'compile.lll',
  	        call: 'eth_compileLLL',
  	        params: 1
  	    });

  	    var compileSerpent = new Method({
  	        name: 'compile.serpent',
  	        call: 'eth_compileSerpent',
  	        params: 1
  	    });

  	    var submitWork = new Method({
  	        name: 'submitWork',
  	        call: 'eth_submitWork',
  	        params: 3
  	    });

  	    var getWork = new Method({
  	        name: 'getWork',
  	        call: 'eth_getWork',
  	        params: 0
  	    });

  	    return [
  	        getBalance,
  	        getStorageAt,
  	        getCode,
  	        getBlock,
  	        getUncle,
  	        getCompilers,
  	        getBlockTransactionCount,
  	        getBlockUncleCount,
  	        getTransaction,
  	        getTransactionFromBlock,
  	        getTransactionReceipt,
  	        getTransactionCount,
  	        call,
  	        estimateGas,
  	        sendRawTransaction,
  	        signTransaction,
  	        sendTransaction,
  	        sign,
  	        compileSolidity,
  	        compileLLL,
  	        compileSerpent,
  	        submitWork,
  	        getWork
  	    ];
  	};


  	var properties = function () {
  	    return [
  	        new Property({
  	            name: 'coinbase',
  	            getter: 'eth_coinbase'
  	        }),
  	        new Property({
  	            name: 'mining',
  	            getter: 'eth_mining'
  	        }),
  	        new Property({
  	            name: 'hashrate',
  	            getter: 'eth_hashrate',
  	            outputFormatter: utils.toDecimal
  	        }),
  	        new Property({
  	            name: 'syncing',
  	            getter: 'eth_syncing',
  	            outputFormatter: formatters.outputSyncingFormatter
  	        }),
  	        new Property({
  	            name: 'gasPrice',
  	            getter: 'eth_gasPrice',
  	            outputFormatter: formatters.outputBigNumberFormatter
  	        }),
  	        new Property({
  	            name: 'accounts',
  	            getter: 'eth_accounts'
  	        }),
  	        new Property({
  	            name: 'blockNumber',
  	            getter: 'eth_blockNumber',
  	            outputFormatter: utils.toDecimal
  	        }),
  	        new Property({
  	            name: 'protocolVersion',
  	            getter: 'eth_protocolVersion'
  	        })
  	    ];
  	};

  	Eth.prototype.contract = function (abi) {
  	    var factory = new Contract(this, abi);
  	    return factory;
  	};

  	Eth.prototype.filter = function (options, callback, filterCreationErrorCallback) {
  	    return new Filter(options, 'eth', this._requestManager, watches.eth(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
  	};

  	Eth.prototype.namereg = function () {
  	    return this.contract(namereg.global.abi).at(namereg.global.address);
  	};

  	Eth.prototype.icapNamereg = function () {
  	    return this.contract(namereg.icap.abi).at(namereg.icap.address);
  	};

  	Eth.prototype.isSyncing = function (callback) {
  	    return new IsSyncing(this._requestManager, callback);
  	};

  	module.exports = Eth;

  	},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":44,"../property":45,"../syncing":48,"../transfer":49,"./watches":43}],39:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file eth.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var utils = require('../../utils/utils');
  	var Property = require('../property');

  	var Net = function (web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;

  	    properties().forEach(function(p) { 
  	        p.attachToObject(self);
  	        p.setRequestManager(web3._requestManager);
  	    });
  	};

  	/// @returns an array of objects describing web3.eth api properties
  	var properties = function () {
  	    return [
  	        new Property({
  	            name: 'listening',
  	            getter: 'net_listening'
  	        }),
  	        new Property({
  	            name: 'peerCount',
  	            getter: 'net_peerCount',
  	            outputFormatter: utils.toDecimal
  	        })
  	    ];
  	};

  	module.exports = Net;

  	},{"../../utils/utils":20,"../property":45}],40:[function(require,module,exports){

  	var Method = require('../method');
  	var Property = require('../property');
  	var formatters = require('../formatters');

  	function Personal(web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;

  	    methods().forEach(function(method) {
  	        method.attachToObject(self);
  	        method.setRequestManager(self._requestManager);
  	    });

  	    properties().forEach(function(p) {
  	        p.attachToObject(self);
  	        p.setRequestManager(self._requestManager);
  	    });
  	}

  	var methods = function () {
  	    var newAccount = new Method({
  	        name: 'newAccount',
  	        call: 'personal_newAccount',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var importRawKey = new Method({
  	        name: 'importRawKey',
  			call: 'personal_importRawKey',
  			params: 2
  	    });

  	    var sign = new Method({
  	        name: 'sign',
  			call: 'personal_sign',
  			params: 3,
  			inputFormatter: [null, formatters.inputAddressFormatter, null]
  	    });

  	    var ecRecover = new Method({
  	        name: 'ecRecover',
  			call: 'personal_ecRecover',
  			params: 2
  	    });

  	    var unlockAccount = new Method({
  	        name: 'unlockAccount',
  	        call: 'personal_unlockAccount',
  	        params: 3,
  	        inputFormatter: [formatters.inputAddressFormatter, null, null]
  	    });

  	    var sendTransaction = new Method({
  	        name: 'sendTransaction',
  	        call: 'personal_sendTransaction',
  	        params: 2,
  	        inputFormatter: [formatters.inputTransactionFormatter, null]
  	    });

  	    var lockAccount = new Method({
  	        name: 'lockAccount',
  	        call: 'personal_lockAccount',
  	        params: 1,
  	        inputFormatter: [formatters.inputAddressFormatter]
  	    });

  	    return [
  	        newAccount,
  	        importRawKey,
  	        unlockAccount,
  	        ecRecover,
  	        sign,
  	        sendTransaction,
  	        lockAccount
  	    ];
  	};

  	var properties = function () {
  	    return [
  	        new Property({
  	            name: 'listAccounts',
  	            getter: 'personal_listAccounts'
  	        })
  	    ];
  	};


  	module.exports = Personal;

  	},{"../formatters":30,"../method":36,"../property":45}],41:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file shh.js
  	 * @authors:
  	 *   Fabian Vogelsteller <fabian@ethereum.org>
  	 *   Marek Kotewicz <marek@ethcore.io>
  	 * @date 2017
  	 */

  	var Method = require('../method');
  	var Filter = require('../filter');
  	var watches = require('./watches');

  	var Shh = function (web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;

  	    methods().forEach(function(method) {
  	        method.attachToObject(self);
  	        method.setRequestManager(self._requestManager);
  	    });
  	};

  	Shh.prototype.newMessageFilter = function (options, callback, filterCreationErrorCallback) {
  	    return new Filter(options, 'shh', this._requestManager, watches.shh(), null, callback, filterCreationErrorCallback);
  	};

  	var methods = function () {

  	    return [
  	        new Method({
  	            name: 'version',
  	            call: 'shh_version',
  	            params: 0
  	        }),
  	        new Method({
  	            name: 'info',
  	            call: 'shh_info',
  	            params: 0
  	        }),
  	        new Method({
  	            name: 'setMaxMessageSize',
  	            call: 'shh_setMaxMessageSize',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'setMinPoW',
  	            call: 'shh_setMinPoW',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'markTrustedPeer',
  	            call: 'shh_markTrustedPeer',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'newKeyPair',
  	            call: 'shh_newKeyPair',
  	            params: 0
  	        }),
  	        new Method({
  	            name: 'addPrivateKey',
  	            call: 'shh_addPrivateKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'deleteKeyPair',
  	            call: 'shh_deleteKeyPair',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'hasKeyPair',
  	            call: 'shh_hasKeyPair',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'getPublicKey',
  	            call: 'shh_getPublicKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'getPrivateKey',
  	            call: 'shh_getPrivateKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'newSymKey',
  	            call: 'shh_newSymKey',
  	            params: 0
  	        }),
  	        new Method({
  	            name: 'addSymKey',
  	            call: 'shh_addSymKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'generateSymKeyFromPassword',
  	            call: 'shh_generateSymKeyFromPassword',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'hasSymKey',
  	            call: 'shh_hasSymKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'getSymKey',
  	            call: 'shh_getSymKey',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'deleteSymKey',
  	            call: 'shh_deleteSymKey',
  	            params: 1
  	        }),

  	        // subscribe and unsubscribe missing

  	        new Method({
  	            name: 'post',
  	            call: 'shh_post',
  	            params: 1,
  	            inputFormatter: [null]
  	        })
  	    ];
  	};

  	module.exports = Shh;


  	},{"../filter":29,"../method":36,"./watches":43}],42:[function(require,module,exports){

  	var Method = require('../method');
  	var Property = require('../property');

  	function Swarm(web3) {
  	    this._requestManager = web3._requestManager;

  	    var self = this;

  	    methods().forEach(function(method) {
  	        method.attachToObject(self);
  	        method.setRequestManager(self._requestManager);
  	    });

  	    properties().forEach(function(p) {
  	        p.attachToObject(self);
  	        p.setRequestManager(self._requestManager);
  	    });
  	}

  	var methods = function () {
  	    var blockNetworkRead = new Method({
  	        name: 'blockNetworkRead',
  	        call: 'bzz_blockNetworkRead',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var syncEnabled = new Method({
  	        name: 'syncEnabled',
  	        call: 'bzz_syncEnabled',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var swapEnabled = new Method({
  	        name: 'swapEnabled',
  	        call: 'bzz_swapEnabled',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var download = new Method({
  	        name: 'download',
  	        call: 'bzz_download',
  	        params: 2,
  	        inputFormatter: [null, null]
  	    });

  	    var upload = new Method({
  	        name: 'upload',
  	        call: 'bzz_upload',
  	        params: 2,
  	        inputFormatter: [null, null]
  	    });

  	    var retrieve = new Method({
  	        name: 'retrieve',
  	        call: 'bzz_retrieve',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var store = new Method({
  	        name: 'store',
  	        call: 'bzz_store',
  	        params: 2,
  	        inputFormatter: [null, null]
  	    });

  	    var get = new Method({
  	        name: 'get',
  	        call: 'bzz_get',
  	        params: 1,
  	        inputFormatter: [null]
  	    });

  	    var put = new Method({
  	        name: 'put',
  	        call: 'bzz_put',
  	        params: 2,
  	        inputFormatter: [null, null]
  	    });

  	    var modify = new Method({
  	        name: 'modify',
  	        call: 'bzz_modify',
  	        params: 4,
  	        inputFormatter: [null, null, null, null]
  	    });

  	    return [
  	        blockNetworkRead,
  	        syncEnabled,
  	        swapEnabled,
  	        download,
  	        upload,
  	        retrieve,
  	        store,
  	        get,
  	        put,
  	        modify
  	    ];
  	};

  	var properties = function () {
  	    return [
  	        new Property({
  	            name: 'hive',
  	            getter: 'bzz_hive'
  	        }),
  	        new Property({
  	            name: 'info',
  	            getter: 'bzz_info'
  	        })
  	    ];
  	};


  	module.exports = Swarm;

  	},{"../method":36,"../property":45}],43:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file watches.js
  	 * @authors:
  	 *   Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var Method = require('../method');

  	/// @returns an array of objects describing web3.eth.filter api methods
  	var eth = function () {
  	    var newFilterCall = function (args) {
  	        var type = args[0];

  	        switch(type) {
  	            case 'latest':
  	                args.shift();
  	                this.params = 0;
  	                return 'eth_newBlockFilter';
  	            case 'pending':
  	                args.shift();
  	                this.params = 0;
  	                return 'eth_newPendingTransactionFilter';
  	            default:
  	                return 'eth_newFilter';
  	        }
  	    };

  	    var newFilter = new Method({
  	        name: 'newFilter',
  	        call: newFilterCall,
  	        params: 1
  	    });

  	    var uninstallFilter = new Method({
  	        name: 'uninstallFilter',
  	        call: 'eth_uninstallFilter',
  	        params: 1
  	    });

  	    var getLogs = new Method({
  	        name: 'getLogs',
  	        call: 'eth_getFilterLogs',
  	        params: 1
  	    });

  	    var poll = new Method({
  	        name: 'poll',
  	        call: 'eth_getFilterChanges',
  	        params: 1
  	    });

  	    return [
  	        newFilter,
  	        uninstallFilter,
  	        getLogs,
  	        poll
  	    ];
  	};

  	/// @returns an array of objects describing web3.shh.watch api methods
  	var shh = function () {

  	    return [
  	        new Method({
  	            name: 'newFilter',
  	            call: 'shh_newMessageFilter',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'uninstallFilter',
  	            call: 'shh_deleteMessageFilter',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'getLogs',
  	            call: 'shh_getFilterMessages',
  	            params: 1
  	        }),
  	        new Method({
  	            name: 'poll',
  	            call: 'shh_getFilterMessages',
  	            params: 1
  	        })
  	    ];
  	};

  	module.exports = {
  	    eth: eth,
  	    shh: shh
  	};


  	},{"../method":36}],44:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file namereg.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');
  	var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');

  	var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';
  	var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';

  	module.exports = {
  	    global: {
  	        abi: globalRegistrarAbi,
  	        address: globalNameregAddress
  	    },
  	    icap: {
  	        abi: icapRegistrarAbi,
  	        address: icapNameregAddress
  	    }
  	};


  	},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],45:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/**
  	 * @file property.js
  	 * @author Fabian Vogelsteller <fabian@frozeman.de>
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var utils = require('../utils/utils');

  	var Property = function (options) {
  	    this.name = options.name;
  	    this.getter = options.getter;
  	    this.setter = options.setter;
  	    this.outputFormatter = options.outputFormatter;
  	    this.inputFormatter = options.inputFormatter;
  	    this.requestManager = null;
  	};

  	Property.prototype.setRequestManager = function (rm) {
  	    this.requestManager = rm;
  	};

  	/**
  	 * Should be called to format input args of method
  	 *
  	 * @method formatInput
  	 * @param {Array}
  	 * @return {Array}
  	 */
  	Property.prototype.formatInput = function (arg) {
  	    return this.inputFormatter ? this.inputFormatter(arg) : arg;
  	};

  	/**
  	 * Should be called to format output(result) of method
  	 *
  	 * @method formatOutput
  	 * @param {Object}
  	 * @return {Object}
  	 */
  	Property.prototype.formatOutput = function (result) {
  	    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;
  	};

  	/**
  	 * Should be used to extract callback from array of arguments. Modifies input param
  	 *
  	 * @method extractCallback
  	 * @param {Array} arguments
  	 * @return {Function|Null} callback, if exists
  	 */
  	Property.prototype.extractCallback = function (args) {
  	    if (utils.isFunction(args[args.length - 1])) {
  	        return args.pop(); // modify the args array!
  	    }
  	};


  	/**
  	 * Should attach function to method
  	 *
  	 * @method attachToObject
  	 * @param {Object}
  	 * @param {Function}
  	 */
  	Property.prototype.attachToObject = function (obj) {
  	    var proto = {
  	        get: this.buildGet(),
  	        enumerable: true
  	    };

  	    var names = this.name.split('.');
  	    var name = names[0];
  	    if (names.length > 1) {
  	        obj[names[0]] = obj[names[0]] || {};
  	        obj = obj[names[0]];
  	        name = names[1];
  	    }

  	    Object.defineProperty(obj, name, proto);
  	    obj[asyncGetterName(name)] = this.buildAsyncGet();
  	};

  	var asyncGetterName = function (name) {
  	    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);
  	};

  	Property.prototype.buildGet = function () {
  	    var property = this;
  	    return function get() {
  	        return property.formatOutput(property.requestManager.send({
  	            method: property.getter
  	        }));
  	    };
  	};

  	Property.prototype.buildAsyncGet = function () {
  	    var property = this;
  	    var get = function (callback) {
  	        property.requestManager.sendAsync({
  	            method: property.getter
  	        }, function (err, result) {
  	            callback(err, property.formatOutput(result));
  	        });
  	    };
  	    get.request = this.request.bind(this);
  	    return get;
  	};

  	/**
  	 * Should be called to create pure JSONRPC request which can be used in batch request
  	 *
  	 * @method request
  	 * @param {...} params
  	 * @return {Object} jsonrpc request
  	 */
  	Property.prototype.request = function () {
  	    var payload = {
  	        method: this.getter,
  	        params: [],
  	        callback: this.extractCallback(Array.prototype.slice.call(arguments))
  	    };
  	    payload.format = this.formatOutput.bind(this);
  	    return payload;
  	};

  	module.exports = Property;


  	},{"../utils/utils":20}],46:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file requestmanager.js
  	 * @author Jeffrey Wilcke <jeff@ethdev.com>
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @author Marian Oancea <marian@ethdev.com>
  	 * @author Fabian Vogelsteller <fabian@ethdev.com>
  	 * @author Gav Wood <g@ethdev.com>
  	 * @date 2014
  	 */

  	var Jsonrpc = require('./jsonrpc');
  	var utils = require('../utils/utils');
  	var c = require('../utils/config');
  	var errors = require('./errors');

  	/**
  	 * It's responsible for passing messages to providers
  	 * It's also responsible for polling the ethereum node for incoming messages
  	 * Default poll timeout is 1 second
  	 * Singleton
  	 */
  	var RequestManager = function (provider) {
  	    this.provider = provider;
  	    this.polls = {};
  	    this.timeout = null;
  	};

  	/**
  	 * Should be used to synchronously send request
  	 *
  	 * @method send
  	 * @param {Object} data
  	 * @return {Object}
  	 */
  	RequestManager.prototype.send = function (data) {
  	    if (!this.provider) {
  	        console.error(errors.InvalidProvider());
  	        return null;
  	    }

  	    var payload = Jsonrpc.toPayload(data.method, data.params);
  	    var result = this.provider.send(payload);

  	    if (!Jsonrpc.isValidResponse(result)) {
  	        throw errors.InvalidResponse(result);
  	    }

  	    return result.result;
  	};

  	/**
  	 * Should be used to asynchronously send request
  	 *
  	 * @method sendAsync
  	 * @param {Object} data
  	 * @param {Function} callback
  	 */
  	RequestManager.prototype.sendAsync = function (data, callback) {
  	    if (!this.provider) {
  	        return callback(errors.InvalidProvider());
  	    }

  	    var payload = Jsonrpc.toPayload(data.method, data.params);
  	    this.provider.sendAsync(payload, function (err, result) {
  	        if (err) {
  	            return callback(err);
  	        }
  	        
  	        if (!Jsonrpc.isValidResponse(result)) {
  	            return callback(errors.InvalidResponse(result));
  	        }

  	        callback(null, result.result);
  	    });
  	};

  	/**
  	 * Should be called to asynchronously send batch request
  	 *
  	 * @method sendBatch
  	 * @param {Array} batch data
  	 * @param {Function} callback
  	 */
  	RequestManager.prototype.sendBatch = function (data, callback) {
  	    if (!this.provider) {
  	        return callback(errors.InvalidProvider());
  	    }

  	    var payload = Jsonrpc.toBatchPayload(data);

  	    this.provider.sendAsync(payload, function (err, results) {
  	        if (err) {
  	            return callback(err);
  	        }

  	        if (!utils.isArray(results)) {
  	            return callback(errors.InvalidResponse(results));
  	        }

  	        callback(err, results);
  	    }); 
  	};

  	/**
  	 * Should be used to set provider of request manager
  	 *
  	 * @method setProvider
  	 * @param {Object}
  	 */
  	RequestManager.prototype.setProvider = function (p) {
  	    this.provider = p;
  	};

  	/**
  	 * Should be used to start polling
  	 *
  	 * @method startPolling
  	 * @param {Object} data
  	 * @param {Number} pollId
  	 * @param {Function} callback
  	 * @param {Function} uninstall
  	 *
  	 * @todo cleanup number of params
  	 */
  	RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {
  	    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};


  	    // start polling
  	    if (!this.timeout) {
  	        this.poll();
  	    }
  	};

  	/**
  	 * Should be used to stop polling for filter with given id
  	 *
  	 * @method stopPolling
  	 * @param {Number} pollId
  	 */
  	RequestManager.prototype.stopPolling = function (pollId) {
  	    delete this.polls[pollId];

  	    // stop polling
  	    if(Object.keys(this.polls).length === 0 && this.timeout) {
  	        clearTimeout(this.timeout);
  	        this.timeout = null;
  	    }
  	};

  	/**
  	 * Should be called to reset the polling mechanism of the request manager
  	 *
  	 * @method reset
  	 */
  	RequestManager.prototype.reset = function (keepIsSyncing) {
  	    /*jshint maxcomplexity:5 */

  	    for (var key in this.polls) {
  	        // remove all polls, except sync polls,
  	        // they need to be removed manually by calling syncing.stopWatching()
  	        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {
  	            this.polls[key].uninstall();
  	            delete this.polls[key];
  	        }
  	    }

  	    // stop polling
  	    if(Object.keys(this.polls).length === 0 && this.timeout) {
  	        clearTimeout(this.timeout);
  	        this.timeout = null;
  	    }
  	};

  	/**
  	 * Should be called to poll for changes on filter with given id
  	 *
  	 * @method poll
  	 */
  	RequestManager.prototype.poll = function () {
  	    /*jshint maxcomplexity: 6 */
  	    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);

  	    if (Object.keys(this.polls).length === 0) {
  	        return;
  	    }

  	    if (!this.provider) {
  	        console.error(errors.InvalidProvider());
  	        return;
  	    }

  	    var pollsData = [];
  	    var pollsIds = [];
  	    for (var key in this.polls) {
  	        pollsData.push(this.polls[key].data);
  	        pollsIds.push(key);
  	    }

  	    if (pollsData.length === 0) {
  	        return;
  	    }

  	    var payload = Jsonrpc.toBatchPayload(pollsData);
  	    
  	    // map the request id to they poll id
  	    var pollsIdMap = {};
  	    payload.forEach(function(load, index){
  	        pollsIdMap[load.id] = pollsIds[index];
  	    });


  	    var self = this;
  	    this.provider.sendAsync(payload, function (error, results) {


  	        // TODO: console log?
  	        if (error) {
  	            return;
  	        }

  	        if (!utils.isArray(results)) {
  	            throw errors.InvalidResponse(results);
  	        }
  	        results.map(function (result) {
  	            var id = pollsIdMap[result.id];

  	            // make sure the filter is still installed after arrival of the request
  	            if (self.polls[id]) {
  	                result.callback = self.polls[id].callback;
  	                return result;
  	            } else
  	                { return false; }
  	        }).filter(function (result) {
  	            return !!result; 
  	        }).filter(function (result) {
  	            var valid = Jsonrpc.isValidResponse(result);
  	            if (!valid) {
  	                result.callback(errors.InvalidResponse(result));
  	            }
  	            return valid;
  	        }).forEach(function (result) {
  	            result.callback(null, result.result);
  	        });
  	    });
  	};

  	module.exports = RequestManager;


  	},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],47:[function(require,module,exports){


  	var Settings = function () {
  	    this.defaultBlock = 'latest';
  	    this.defaultAccount = undefined;
  	};

  	module.exports = Settings;


  	},{}],48:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** @file syncing.js
  	 * @authors:
  	 *   Fabian Vogelsteller <fabian@ethdev.com>
  	 * @date 2015
  	 */

  	var formatters = require('./formatters');
  	var utils = require('../utils/utils');

  	var count = 1;

  	/**
  	Adds the callback and sets up the methods, to iterate over the results.

  	@method pollSyncing
  	@param {Object} self
  	*/
  	var pollSyncing = function(self) {

  	    var onMessage = function (error, sync) {
  	        if (error) {
  	            return self.callbacks.forEach(function (callback) {
  	                callback(error);
  	            });
  	        }

  	        if(utils.isObject(sync) && sync.startingBlock)
  	            { sync = formatters.outputSyncingFormatter(sync); }

  	        self.callbacks.forEach(function (callback) {
  	            if (self.lastSyncState !== sync) {
  	                
  	                // call the callback with true first so the app can stop anything, before receiving the sync data
  	                if(!self.lastSyncState && utils.isObject(sync))
  	                    { callback(null, true); }
  	                
  	                // call on the next CPU cycle, so the actions of the sync stop can be processes first
  	                setTimeout(function() {
  	                    callback(null, sync);
  	                }, 0);
  	                
  	                self.lastSyncState = sync;
  	            }
  	        });
  	    };

  	    self.requestManager.startPolling({
  	        method: 'eth_syncing',
  	        params: [],
  	    }, self.pollId, onMessage, self.stopWatching.bind(self));

  	};

  	var IsSyncing = function (requestManager, callback) {
  	    this.requestManager = requestManager;
  	    this.pollId = 'syncPoll_'+ count++;
  	    this.callbacks = [];
  	    this.addCallback(callback);
  	    this.lastSyncState = false;
  	    pollSyncing(this);

  	    return this;
  	};

  	IsSyncing.prototype.addCallback = function (callback) {
  	    if(callback)
  	        { this.callbacks.push(callback); }
  	    return this;
  	};

  	IsSyncing.prototype.stopWatching = function () {
  	    this.requestManager.stopPolling(this.pollId);
  	    this.callbacks = [];
  	};

  	module.exports = IsSyncing;


  	},{"../utils/utils":20,"./formatters":30}],49:[function(require,module,exports){
  	/*
  	    This file is part of web3.js.

  	    web3.js is free software: you can redistribute it and/or modify
  	    it under the terms of the GNU Lesser General Public License as published by
  	    the Free Software Foundation, either version 3 of the License, or
  	    (at your option) any later version.

  	    web3.js is distributed in the hope that it will be useful,
  	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  	    GNU Lesser General Public License for more details.

  	    You should have received a copy of the GNU Lesser General Public License
  	    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  	*/
  	/** 
  	 * @file transfer.js
  	 * @author Marek Kotewicz <marek@ethdev.com>
  	 * @date 2015
  	 */

  	var Iban = require('./iban');
  	var exchangeAbi = require('../contracts/SmartExchange.json');

  	/**
  	 * Should be used to make Iban transfer
  	 *
  	 * @method transfer
  	 * @param {String} from
  	 * @param {String} to iban
  	 * @param {Value} value to be tranfered
  	 * @param {Function} callback, callback
  	 */
  	var transfer = function (eth, from, to, value, callback) {
  	    var iban = new Iban(to); 
  	    if (!iban.isValid()) {
  	        throw new Error('invalid iban address');
  	    }

  	    if (iban.isDirect()) {
  	        return transferToAddress(eth, from, iban.address(), value, callback);
  	    }
  	    
  	    if (!callback) {
  	        var address = eth.icapNamereg().addr(iban.institution());
  	        return deposit(eth, from, address, value, iban.client());
  	    }

  	    eth.icapNamereg().addr(iban.institution(), function (err, address) {
  	        return deposit(eth, from, address, value, iban.client(), callback);
  	    });
  	    
  	};

  	/**
  	 * Should be used to transfer funds to certain address
  	 *
  	 * @method transferToAddress
  	 * @param {String} from
  	 * @param {String} to
  	 * @param {Value} value to be tranfered
  	 * @param {Function} callback, callback
  	 */
  	var transferToAddress = function (eth, from, to, value, callback) {
  	    return eth.sendTransaction({
  	        address: to,
  	        from: from,
  	        value: value
  	    }, callback);
  	};

  	/**
  	 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)
  	 *
  	 * @method deposit
  	 * @param {String} from
  	 * @param {String} to
  	 * @param {Value} value to be transfered
  	 * @param {String} client unique identifier
  	 * @param {Function} callback, callback
  	 */
  	var deposit = function (eth, from, to, value, client, callback) {
  	    var abi = exchangeAbi;
  	    return eth.contract(abi).at(to).deposit(client, {
  	        from: from,
  	        value: value
  	    }, callback);
  	};

  	module.exports = transfer;


  	},{"../contracts/SmartExchange.json":3,"./iban":33}],50:[function(require,module,exports){

  	exports.byteLength = byteLength;
  	exports.toByteArray = toByteArray;
  	exports.fromByteArray = fromByteArray;

  	var lookup = [];
  	var revLookup = [];
  	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

  	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  	for (var i = 0, len = code.length; i < len; ++i) {
  	  lookup[i] = code[i];
  	  revLookup[code.charCodeAt(i)] = i;
  	}

  	// Support decoding URL-safe base64 strings, as Node.js does.
  	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
  	revLookup['-'.charCodeAt(0)] = 62;
  	revLookup['_'.charCodeAt(0)] = 63;

  	function getLens (b64) {
  	  var len = b64.length;

  	  if (len % 4 > 0) {
  	    throw new Error('Invalid string. Length must be a multiple of 4')
  	  }

  	  // Trim off extra bytes after placeholder bytes are found
  	  // See: https://github.com/beatgammit/base64-js/issues/42
  	  var validLen = b64.indexOf('=');
  	  if (validLen === -1) { validLen = len; }

  	  var placeHoldersLen = validLen === len
  	    ? 0
  	    : 4 - (validLen % 4);

  	  return [validLen, placeHoldersLen]
  	}

  	// base64 is 4/3 + up to two characters of the original data
  	function byteLength (b64) {
  	  var lens = getLens(b64);
  	  var validLen = lens[0];
  	  var placeHoldersLen = lens[1];
  	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  	}

  	function _byteLength (b64, validLen, placeHoldersLen) {
  	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  	}

  	function toByteArray (b64) {
  	  var tmp;
  	  var lens = getLens(b64);
  	  var validLen = lens[0];
  	  var placeHoldersLen = lens[1];

  	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  	  var curByte = 0;

  	  // if there are placeholders, only get up to the last complete 4 chars
  	  var len = placeHoldersLen > 0
  	    ? validLen - 4
  	    : validLen;

  	  for (var i = 0; i < len; i += 4) {
  	    tmp =
  	      (revLookup[b64.charCodeAt(i)] << 18) |
  	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
  	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
  	      revLookup[b64.charCodeAt(i + 3)];
  	    arr[curByte++] = (tmp >> 16) & 0xFF;
  	    arr[curByte++] = (tmp >> 8) & 0xFF;
  	    arr[curByte++] = tmp & 0xFF;
  	  }

  	  if (placeHoldersLen === 2) {
  	    tmp =
  	      (revLookup[b64.charCodeAt(i)] << 2) |
  	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
  	    arr[curByte++] = tmp & 0xFF;
  	  }

  	  if (placeHoldersLen === 1) {
  	    tmp =
  	      (revLookup[b64.charCodeAt(i)] << 10) |
  	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
  	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
  	    arr[curByte++] = (tmp >> 8) & 0xFF;
  	    arr[curByte++] = tmp & 0xFF;
  	  }

  	  return arr
  	}

  	function tripletToBase64 (num) {
  	  return lookup[num >> 18 & 0x3F] +
  	    lookup[num >> 12 & 0x3F] +
  	    lookup[num >> 6 & 0x3F] +
  	    lookup[num & 0x3F]
  	}

  	function encodeChunk (uint8, start, end) {
  	  var tmp;
  	  var output = [];
  	  for (var i = start; i < end; i += 3) {
  	    tmp =
  	      ((uint8[i] << 16) & 0xFF0000) +
  	      ((uint8[i + 1] << 8) & 0xFF00) +
  	      (uint8[i + 2] & 0xFF);
  	    output.push(tripletToBase64(tmp));
  	  }
  	  return output.join('')
  	}

  	function fromByteArray (uint8) {
  	  var tmp;
  	  var len = uint8.length;
  	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  	  var parts = [];
  	  var maxChunkLength = 16383; // must be multiple of 3

  	  // go through the array every three bytes, we'll deal with trailing stuff later
  	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
  	    parts.push(encodeChunk(
  	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
  	    ));
  	  }

  	  // pad the end with zeros, but make sure to not forget the extra bytes
  	  if (extraBytes === 1) {
  	    tmp = uint8[len - 1];
  	    parts.push(
  	      lookup[tmp >> 2] +
  	      lookup[(tmp << 4) & 0x3F] +
  	      '=='
  	    );
  	  } else if (extraBytes === 2) {
  	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
  	    parts.push(
  	      lookup[tmp >> 10] +
  	      lookup[(tmp >> 4) & 0x3F] +
  	      lookup[(tmp << 2) & 0x3F] +
  	      '='
  	    );
  	  }

  	  return parts.join('')
  	}

  	},{}],51:[function(require,module,exports){

  	},{}],52:[function(require,module,exports){
  	arguments[4][51][0].apply(exports,arguments);
  	},{"dup":51}],53:[function(require,module,exports){

  	var base64 = require('base64-js');
  	var ieee754 = require('ieee754');

  	exports.Buffer = Buffer;
  	exports.SlowBuffer = SlowBuffer;
  	exports.INSPECT_MAX_BYTES = 50;

  	var K_MAX_LENGTH = 0x7fffffff;
  	exports.kMaxLength = K_MAX_LENGTH;

  	/**
  	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
  	 *   === true    Use Uint8Array implementation (fastest)
  	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
  	 *               implementation (most compatible, even IE6)
  	 *
  	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
  	 * Opera 11.6+, iOS 4.2+.
  	 *
  	 * We report that the browser does not support typed arrays if the are not subclassable
  	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
  	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
  	 * for __proto__ and has a buggy typed array implementation.
  	 */
  	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

  	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
  	    typeof console.error === 'function') {
  	  console.error(
  	    'This browser lacks typed array (Uint8Array) support which is required by ' +
  	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  	  );
  	}

  	function typedArraySupport () {
  	  // Can typed array instances can be augmented?
  	  try {
  	    var arr = new Uint8Array(1);
  	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
  	    return arr.foo() === 42
  	  } catch (e) {
  	    return false
  	  }
  	}

  	Object.defineProperty(Buffer.prototype, 'parent', {
  	  get: function () {
  	    if (!(this instanceof Buffer)) {
  	      return undefined
  	    }
  	    return this.buffer
  	  }
  	});

  	Object.defineProperty(Buffer.prototype, 'offset', {
  	  get: function () {
  	    if (!(this instanceof Buffer)) {
  	      return undefined
  	    }
  	    return this.byteOffset
  	  }
  	});

  	function createBuffer (length) {
  	  if (length > K_MAX_LENGTH) {
  	    throw new RangeError('Invalid typed array length')
  	  }
  	  // Return an augmented `Uint8Array` instance
  	  var buf = new Uint8Array(length);
  	  buf.__proto__ = Buffer.prototype;
  	  return buf
  	}

  	/**
  	 * The Buffer constructor returns instances of `Uint8Array` that have their
  	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
  	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
  	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
  	 * returns a single octet.
  	 *
  	 * The `Uint8Array` prototype remains unmodified.
  	 */

  	function Buffer (arg, encodingOrOffset, length) {
  	  // Common case.
  	  if (typeof arg === 'number') {
  	    if (typeof encodingOrOffset === 'string') {
  	      throw new Error(
  	        'If encoding is specified then the first argument must be a string'
  	      )
  	    }
  	    return allocUnsafe(arg)
  	  }
  	  return from(arg, encodingOrOffset, length)
  	}

  	// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  	if (typeof Symbol !== 'undefined' && Symbol.species &&
  	    Buffer[Symbol.species] === Buffer) {
  	  Object.defineProperty(Buffer, Symbol.species, {
  	    value: null,
  	    configurable: true,
  	    enumerable: false,
  	    writable: false
  	  });
  	}

  	Buffer.poolSize = 8192; // not used by this implementation

  	function from (value, encodingOrOffset, length) {
  	  if (typeof value === 'number') {
  	    throw new TypeError('"value" argument must not be a number')
  	  }

  	  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
  	    return fromArrayBuffer(value, encodingOrOffset, length)
  	  }

  	  if (typeof value === 'string') {
  	    return fromString(value, encodingOrOffset)
  	  }

  	  return fromObject(value)
  	}

  	/**
  	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
  	 * if value is a number.
  	 * Buffer.from(str[, encoding])
  	 * Buffer.from(array)
  	 * Buffer.from(buffer)
  	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
  	 **/
  	Buffer.from = function (value, encodingOrOffset, length) {
  	  return from(value, encodingOrOffset, length)
  	};

  	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  	// https://github.com/feross/buffer/pull/148
  	Buffer.prototype.__proto__ = Uint8Array.prototype;
  	Buffer.__proto__ = Uint8Array;

  	function assertSize (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('"size" argument must be of type number')
  	  } else if (size < 0) {
  	    throw new RangeError('"size" argument must not be negative')
  	  }
  	}

  	function alloc (size, fill, encoding) {
  	  assertSize(size);
  	  if (size <= 0) {
  	    return createBuffer(size)
  	  }
  	  if (fill !== undefined) {
  	    // Only pay attention to encoding if it's a string. This
  	    // prevents accidentally sending in a number that would
  	    // be interpretted as a start offset.
  	    return typeof encoding === 'string'
  	      ? createBuffer(size).fill(fill, encoding)
  	      : createBuffer(size).fill(fill)
  	  }
  	  return createBuffer(size)
  	}

  	/**
  	 * Creates a new filled Buffer instance.
  	 * alloc(size[, fill[, encoding]])
  	 **/
  	Buffer.alloc = function (size, fill, encoding) {
  	  return alloc(size, fill, encoding)
  	};

  	function allocUnsafe (size) {
  	  assertSize(size);
  	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
  	}

  	/**
  	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
  	 * */
  	Buffer.allocUnsafe = function (size) {
  	  return allocUnsafe(size)
  	};
  	/**
  	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
  	 */
  	Buffer.allocUnsafeSlow = function (size) {
  	  return allocUnsafe(size)
  	};

  	function fromString (string, encoding) {
  	  if (typeof encoding !== 'string' || encoding === '') {
  	    encoding = 'utf8';
  	  }

  	  if (!Buffer.isEncoding(encoding)) {
  	    throw new TypeError('Unknown encoding: ' + encoding)
  	  }

  	  var length = byteLength(string, encoding) | 0;
  	  var buf = createBuffer(length);

  	  var actual = buf.write(string, encoding);

  	  if (actual !== length) {
  	    // Writing a hex string, for example, that contains invalid characters will
  	    // cause everything after the first invalid character to be ignored. (e.g.
  	    // 'abxxcd' will be treated as 'ab')
  	    buf = buf.slice(0, actual);
  	  }

  	  return buf
  	}

  	function fromArrayLike (array) {
  	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  	  var buf = createBuffer(length);
  	  for (var i = 0; i < length; i += 1) {
  	    buf[i] = array[i] & 255;
  	  }
  	  return buf
  	}

  	function fromArrayBuffer (array, byteOffset, length) {
  	  if (byteOffset < 0 || array.byteLength < byteOffset) {
  	    throw new RangeError('"offset" is outside of buffer bounds')
  	  }

  	  if (array.byteLength < byteOffset + (length || 0)) {
  	    throw new RangeError('"length" is outside of buffer bounds')
  	  }

  	  var buf;
  	  if (byteOffset === undefined && length === undefined) {
  	    buf = new Uint8Array(array);
  	  } else if (length === undefined) {
  	    buf = new Uint8Array(array, byteOffset);
  	  } else {
  	    buf = new Uint8Array(array, byteOffset, length);
  	  }

  	  // Return an augmented `Uint8Array` instance
  	  buf.__proto__ = Buffer.prototype;
  	  return buf
  	}

  	function fromObject (obj) {
  	  if (Buffer.isBuffer(obj)) {
  	    var len = checked(obj.length) | 0;
  	    var buf = createBuffer(len);

  	    if (buf.length === 0) {
  	      return buf
  	    }

  	    obj.copy(buf, 0, 0, len);
  	    return buf
  	  }

  	  if (obj) {
  	    if (ArrayBuffer.isView(obj) || 'length' in obj) {
  	      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
  	        return createBuffer(0)
  	      }
  	      return fromArrayLike(obj)
  	    }

  	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
  	      return fromArrayLike(obj.data)
  	    }
  	  }

  	  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
  	}

  	function checked (length) {
  	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  	  // length is NaN (which is otherwise coerced to zero.)
  	  if (length >= K_MAX_LENGTH) {
  	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
  	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  	  }
  	  return length | 0
  	}

  	function SlowBuffer (length) {
  	  if (+length != length) { // eslint-disable-line eqeqeq
  	    length = 0;
  	  }
  	  return Buffer.alloc(+length)
  	}

  	Buffer.isBuffer = function isBuffer (b) {
  	  return b != null && b._isBuffer === true
  	};

  	Buffer.compare = function compare (a, b) {
  	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
  	    throw new TypeError('Arguments must be Buffers')
  	  }

  	  if (a === b) { return 0 }

  	  var x = a.length;
  	  var y = b.length;

  	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
  	    if (a[i] !== b[i]) {
  	      x = a[i];
  	      y = b[i];
  	      break
  	    }
  	  }

  	  if (x < y) { return -1 }
  	  if (y < x) { return 1 }
  	  return 0
  	};

  	Buffer.isEncoding = function isEncoding (encoding) {
  	  switch (String(encoding).toLowerCase()) {
  	    case 'hex':
  	    case 'utf8':
  	    case 'utf-8':
  	    case 'ascii':
  	    case 'latin1':
  	    case 'binary':
  	    case 'base64':
  	    case 'ucs2':
  	    case 'ucs-2':
  	    case 'utf16le':
  	    case 'utf-16le':
  	      return true
  	    default:
  	      return false
  	  }
  	};

  	Buffer.concat = function concat (list, length) {
  	  if (!Array.isArray(list)) {
  	    throw new TypeError('"list" argument must be an Array of Buffers')
  	  }

  	  if (list.length === 0) {
  	    return Buffer.alloc(0)
  	  }

  	  var i;
  	  if (length === undefined) {
  	    length = 0;
  	    for (i = 0; i < list.length; ++i) {
  	      length += list[i].length;
  	    }
  	  }

  	  var buffer = Buffer.allocUnsafe(length);
  	  var pos = 0;
  	  for (i = 0; i < list.length; ++i) {
  	    var buf = list[i];
  	    if (ArrayBuffer.isView(buf)) {
  	      buf = Buffer.from(buf);
  	    }
  	    if (!Buffer.isBuffer(buf)) {
  	      throw new TypeError('"list" argument must be an Array of Buffers')
  	    }
  	    buf.copy(buffer, pos);
  	    pos += buf.length;
  	  }
  	  return buffer
  	};

  	function byteLength (string, encoding) {
  	  if (Buffer.isBuffer(string)) {
  	    return string.length
  	  }
  	  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
  	    return string.byteLength
  	  }
  	  if (typeof string !== 'string') {
  	    string = '' + string;
  	  }

  	  var len = string.length;
  	  if (len === 0) { return 0 }

  	  // Use a for loop to avoid recursion
  	  var loweredCase = false;
  	  for (;;) {
  	    switch (encoding) {
  	      case 'ascii':
  	      case 'latin1':
  	      case 'binary':
  	        return len
  	      case 'utf8':
  	      case 'utf-8':
  	      case undefined:
  	        return utf8ToBytes(string).length
  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return len * 2
  	      case 'hex':
  	        return len >>> 1
  	      case 'base64':
  	        return base64ToBytes(string).length
  	      default:
  	        if (loweredCase) { return utf8ToBytes(string).length } // assume utf8
  	        encoding = ('' + encoding).toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	}
  	Buffer.byteLength = byteLength;

  	function slowToString (encoding, start, end) {
  	  var loweredCase = false;

  	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  	  // property of a typed array.

  	  // This behaves neither like String nor Uint8Array in that we set start/end
  	  // to their upper/lower bounds if the value passed is out of range.
  	  // undefined is handled specially as per ECMA-262 6th Edition,
  	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  	  if (start === undefined || start < 0) {
  	    start = 0;
  	  }
  	  // Return early if start > this.length. Done here to prevent potential uint32
  	  // coercion fail below.
  	  if (start > this.length) {
  	    return ''
  	  }

  	  if (end === undefined || end > this.length) {
  	    end = this.length;
  	  }

  	  if (end <= 0) {
  	    return ''
  	  }

  	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  	  end >>>= 0;
  	  start >>>= 0;

  	  if (end <= start) {
  	    return ''
  	  }

  	  if (!encoding) { encoding = 'utf8'; }

  	  while (true) {
  	    switch (encoding) {
  	      case 'hex':
  	        return hexSlice(this, start, end)

  	      case 'utf8':
  	      case 'utf-8':
  	        return utf8Slice(this, start, end)

  	      case 'ascii':
  	        return asciiSlice(this, start, end)

  	      case 'latin1':
  	      case 'binary':
  	        return latin1Slice(this, start, end)

  	      case 'base64':
  	        return base64Slice(this, start, end)

  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return utf16leSlice(this, start, end)

  	      default:
  	        if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
  	        encoding = (encoding + '').toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	}

  	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  	// reliably in a browserify context because there could be multiple different
  	// copies of the 'buffer' package in use. This method works even for Buffer
  	// instances that were created from another copy of the `buffer` package.
  	// See: https://github.com/feross/buffer/issues/154
  	Buffer.prototype._isBuffer = true;

  	function swap (b, n, m) {
  	  var i = b[n];
  	  b[n] = b[m];
  	  b[m] = i;
  	}

  	Buffer.prototype.swap16 = function swap16 () {
  	  var len = this.length;
  	  if (len % 2 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 16-bits')
  	  }
  	  for (var i = 0; i < len; i += 2) {
  	    swap(this, i, i + 1);
  	  }
  	  return this
  	};

  	Buffer.prototype.swap32 = function swap32 () {
  	  var len = this.length;
  	  if (len % 4 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 32-bits')
  	  }
  	  for (var i = 0; i < len; i += 4) {
  	    swap(this, i, i + 3);
  	    swap(this, i + 1, i + 2);
  	  }
  	  return this
  	};

  	Buffer.prototype.swap64 = function swap64 () {
  	  var len = this.length;
  	  if (len % 8 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 64-bits')
  	  }
  	  for (var i = 0; i < len; i += 8) {
  	    swap(this, i, i + 7);
  	    swap(this, i + 1, i + 6);
  	    swap(this, i + 2, i + 5);
  	    swap(this, i + 3, i + 4);
  	  }
  	  return this
  	};

  	Buffer.prototype.toString = function toString () {
  	  var length = this.length;
  	  if (length === 0) { return '' }
  	  if (arguments.length === 0) { return utf8Slice(this, 0, length) }
  	  return slowToString.apply(this, arguments)
  	};

  	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

  	Buffer.prototype.equals = function equals (b) {
  	  if (!Buffer.isBuffer(b)) { throw new TypeError('Argument must be a Buffer') }
  	  if (this === b) { return true }
  	  return Buffer.compare(this, b) === 0
  	};

  	Buffer.prototype.inspect = function inspect () {
  	  var str = '';
  	  var max = exports.INSPECT_MAX_BYTES;
  	  if (this.length > 0) {
  	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
  	    if (this.length > max) { str += ' ... '; }
  	  }
  	  return '<Buffer ' + str + '>'
  	};

  	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  	  if (!Buffer.isBuffer(target)) {
  	    throw new TypeError('Argument must be a Buffer')
  	  }

  	  if (start === undefined) {
  	    start = 0;
  	  }
  	  if (end === undefined) {
  	    end = target ? target.length : 0;
  	  }
  	  if (thisStart === undefined) {
  	    thisStart = 0;
  	  }
  	  if (thisEnd === undefined) {
  	    thisEnd = this.length;
  	  }

  	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
  	    throw new RangeError('out of range index')
  	  }

  	  if (thisStart >= thisEnd && start >= end) {
  	    return 0
  	  }
  	  if (thisStart >= thisEnd) {
  	    return -1
  	  }
  	  if (start >= end) {
  	    return 1
  	  }

  	  start >>>= 0;
  	  end >>>= 0;
  	  thisStart >>>= 0;
  	  thisEnd >>>= 0;

  	  if (this === target) { return 0 }

  	  var x = thisEnd - thisStart;
  	  var y = end - start;
  	  var len = Math.min(x, y);

  	  var thisCopy = this.slice(thisStart, thisEnd);
  	  var targetCopy = target.slice(start, end);

  	  for (var i = 0; i < len; ++i) {
  	    if (thisCopy[i] !== targetCopy[i]) {
  	      x = thisCopy[i];
  	      y = targetCopy[i];
  	      break
  	    }
  	  }

  	  if (x < y) { return -1 }
  	  if (y < x) { return 1 }
  	  return 0
  	};

  	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  	//
  	// Arguments:
  	// - buffer - a Buffer to search
  	// - val - a string, Buffer, or number
  	// - byteOffset - an index into `buffer`; will be clamped to an int32
  	// - encoding - an optional encoding, relevant is val is a string
  	// - dir - true for indexOf, false for lastIndexOf
  	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  	  // Empty buffer means no match
  	  if (buffer.length === 0) { return -1 }

  	  // Normalize byteOffset
  	  if (typeof byteOffset === 'string') {
  	    encoding = byteOffset;
  	    byteOffset = 0;
  	  } else if (byteOffset > 0x7fffffff) {
  	    byteOffset = 0x7fffffff;
  	  } else if (byteOffset < -0x80000000) {
  	    byteOffset = -0x80000000;
  	  }
  	  byteOffset = +byteOffset;  // Coerce to Number.
  	  if (numberIsNaN(byteOffset)) {
  	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
  	    byteOffset = dir ? 0 : (buffer.length - 1);
  	  }

  	  // Normalize byteOffset: negative offsets start from the end of the buffer
  	  if (byteOffset < 0) { byteOffset = buffer.length + byteOffset; }
  	  if (byteOffset >= buffer.length) {
  	    if (dir) { return -1 }
  	    else { byteOffset = buffer.length - 1; }
  	  } else if (byteOffset < 0) {
  	    if (dir) { byteOffset = 0; }
  	    else { return -1 }
  	  }

  	  // Normalize val
  	  if (typeof val === 'string') {
  	    val = Buffer.from(val, encoding);
  	  }

  	  // Finally, search either indexOf (if dir is true) or lastIndexOf
  	  if (Buffer.isBuffer(val)) {
  	    // Special case: looking for empty string/buffer always fails
  	    if (val.length === 0) {
  	      return -1
  	    }
  	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  	  } else if (typeof val === 'number') {
  	    val = val & 0xFF; // Search for a byte value [0-255]
  	    if (typeof Uint8Array.prototype.indexOf === 'function') {
  	      if (dir) {
  	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
  	      } else {
  	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
  	      }
  	    }
  	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  	  }

  	  throw new TypeError('val must be string, number or Buffer')
  	}

  	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  	  var indexSize = 1;
  	  var arrLength = arr.length;
  	  var valLength = val.length;

  	  if (encoding !== undefined) {
  	    encoding = String(encoding).toLowerCase();
  	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
  	        encoding === 'utf16le' || encoding === 'utf-16le') {
  	      if (arr.length < 2 || val.length < 2) {
  	        return -1
  	      }
  	      indexSize = 2;
  	      arrLength /= 2;
  	      valLength /= 2;
  	      byteOffset /= 2;
  	    }
  	  }

  	  function read (buf, i) {
  	    if (indexSize === 1) {
  	      return buf[i]
  	    } else {
  	      return buf.readUInt16BE(i * indexSize)
  	    }
  	  }

  	  var i;
  	  if (dir) {
  	    var foundIndex = -1;
  	    for (i = byteOffset; i < arrLength; i++) {
  	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
  	        if (foundIndex === -1) { foundIndex = i; }
  	        if (i - foundIndex + 1 === valLength) { return foundIndex * indexSize }
  	      } else {
  	        if (foundIndex !== -1) { i -= i - foundIndex; }
  	        foundIndex = -1;
  	      }
  	    }
  	  } else {
  	    if (byteOffset + valLength > arrLength) { byteOffset = arrLength - valLength; }
  	    for (i = byteOffset; i >= 0; i--) {
  	      var found = true;
  	      for (var j = 0; j < valLength; j++) {
  	        if (read(arr, i + j) !== read(val, j)) {
  	          found = false;
  	          break
  	        }
  	      }
  	      if (found) { return i }
  	    }
  	  }

  	  return -1
  	}

  	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  	  return this.indexOf(val, byteOffset, encoding) !== -1
  	};

  	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  	};

  	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  	};

  	function hexWrite (buf, string, offset, length) {
  	  offset = Number(offset) || 0;
  	  var remaining = buf.length - offset;
  	  if (!length) {
  	    length = remaining;
  	  } else {
  	    length = Number(length);
  	    if (length > remaining) {
  	      length = remaining;
  	    }
  	  }

  	  var strLen = string.length;

  	  if (length > strLen / 2) {
  	    length = strLen / 2;
  	  }
  	  for (var i = 0; i < length; ++i) {
  	    var parsed = parseInt(string.substr(i * 2, 2), 16);
  	    if (numberIsNaN(parsed)) { return i }
  	    buf[offset + i] = parsed;
  	  }
  	  return i
  	}

  	function utf8Write (buf, string, offset, length) {
  	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  	}

  	function asciiWrite (buf, string, offset, length) {
  	  return blitBuffer(asciiToBytes(string), buf, offset, length)
  	}

  	function latin1Write (buf, string, offset, length) {
  	  return asciiWrite(buf, string, offset, length)
  	}

  	function base64Write (buf, string, offset, length) {
  	  return blitBuffer(base64ToBytes(string), buf, offset, length)
  	}

  	function ucs2Write (buf, string, offset, length) {
  	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  	}

  	Buffer.prototype.write = function write (string, offset, length, encoding) {
  	  // Buffer#write(string)
  	  if (offset === undefined) {
  	    encoding = 'utf8';
  	    length = this.length;
  	    offset = 0;
  	  // Buffer#write(string, encoding)
  	  } else if (length === undefined && typeof offset === 'string') {
  	    encoding = offset;
  	    length = this.length;
  	    offset = 0;
  	  // Buffer#write(string, offset[, length][, encoding])
  	  } else if (isFinite(offset)) {
  	    offset = offset >>> 0;
  	    if (isFinite(length)) {
  	      length = length >>> 0;
  	      if (encoding === undefined) { encoding = 'utf8'; }
  	    } else {
  	      encoding = length;
  	      length = undefined;
  	    }
  	  } else {
  	    throw new Error(
  	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
  	    )
  	  }

  	  var remaining = this.length - offset;
  	  if (length === undefined || length > remaining) { length = remaining; }

  	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
  	    throw new RangeError('Attempt to write outside buffer bounds')
  	  }

  	  if (!encoding) { encoding = 'utf8'; }

  	  var loweredCase = false;
  	  for (;;) {
  	    switch (encoding) {
  	      case 'hex':
  	        return hexWrite(this, string, offset, length)

  	      case 'utf8':
  	      case 'utf-8':
  	        return utf8Write(this, string, offset, length)

  	      case 'ascii':
  	        return asciiWrite(this, string, offset, length)

  	      case 'latin1':
  	      case 'binary':
  	        return latin1Write(this, string, offset, length)

  	      case 'base64':
  	        // Warning: maxLength not taken into account in base64Write
  	        return base64Write(this, string, offset, length)

  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return ucs2Write(this, string, offset, length)

  	      default:
  	        if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
  	        encoding = ('' + encoding).toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	};

  	Buffer.prototype.toJSON = function toJSON () {
  	  return {
  	    type: 'Buffer',
  	    data: Array.prototype.slice.call(this._arr || this, 0)
  	  }
  	};

  	function base64Slice (buf, start, end) {
  	  if (start === 0 && end === buf.length) {
  	    return base64.fromByteArray(buf)
  	  } else {
  	    return base64.fromByteArray(buf.slice(start, end))
  	  }
  	}

  	function utf8Slice (buf, start, end) {
  	  end = Math.min(buf.length, end);
  	  var res = [];

  	  var i = start;
  	  while (i < end) {
  	    var firstByte = buf[i];
  	    var codePoint = null;
  	    var bytesPerSequence = (firstByte > 0xEF) ? 4
  	      : (firstByte > 0xDF) ? 3
  	      : (firstByte > 0xBF) ? 2
  	      : 1;

  	    if (i + bytesPerSequence <= end) {
  	      var secondByte, thirdByte, fourthByte, tempCodePoint;

  	      switch (bytesPerSequence) {
  	        case 1:
  	          if (firstByte < 0x80) {
  	            codePoint = firstByte;
  	          }
  	          break
  	        case 2:
  	          secondByte = buf[i + 1];
  	          if ((secondByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
  	            if (tempCodePoint > 0x7F) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	          break
  	        case 3:
  	          secondByte = buf[i + 1];
  	          thirdByte = buf[i + 2];
  	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
  	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	          break
  	        case 4:
  	          secondByte = buf[i + 1];
  	          thirdByte = buf[i + 2];
  	          fourthByte = buf[i + 3];
  	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
  	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	      }
  	    }

  	    if (codePoint === null) {
  	      // we did not generate a valid codePoint so insert a
  	      // replacement char (U+FFFD) and advance only 1 byte
  	      codePoint = 0xFFFD;
  	      bytesPerSequence = 1;
  	    } else if (codePoint > 0xFFFF) {
  	      // encode to utf16 (surrogate pair dance)
  	      codePoint -= 0x10000;
  	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
  	      codePoint = 0xDC00 | codePoint & 0x3FF;
  	    }

  	    res.push(codePoint);
  	    i += bytesPerSequence;
  	  }

  	  return decodeCodePointsArray(res)
  	}

  	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
  	// the lowest limit is Chrome, with 0x10000 args.
  	// We go 1 magnitude less, for safety
  	var MAX_ARGUMENTS_LENGTH = 0x1000;

  	function decodeCodePointsArray (codePoints) {
  	  var len = codePoints.length;
  	  if (len <= MAX_ARGUMENTS_LENGTH) {
  	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  	  }

  	  // Decode in chunks to avoid "call stack size exceeded".
  	  var res = '';
  	  var i = 0;
  	  while (i < len) {
  	    res += String.fromCharCode.apply(
  	      String,
  	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
  	    );
  	  }
  	  return res
  	}

  	function asciiSlice (buf, start, end) {
  	  var ret = '';
  	  end = Math.min(buf.length, end);

  	  for (var i = start; i < end; ++i) {
  	    ret += String.fromCharCode(buf[i] & 0x7F);
  	  }
  	  return ret
  	}

  	function latin1Slice (buf, start, end) {
  	  var ret = '';
  	  end = Math.min(buf.length, end);

  	  for (var i = start; i < end; ++i) {
  	    ret += String.fromCharCode(buf[i]);
  	  }
  	  return ret
  	}

  	function hexSlice (buf, start, end) {
  	  var len = buf.length;

  	  if (!start || start < 0) { start = 0; }
  	  if (!end || end < 0 || end > len) { end = len; }

  	  var out = '';
  	  for (var i = start; i < end; ++i) {
  	    out += toHex(buf[i]);
  	  }
  	  return out
  	}

  	function utf16leSlice (buf, start, end) {
  	  var bytes = buf.slice(start, end);
  	  var res = '';
  	  for (var i = 0; i < bytes.length; i += 2) {
  	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
  	  }
  	  return res
  	}

  	Buffer.prototype.slice = function slice (start, end) {
  	  var len = this.length;
  	  start = ~~start;
  	  end = end === undefined ? len : ~~end;

  	  if (start < 0) {
  	    start += len;
  	    if (start < 0) { start = 0; }
  	  } else if (start > len) {
  	    start = len;
  	  }

  	  if (end < 0) {
  	    end += len;
  	    if (end < 0) { end = 0; }
  	  } else if (end > len) {
  	    end = len;
  	  }

  	  if (end < start) { end = start; }

  	  var newBuf = this.subarray(start, end);
  	  // Return an augmented `Uint8Array` instance
  	  newBuf.__proto__ = Buffer.prototype;
  	  return newBuf
  	};

  	/*
  	 * Need to make sure that buffer isn't trying to write out of bounds.
  	 */
  	function checkOffset (offset, ext, length) {
  	  if ((offset % 1) !== 0 || offset < 0) { throw new RangeError('offset is not uint') }
  	  if (offset + ext > length) { throw new RangeError('Trying to access beyond buffer length') }
  	}

  	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  	  var val = this[offset];
  	  var mul = 1;
  	  var i = 0;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    val += this[offset + i] * mul;
  	  }

  	  return val
  	};

  	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    checkOffset(offset, byteLength, this.length);
  	  }

  	  var val = this[offset + --byteLength];
  	  var mul = 1;
  	  while (byteLength > 0 && (mul *= 0x100)) {
  	    val += this[offset + --byteLength] * mul;
  	  }

  	  return val
  	};

  	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 1, this.length); }
  	  return this[offset]
  	};

  	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 2, this.length); }
  	  return this[offset] | (this[offset + 1] << 8)
  	};

  	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 2, this.length); }
  	  return (this[offset] << 8) | this[offset + 1]
  	};

  	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }

  	  return ((this[offset]) |
  	      (this[offset + 1] << 8) |
  	      (this[offset + 2] << 16)) +
  	      (this[offset + 3] * 0x1000000)
  	};

  	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }

  	  return (this[offset] * 0x1000000) +
  	    ((this[offset + 1] << 16) |
  	    (this[offset + 2] << 8) |
  	    this[offset + 3])
  	};

  	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  	  var val = this[offset];
  	  var mul = 1;
  	  var i = 0;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    val += this[offset + i] * mul;
  	  }
  	  mul *= 0x80;

  	  if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

  	  return val
  	};

  	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  	  var i = byteLength;
  	  var mul = 1;
  	  var val = this[offset + --i];
  	  while (i > 0 && (mul *= 0x100)) {
  	    val += this[offset + --i] * mul;
  	  }
  	  mul *= 0x80;

  	  if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

  	  return val
  	};

  	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 1, this.length); }
  	  if (!(this[offset] & 0x80)) { return (this[offset]) }
  	  return ((0xff - this[offset] + 1) * -1)
  	};

  	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 2, this.length); }
  	  var val = this[offset] | (this[offset + 1] << 8);
  	  return (val & 0x8000) ? val | 0xFFFF0000 : val
  	};

  	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 2, this.length); }
  	  var val = this[offset + 1] | (this[offset] << 8);
  	  return (val & 0x8000) ? val | 0xFFFF0000 : val
  	};

  	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }

  	  return (this[offset]) |
  	    (this[offset + 1] << 8) |
  	    (this[offset + 2] << 16) |
  	    (this[offset + 3] << 24)
  	};

  	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }

  	  return (this[offset] << 24) |
  	    (this[offset + 1] << 16) |
  	    (this[offset + 2] << 8) |
  	    (this[offset + 3])
  	};

  	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }
  	  return ieee754.read(this, offset, true, 23, 4)
  	};

  	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 4, this.length); }
  	  return ieee754.read(this, offset, false, 23, 4)
  	};

  	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 8, this.length); }
  	  return ieee754.read(this, offset, true, 52, 8)
  	};

  	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkOffset(offset, 8, this.length); }
  	  return ieee754.read(this, offset, false, 52, 8)
  	};

  	function checkInt (buf, value, offset, ext, max, min) {
  	  if (!Buffer.isBuffer(buf)) { throw new TypeError('"buffer" argument must be a Buffer instance') }
  	  if (value > max || value < min) { throw new RangeError('"value" argument is out of bounds') }
  	  if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
  	}

  	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
  	    checkInt(this, value, offset, byteLength, maxBytes, 0);
  	  }

  	  var mul = 1;
  	  var i = 0;
  	  this[offset] = value & 0xFF;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    this[offset + i] = (value / mul) & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
  	    checkInt(this, value, offset, byteLength, maxBytes, 0);
  	  }

  	  var i = byteLength - 1;
  	  var mul = 1;
  	  this[offset + i] = value & 0xFF;
  	  while (--i >= 0 && (mul *= 0x100)) {
  	    this[offset + i] = (value / mul) & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 1, 0xff, 0); }
  	  this[offset] = (value & 0xff);
  	  return offset + 1
  	};

  	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  return offset + 2
  	};

  	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
  	  this[offset] = (value >>> 8);
  	  this[offset + 1] = (value & 0xff);
  	  return offset + 2
  	};

  	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
  	  this[offset + 3] = (value >>> 24);
  	  this[offset + 2] = (value >>> 16);
  	  this[offset + 1] = (value >>> 8);
  	  this[offset] = (value & 0xff);
  	  return offset + 4
  	};

  	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
  	  this[offset] = (value >>> 24);
  	  this[offset + 1] = (value >>> 16);
  	  this[offset + 2] = (value >>> 8);
  	  this[offset + 3] = (value & 0xff);
  	  return offset + 4
  	};

  	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    var limit = Math.pow(2, (8 * byteLength) - 1);

  	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  	  }

  	  var i = 0;
  	  var mul = 1;
  	  var sub = 0;
  	  this[offset] = value & 0xFF;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
  	      sub = 1;
  	    }
  	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    var limit = Math.pow(2, (8 * byteLength) - 1);

  	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  	  }

  	  var i = byteLength - 1;
  	  var mul = 1;
  	  var sub = 0;
  	  this[offset + i] = value & 0xFF;
  	  while (--i >= 0 && (mul *= 0x100)) {
  	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
  	      sub = 1;
  	    }
  	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 1, 0x7f, -0x80); }
  	  if (value < 0) { value = 0xff + value + 1; }
  	  this[offset] = (value & 0xff);
  	  return offset + 1
  	};

  	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  return offset + 2
  	};

  	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
  	  this[offset] = (value >>> 8);
  	  this[offset + 1] = (value & 0xff);
  	  return offset + 2
  	};

  	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  this[offset + 2] = (value >>> 16);
  	  this[offset + 3] = (value >>> 24);
  	  return offset + 4
  	};

  	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
  	  if (value < 0) { value = 0xffffffff + value + 1; }
  	  this[offset] = (value >>> 24);
  	  this[offset + 1] = (value >>> 16);
  	  this[offset + 2] = (value >>> 8);
  	  this[offset + 3] = (value & 0xff);
  	  return offset + 4
  	};

  	function checkIEEE754 (buf, value, offset, ext, max, min) {
  	  if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
  	  if (offset < 0) { throw new RangeError('Index out of range') }
  	}

  	function writeFloat (buf, value, offset, littleEndian, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    checkIEEE754(buf, value, offset, 4);
  	  }
  	  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  	  return offset + 4
  	}

  	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  	  return writeFloat(this, value, offset, true, noAssert)
  	};

  	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  	  return writeFloat(this, value, offset, false, noAssert)
  	};

  	function writeDouble (buf, value, offset, littleEndian, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    checkIEEE754(buf, value, offset, 8);
  	  }
  	  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  	  return offset + 8
  	}

  	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  	  return writeDouble(this, value, offset, true, noAssert)
  	};

  	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  	  return writeDouble(this, value, offset, false, noAssert)
  	};

  	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  	  if (!Buffer.isBuffer(target)) { throw new TypeError('argument should be a Buffer') }
  	  if (!start) { start = 0; }
  	  if (!end && end !== 0) { end = this.length; }
  	  if (targetStart >= target.length) { targetStart = target.length; }
  	  if (!targetStart) { targetStart = 0; }
  	  if (end > 0 && end < start) { end = start; }

  	  // Copy 0 bytes; we're done
  	  if (end === start) { return 0 }
  	  if (target.length === 0 || this.length === 0) { return 0 }

  	  // Fatal error conditions
  	  if (targetStart < 0) {
  	    throw new RangeError('targetStart out of bounds')
  	  }
  	  if (start < 0 || start >= this.length) { throw new RangeError('Index out of range') }
  	  if (end < 0) { throw new RangeError('sourceEnd out of bounds') }

  	  // Are we oob?
  	  if (end > this.length) { end = this.length; }
  	  if (target.length - targetStart < end - start) {
  	    end = target.length - targetStart + start;
  	  }

  	  var len = end - start;

  	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
  	    // Use built-in when available, missing from IE11
  	    this.copyWithin(targetStart, start, end);
  	  } else if (this === target && start < targetStart && targetStart < end) {
  	    // descending copy from end
  	    for (var i = len - 1; i >= 0; --i) {
  	      target[i + targetStart] = this[i + start];
  	    }
  	  } else {
  	    Uint8Array.prototype.set.call(
  	      target,
  	      this.subarray(start, end),
  	      targetStart
  	    );
  	  }

  	  return len
  	};

  	// Usage:
  	//    buffer.fill(number[, offset[, end]])
  	//    buffer.fill(buffer[, offset[, end]])
  	//    buffer.fill(string[, offset[, end]][, encoding])
  	Buffer.prototype.fill = function fill (val, start, end, encoding) {
  	  // Handle string cases:
  	  if (typeof val === 'string') {
  	    if (typeof start === 'string') {
  	      encoding = start;
  	      start = 0;
  	      end = this.length;
  	    } else if (typeof end === 'string') {
  	      encoding = end;
  	      end = this.length;
  	    }
  	    if (encoding !== undefined && typeof encoding !== 'string') {
  	      throw new TypeError('encoding must be a string')
  	    }
  	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
  	      throw new TypeError('Unknown encoding: ' + encoding)
  	    }
  	    if (val.length === 1) {
  	      var code = val.charCodeAt(0);
  	      if ((encoding === 'utf8' && code < 128) ||
  	          encoding === 'latin1') {
  	        // Fast path: If `val` fits into a single byte, use that numeric value.
  	        val = code;
  	      }
  	    }
  	  } else if (typeof val === 'number') {
  	    val = val & 255;
  	  }

  	  // Invalid ranges are not set to a default, so can range check early.
  	  if (start < 0 || this.length < start || this.length < end) {
  	    throw new RangeError('Out of range index')
  	  }

  	  if (end <= start) {
  	    return this
  	  }

  	  start = start >>> 0;
  	  end = end === undefined ? this.length : end >>> 0;

  	  if (!val) { val = 0; }

  	  var i;
  	  if (typeof val === 'number') {
  	    for (i = start; i < end; ++i) {
  	      this[i] = val;
  	    }
  	  } else {
  	    var bytes = Buffer.isBuffer(val)
  	      ? val
  	      : new Buffer(val, encoding);
  	    var len = bytes.length;
  	    if (len === 0) {
  	      throw new TypeError('The value "' + val +
  	        '" is invalid for argument "value"')
  	    }
  	    for (i = 0; i < end - start; ++i) {
  	      this[i + start] = bytes[i % len];
  	    }
  	  }

  	  return this
  	};

  	// HELPER FUNCTIONS
  	// ================

  	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

  	function base64clean (str) {
  	  // Node takes equal signs as end of the Base64 encoding
  	  str = str.split('=')[0];
  	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  	  str = str.trim().replace(INVALID_BASE64_RE, '');
  	  // Node converts strings with length < 2 to ''
  	  if (str.length < 2) { return '' }
  	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  	  while (str.length % 4 !== 0) {
  	    str = str + '=';
  	  }
  	  return str
  	}

  	function toHex (n) {
  	  if (n < 16) { return '0' + n.toString(16) }
  	  return n.toString(16)
  	}

  	function utf8ToBytes (string, units) {
  	  units = units || Infinity;
  	  var codePoint;
  	  var length = string.length;
  	  var leadSurrogate = null;
  	  var bytes = [];

  	  for (var i = 0; i < length; ++i) {
  	    codePoint = string.charCodeAt(i);

  	    // is surrogate component
  	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
  	      // last char was a lead
  	      if (!leadSurrogate) {
  	        // no lead yet
  	        if (codePoint > 0xDBFF) {
  	          // unexpected trail
  	          if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
  	          continue
  	        } else if (i + 1 === length) {
  	          // unpaired lead
  	          if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
  	          continue
  	        }

  	        // valid lead
  	        leadSurrogate = codePoint;

  	        continue
  	      }

  	      // 2 leads in a row
  	      if (codePoint < 0xDC00) {
  	        if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
  	        leadSurrogate = codePoint;
  	        continue
  	      }

  	      // valid surrogate pair
  	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
  	    } else if (leadSurrogate) {
  	      // valid bmp char, but last char was a lead
  	      if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
  	    }

  	    leadSurrogate = null;

  	    // encode utf8
  	    if (codePoint < 0x80) {
  	      if ((units -= 1) < 0) { break }
  	      bytes.push(codePoint);
  	    } else if (codePoint < 0x800) {
  	      if ((units -= 2) < 0) { break }
  	      bytes.push(
  	        codePoint >> 0x6 | 0xC0,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else if (codePoint < 0x10000) {
  	      if ((units -= 3) < 0) { break }
  	      bytes.push(
  	        codePoint >> 0xC | 0xE0,
  	        codePoint >> 0x6 & 0x3F | 0x80,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else if (codePoint < 0x110000) {
  	      if ((units -= 4) < 0) { break }
  	      bytes.push(
  	        codePoint >> 0x12 | 0xF0,
  	        codePoint >> 0xC & 0x3F | 0x80,
  	        codePoint >> 0x6 & 0x3F | 0x80,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else {
  	      throw new Error('Invalid code point')
  	    }
  	  }

  	  return bytes
  	}

  	function asciiToBytes (str) {
  	  var byteArray = [];
  	  for (var i = 0; i < str.length; ++i) {
  	    // Node's code seems to be doing this and not & 0x7F..
  	    byteArray.push(str.charCodeAt(i) & 0xFF);
  	  }
  	  return byteArray
  	}

  	function utf16leToBytes (str, units) {
  	  var c, hi, lo;
  	  var byteArray = [];
  	  for (var i = 0; i < str.length; ++i) {
  	    if ((units -= 2) < 0) { break }

  	    c = str.charCodeAt(i);
  	    hi = c >> 8;
  	    lo = c % 256;
  	    byteArray.push(lo);
  	    byteArray.push(hi);
  	  }

  	  return byteArray
  	}

  	function base64ToBytes (str) {
  	  return base64.toByteArray(base64clean(str))
  	}

  	function blitBuffer (src, dst, offset, length) {
  	  for (var i = 0; i < length; ++i) {
  	    if ((i + offset >= dst.length) || (i >= src.length)) { break }
  	    dst[i + offset] = src[i];
  	  }
  	  return i
  	}

  	// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
  	// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
  	function isArrayBuffer (obj) {
  	  return obj instanceof ArrayBuffer ||
  	    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
  	      typeof obj.byteLength === 'number')
  	}

  	function numberIsNaN (obj) {
  	  return obj !== obj // eslint-disable-line no-self-compare
  	}

  	},{"base64-js":50,"ieee754":93}],54:[function(require,module,exports){
  	module.exports = {
  	  "100": "Continue",
  	  "101": "Switching Protocols",
  	  "102": "Processing",
  	  "200": "OK",
  	  "201": "Created",
  	  "202": "Accepted",
  	  "203": "Non-Authoritative Information",
  	  "204": "No Content",
  	  "205": "Reset Content",
  	  "206": "Partial Content",
  	  "207": "Multi-Status",
  	  "208": "Already Reported",
  	  "226": "IM Used",
  	  "300": "Multiple Choices",
  	  "301": "Moved Permanently",
  	  "302": "Found",
  	  "303": "See Other",
  	  "304": "Not Modified",
  	  "305": "Use Proxy",
  	  "307": "Temporary Redirect",
  	  "308": "Permanent Redirect",
  	  "400": "Bad Request",
  	  "401": "Unauthorized",
  	  "402": "Payment Required",
  	  "403": "Forbidden",
  	  "404": "Not Found",
  	  "405": "Method Not Allowed",
  	  "406": "Not Acceptable",
  	  "407": "Proxy Authentication Required",
  	  "408": "Request Timeout",
  	  "409": "Conflict",
  	  "410": "Gone",
  	  "411": "Length Required",
  	  "412": "Precondition Failed",
  	  "413": "Payload Too Large",
  	  "414": "URI Too Long",
  	  "415": "Unsupported Media Type",
  	  "416": "Range Not Satisfiable",
  	  "417": "Expectation Failed",
  	  "418": "I'm a teapot",
  	  "421": "Misdirected Request",
  	  "422": "Unprocessable Entity",
  	  "423": "Locked",
  	  "424": "Failed Dependency",
  	  "425": "Unordered Collection",
  	  "426": "Upgrade Required",
  	  "428": "Precondition Required",
  	  "429": "Too Many Requests",
  	  "431": "Request Header Fields Too Large",
  	  "451": "Unavailable For Legal Reasons",
  	  "500": "Internal Server Error",
  	  "501": "Not Implemented",
  	  "502": "Bad Gateway",
  	  "503": "Service Unavailable",
  	  "504": "Gateway Timeout",
  	  "505": "HTTP Version Not Supported",
  	  "506": "Variant Also Negotiates",
  	  "507": "Insufficient Storage",
  	  "508": "Loop Detected",
  	  "509": "Bandwidth Limit Exceeded",
  	  "510": "Not Extended",
  	  "511": "Network Authentication Required"
  	};

  	},{}],55:[function(require,module,exports){
  	/* jshint node: true */
  	(function () {

  	    function CookieAccessInfo(domain, path, secure, script) {
  	        if (this instanceof CookieAccessInfo) {
  	            this.domain = domain || undefined;
  	            this.path = path || "/";
  	            this.secure = !!secure;
  	            this.script = !!script;
  	            return this;
  	        }
  	        return new CookieAccessInfo(domain, path, secure, script);
  	    }
  	    CookieAccessInfo.All = Object.freeze(Object.create(null));
  	    exports.CookieAccessInfo = CookieAccessInfo;

  	    function Cookie(cookiestr, request_domain, request_path) {
  	        if (cookiestr instanceof Cookie) {
  	            return cookiestr;
  	        }
  	        if (this instanceof Cookie) {
  	            this.name = null;
  	            this.value = null;
  	            this.expiration_date = Infinity;
  	            this.path = String(request_path || "/");
  	            this.explicit_path = false;
  	            this.domain = request_domain || null;
  	            this.explicit_domain = false;
  	            this.secure = false; //how to define default?
  	            this.noscript = false; //httponly
  	            if (cookiestr) {
  	                this.parse(cookiestr, request_domain, request_path);
  	            }
  	            return this;
  	        }
  	        return new Cookie(cookiestr, request_domain, request_path);
  	    }
  	    exports.Cookie = Cookie;

  	    Cookie.prototype.toString = function toString() {
  	        var str = [this.name + "=" + this.value];
  	        if (this.expiration_date !== Infinity) {
  	            str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
  	        }
  	        if (this.domain) {
  	            str.push("domain=" + this.domain);
  	        }
  	        if (this.path) {
  	            str.push("path=" + this.path);
  	        }
  	        if (this.secure) {
  	            str.push("secure");
  	        }
  	        if (this.noscript) {
  	            str.push("httponly");
  	        }
  	        return str.join("; ");
  	    };

  	    Cookie.prototype.toValueString = function toValueString() {
  	        return this.name + "=" + this.value;
  	    };

  	    var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
  	    Cookie.prototype.parse = function parse(str, request_domain, request_path) {
  	        if (this instanceof Cookie) {
  	            var parts = str.split(";").filter(function (value) {
  	                    return !!value;
  	                });
  	            var i;

  	            var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
  	            if (!pair) {
  	                console.warn("Invalid cookie header encountered. Header: '"+str+"'");
  	                return;
  	            }

  	            var key = pair[1];
  	            var value = pair[2];
  	            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
  	                console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
  	                return;
  	            }

  	            this.name = key;
  	            this.value = value;

  	            for (i = 1; i < parts.length; i += 1) {
  	                pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
  	                key = pair[1].trim().toLowerCase();
  	                value = pair[2];
  	                switch (key) {
  	                case "httponly":
  	                    this.noscript = true;
  	                    break;
  	                case "expires":
  	                    this.expiration_date = value ?
  	                            Number(Date.parse(value)) :
  	                            Infinity;
  	                    break;
  	                case "path":
  	                    this.path = value ?
  	                            value.trim() :
  	                            "";
  	                    this.explicit_path = true;
  	                    break;
  	                case "domain":
  	                    this.domain = value ?
  	                            value.trim() :
  	                            "";
  	                    this.explicit_domain = !!this.domain;
  	                    break;
  	                case "secure":
  	                    this.secure = true;
  	                    break;
  	                }
  	            }

  	            if (!this.explicit_path) {
  	               this.path = request_path || "/";
  	            }
  	            if (!this.explicit_domain) {
  	               this.domain = request_domain;
  	            }

  	            return this;
  	        }
  	        return new Cookie().parse(str, request_domain, request_path);
  	    };

  	    Cookie.prototype.matches = function matches(access_info) {
  	        if (access_info === CookieAccessInfo.All) {
  	          return true;
  	        }
  	        if (this.noscript && access_info.script ||
  	                this.secure && !access_info.secure ||
  	                !this.collidesWith(access_info)) {
  	            return false;
  	        }
  	        return true;
  	    };

  	    Cookie.prototype.collidesWith = function collidesWith(access_info) {
  	        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
  	            return false;
  	        }
  	        if (this.path && access_info.path.indexOf(this.path) !== 0) {
  	            return false;
  	        }
  	        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
  	           return false;
  	        }
  	        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
  	        var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
  	        if (cookie_domain === access_domain) {
  	            return true;
  	        }
  	        if (cookie_domain) {
  	            if (!this.explicit_domain) {
  	                return false; // we already checked if the domains were exactly the same
  	            }
  	            var wildcard = access_domain.indexOf(cookie_domain);
  	            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
  	                return false;
  	            }
  	            return true;
  	        }
  	        return true;
  	    };

  	    function CookieJar() {
  	        var cookies, cookies_list, collidable_cookie;
  	        if (this instanceof CookieJar) {
  	            cookies = Object.create(null); //name: [Cookie]

  	            this.setCookie = function setCookie(cookie, request_domain, request_path) {
  	                var remove, i;
  	                cookie = new Cookie(cookie, request_domain, request_path);
  	                //Delete the cookie if the set is past the current time
  	                remove = cookie.expiration_date <= Date.now();
  	                if (cookies[cookie.name] !== undefined) {
  	                    cookies_list = cookies[cookie.name];
  	                    for (i = 0; i < cookies_list.length; i += 1) {
  	                        collidable_cookie = cookies_list[i];
  	                        if (collidable_cookie.collidesWith(cookie)) {
  	                            if (remove) {
  	                                cookies_list.splice(i, 1);
  	                                if (cookies_list.length === 0) {
  	                                    delete cookies[cookie.name];
  	                                }
  	                                return false;
  	                            }
  	                            cookies_list[i] = cookie;
  	                            return cookie;
  	                        }
  	                    }
  	                    if (remove) {
  	                        return false;
  	                    }
  	                    cookies_list.push(cookie);
  	                    return cookie;
  	                }
  	                if (remove) {
  	                    return false;
  	                }
  	                cookies[cookie.name] = [cookie];
  	                return cookies[cookie.name];
  	            };
  	            //returns a cookie
  	            this.getCookie = function getCookie(cookie_name, access_info) {
  	                var cookie, i;
  	                cookies_list = cookies[cookie_name];
  	                if (!cookies_list) {
  	                    return;
  	                }
  	                for (i = 0; i < cookies_list.length; i += 1) {
  	                    cookie = cookies_list[i];
  	                    if (cookie.expiration_date <= Date.now()) {
  	                        if (cookies_list.length === 0) {
  	                            delete cookies[cookie.name];
  	                        }
  	                        continue;
  	                    }

  	                    if (cookie.matches(access_info)) {
  	                        return cookie;
  	                    }
  	                }
  	            };
  	            //returns a list of cookies
  	            this.getCookies = function getCookies(access_info) {
  	                var matches = [], cookie_name, cookie;
  	                for (cookie_name in cookies) {
  	                    cookie = this.getCookie(cookie_name, access_info);
  	                    if (cookie) {
  	                        matches.push(cookie);
  	                    }
  	                }
  	                matches.toString = function toString() {
  	                    return matches.join(":");
  	                };
  	                matches.toValueString = function toValueString() {
  	                    return matches.map(function (c) {
  	                        return c.toValueString();
  	                    }).join(';');
  	                };
  	                return matches;
  	            };

  	            return this;
  	        }
  	        return new CookieJar();
  	    }
  	    exports.CookieJar = CookieJar;

  	    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
  	    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
  	        cookies = Array.isArray(cookies) ?
  	                cookies :
  	                cookies.split(cookie_str_splitter);
  	        var successful = [],
  	            i,
  	            cookie;
  	        cookies = cookies.map(function(item){
  	            return new Cookie(item, request_domain, request_path);
  	        });
  	        for (i = 0; i < cookies.length; i += 1) {
  	            cookie = cookies[i];
  	            if (this.setCookie(cookie, request_domain, request_path)) {
  	                successful.push(cookie);
  	            }
  	        }
  	        return successful;
  	    };
  	}());

  	},{}],56:[function(require,module,exports){
  	(function (Buffer){
  	// Copyright Joyent, Inc. and other Node contributors.
  	//
  	// Permission is hereby granted, free of charge, to any person obtaining a
  	// copy of this software and associated documentation files (the
  	// "Software"), to deal in the Software without restriction, including
  	// without limitation the rights to use, copy, modify, merge, publish,
  	// distribute, sublicense, and/or sell copies of the Software, and to permit
  	// persons to whom the Software is furnished to do so, subject to the
  	// following conditions:
  	//
  	// The above copyright notice and this permission notice shall be included
  	// in all copies or substantial portions of the Software.
  	//
  	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  	// USE OR OTHER DEALINGS IN THE SOFTWARE.

  	// NOTE: These type checking functions intentionally don't use `instanceof`
  	// because it is fragile and can be easily faked with `Object.create()`.

  	function isArray(arg) {
  	  if (Array.isArray) {
  	    return Array.isArray(arg);
  	  }
  	  return objectToString(arg) === '[object Array]';
  	}
  	exports.isArray = isArray;

  	function isBoolean(arg) {
  	  return typeof arg === 'boolean';
  	}
  	exports.isBoolean = isBoolean;

  	function isNull(arg) {
  	  return arg === null;
  	}
  	exports.isNull = isNull;

  	function isNullOrUndefined(arg) {
  	  return arg == null;
  	}
  	exports.isNullOrUndefined = isNullOrUndefined;

  	function isNumber(arg) {
  	  return typeof arg === 'number';
  	}
  	exports.isNumber = isNumber;

  	function isString(arg) {
  	  return typeof arg === 'string';
  	}
  	exports.isString = isString;

  	function isSymbol(arg) {
  	  return typeof arg === 'symbol';
  	}
  	exports.isSymbol = isSymbol;

  	function isUndefined(arg) {
  	  return arg === void 0;
  	}
  	exports.isUndefined = isUndefined;

  	function isRegExp(re) {
  	  return objectToString(re) === '[object RegExp]';
  	}
  	exports.isRegExp = isRegExp;

  	function isObject(arg) {
  	  return typeof arg === 'object' && arg !== null;
  	}
  	exports.isObject = isObject;

  	function isDate(d) {
  	  return objectToString(d) === '[object Date]';
  	}
  	exports.isDate = isDate;

  	function isError(e) {
  	  return (objectToString(e) === '[object Error]' || e instanceof Error);
  	}
  	exports.isError = isError;

  	function isFunction(arg) {
  	  return typeof arg === 'function';
  	}
  	exports.isFunction = isFunction;

  	function isPrimitive(arg) {
  	  return arg === null ||
  	         typeof arg === 'boolean' ||
  	         typeof arg === 'number' ||
  	         typeof arg === 'string' ||
  	         typeof arg === 'symbol' ||  // ES6 symbol
  	         typeof arg === 'undefined';
  	}
  	exports.isPrimitive = isPrimitive;

  	exports.isBuffer = Buffer.isBuffer;

  	function objectToString(o) {
  	  return Object.prototype.toString.call(o);
  	}

  	}).call(this,{"isBuffer":require("../../is-buffer/index.js")});

  	},{"../../is-buffer/index.js":95}],57:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var BlockCipher = C_lib.BlockCipher;
  		    var C_algo = C.algo;

  		    // Lookup tables
  		    var SBOX = [];
  		    var INV_SBOX = [];
  		    var SUB_MIX_0 = [];
  		    var SUB_MIX_1 = [];
  		    var SUB_MIX_2 = [];
  		    var SUB_MIX_3 = [];
  		    var INV_SUB_MIX_0 = [];
  		    var INV_SUB_MIX_1 = [];
  		    var INV_SUB_MIX_2 = [];
  		    var INV_SUB_MIX_3 = [];

  		    // Compute lookup tables
  		    (function () {
  		        // Compute double table
  		        var d = [];
  		        for (var i = 0; i < 256; i++) {
  		            if (i < 128) {
  		                d[i] = i << 1;
  		            } else {
  		                d[i] = (i << 1) ^ 0x11b;
  		            }
  		        }

  		        // Walk GF(2^8)
  		        var x = 0;
  		        var xi = 0;
  		        for (var i = 0; i < 256; i++) {
  		            // Compute sbox
  		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
  		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
  		            SBOX[x] = sx;
  		            INV_SBOX[sx] = x;

  		            // Compute multiplication
  		            var x2 = d[x];
  		            var x4 = d[x2];
  		            var x8 = d[x4];

  		            // Compute sub bytes, mix columns tables
  		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
  		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
  		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
  		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
  		            SUB_MIX_3[x] = t;

  		            // Compute inv sub bytes, inv mix columns tables
  		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
  		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
  		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
  		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
  		            INV_SUB_MIX_3[sx] = t;

  		            // Compute next counter
  		            if (!x) {
  		                x = xi = 1;
  		            } else {
  		                x = x2 ^ d[d[d[x8 ^ x2]]];
  		                xi ^= d[d[xi]];
  		            }
  		        }
  		    }());

  		    // Precomputed Rcon lookup
  		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

  		    /**
  		     * AES block cipher algorithm.
  		     */
  		    var AES = C_algo.AES = BlockCipher.extend({
  		        _doReset: function () {
  		            // Skip reset of nRounds has been set before and key did not change
  		            if (this._nRounds && this._keyPriorReset === this._key) {
  		                return;
  		            }

  		            // Shortcuts
  		            var key = this._keyPriorReset = this._key;
  		            var keyWords = key.words;
  		            var keySize = key.sigBytes / 4;

  		            // Compute number of rounds
  		            var nRounds = this._nRounds = keySize + 6;

  		            // Compute number of key schedule rows
  		            var ksRows = (nRounds + 1) * 4;

  		            // Compute key schedule
  		            var keySchedule = this._keySchedule = [];
  		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
  		                if (ksRow < keySize) {
  		                    keySchedule[ksRow] = keyWords[ksRow];
  		                } else {
  		                    var t = keySchedule[ksRow - 1];

  		                    if (!(ksRow % keySize)) {
  		                        // Rot word
  		                        t = (t << 8) | (t >>> 24);

  		                        // Sub word
  		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

  		                        // Mix Rcon
  		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
  		                    } else if (keySize > 6 && ksRow % keySize == 4) {
  		                        // Sub word
  		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
  		                    }

  		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
  		                }
  		            }

  		            // Compute inv key schedule
  		            var invKeySchedule = this._invKeySchedule = [];
  		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
  		                var ksRow = ksRows - invKsRow;

  		                if (invKsRow % 4) {
  		                    var t = keySchedule[ksRow];
  		                } else {
  		                    var t = keySchedule[ksRow - 4];
  		                }

  		                if (invKsRow < 4 || ksRow <= 4) {
  		                    invKeySchedule[invKsRow] = t;
  		                } else {
  		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
  		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
  		                }
  		            }
  		        },

  		        encryptBlock: function (M, offset) {
  		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
  		        },

  		        decryptBlock: function (M, offset) {
  		            // Swap 2nd and 4th rows
  		            var t = M[offset + 1];
  		            M[offset + 1] = M[offset + 3];
  		            M[offset + 3] = t;

  		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

  		            // Inv swap 2nd and 4th rows
  		            var t = M[offset + 1];
  		            M[offset + 1] = M[offset + 3];
  		            M[offset + 3] = t;
  		        },

  		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
  		            // Shortcut
  		            var nRounds = this._nRounds;

  		            // Get input, add round key
  		            var s0 = M[offset]     ^ keySchedule[0];
  		            var s1 = M[offset + 1] ^ keySchedule[1];
  		            var s2 = M[offset + 2] ^ keySchedule[2];
  		            var s3 = M[offset + 3] ^ keySchedule[3];

  		            // Key schedule row counter
  		            var ksRow = 4;

  		            // Rounds
  		            for (var round = 1; round < nRounds; round++) {
  		                // Shift rows, sub bytes, mix columns, add round key
  		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
  		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
  		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
  		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

  		                // Update state
  		                s0 = t0;
  		                s1 = t1;
  		                s2 = t2;
  		                s3 = t3;
  		            }

  		            // Shift rows, sub bytes, add round key
  		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

  		            // Set output
  		            M[offset]     = t0;
  		            M[offset + 1] = t1;
  		            M[offset + 2] = t2;
  		            M[offset + 3] = t3;
  		        },

  		        keySize: 256/32
  		    });

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
  		     */
  		    C.AES = BlockCipher._createHelper(AES);
  		}());


  		return CryptoJS.AES;

  	}));
  	},{"./cipher-core":58,"./core":59,"./enc-base64":60,"./evpkdf":62,"./md5":67}],58:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Cipher core components.
  		 */
  		CryptoJS.lib.Cipher || (function (undefined$1) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Base = C_lib.Base;
  		    var WordArray = C_lib.WordArray;
  		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
  		    var C_enc = C.enc;
  		    var Utf8 = C_enc.Utf8;
  		    var Base64 = C_enc.Base64;
  		    var C_algo = C.algo;
  		    var EvpKDF = C_algo.EvpKDF;

  		    /**
  		     * Abstract base cipher template.
  		     *
  		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
  		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
  		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
  		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
  		     */
  		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {WordArray} iv The IV to use for this operation.
  		         */
  		        cfg: Base.extend(),

  		        /**
  		         * Creates this cipher in encryption mode.
  		         *
  		         * @param {WordArray} key The key.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {Cipher} A cipher instance.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
  		         */
  		        createEncryptor: function (key, cfg) {
  		            return this.create(this._ENC_XFORM_MODE, key, cfg);
  		        },

  		        /**
  		         * Creates this cipher in decryption mode.
  		         *
  		         * @param {WordArray} key The key.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {Cipher} A cipher instance.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
  		         */
  		        createDecryptor: function (key, cfg) {
  		            return this.create(this._DEC_XFORM_MODE, key, cfg);
  		        },

  		        /**
  		         * Initializes a newly created cipher.
  		         *
  		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
  		         * @param {WordArray} key The key.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @example
  		         *
  		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
  		         */
  		        init: function (xformMode, key, cfg) {
  		            // Apply config defaults
  		            this.cfg = this.cfg.extend(cfg);

  		            // Store transform mode and key
  		            this._xformMode = xformMode;
  		            this._key = key;

  		            // Set initial values
  		            this.reset();
  		        },

  		        /**
  		         * Resets this cipher to its initial state.
  		         *
  		         * @example
  		         *
  		         *     cipher.reset();
  		         */
  		        reset: function () {
  		            // Reset data buffer
  		            BufferedBlockAlgorithm.reset.call(this);

  		            // Perform concrete-cipher logic
  		            this._doReset();
  		        },

  		        /**
  		         * Adds data to be encrypted or decrypted.
  		         *
  		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
  		         *
  		         * @return {WordArray} The data after processing.
  		         *
  		         * @example
  		         *
  		         *     var encrypted = cipher.process('data');
  		         *     var encrypted = cipher.process(wordArray);
  		         */
  		        process: function (dataUpdate) {
  		            // Append
  		            this._append(dataUpdate);

  		            // Process available blocks
  		            return this._process();
  		        },

  		        /**
  		         * Finalizes the encryption or decryption process.
  		         * Note that the finalize operation is effectively a destructive, read-once operation.
  		         *
  		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
  		         *
  		         * @return {WordArray} The data after final processing.
  		         *
  		         * @example
  		         *
  		         *     var encrypted = cipher.finalize();
  		         *     var encrypted = cipher.finalize('data');
  		         *     var encrypted = cipher.finalize(wordArray);
  		         */
  		        finalize: function (dataUpdate) {
  		            // Final data update
  		            if (dataUpdate) {
  		                this._append(dataUpdate);
  		            }

  		            // Perform concrete-cipher logic
  		            var finalProcessedData = this._doFinalize();

  		            return finalProcessedData;
  		        },

  		        keySize: 128/32,

  		        ivSize: 128/32,

  		        _ENC_XFORM_MODE: 1,

  		        _DEC_XFORM_MODE: 2,

  		        /**
  		         * Creates shortcut functions to a cipher's object interface.
  		         *
  		         * @param {Cipher} cipher The cipher to create a helper for.
  		         *
  		         * @return {Object} An object with encrypt and decrypt shortcut functions.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
  		         */
  		        _createHelper: (function () {
  		            function selectCipherStrategy(key) {
  		                if (typeof key == 'string') {
  		                    return PasswordBasedCipher;
  		                } else {
  		                    return SerializableCipher;
  		                }
  		            }

  		            return function (cipher) {
  		                return {
  		                    encrypt: function (message, key, cfg) {
  		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
  		                    },

  		                    decrypt: function (ciphertext, key, cfg) {
  		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
  		                    }
  		                };
  		            };
  		        }())
  		    });

  		    /**
  		     * Abstract base stream cipher template.
  		     *
  		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
  		     */
  		    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
  		        _doFinalize: function () {
  		            // Process partial blocks
  		            var finalProcessedBlocks = this._process(!!'flush');

  		            return finalProcessedBlocks;
  		        },

  		        blockSize: 1
  		    });

  		    /**
  		     * Mode namespace.
  		     */
  		    var C_mode = C.mode = {};

  		    /**
  		     * Abstract base block cipher mode template.
  		     */
  		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
  		        /**
  		         * Creates this mode for encryption.
  		         *
  		         * @param {Cipher} cipher A block cipher instance.
  		         * @param {Array} iv The IV words.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
  		         */
  		        createEncryptor: function (cipher, iv) {
  		            return this.Encryptor.create(cipher, iv);
  		        },

  		        /**
  		         * Creates this mode for decryption.
  		         *
  		         * @param {Cipher} cipher A block cipher instance.
  		         * @param {Array} iv The IV words.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
  		         */
  		        createDecryptor: function (cipher, iv) {
  		            return this.Decryptor.create(cipher, iv);
  		        },

  		        /**
  		         * Initializes a newly created mode.
  		         *
  		         * @param {Cipher} cipher A block cipher instance.
  		         * @param {Array} iv The IV words.
  		         *
  		         * @example
  		         *
  		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
  		         */
  		        init: function (cipher, iv) {
  		            this._cipher = cipher;
  		            this._iv = iv;
  		        }
  		    });

  		    /**
  		     * Cipher Block Chaining mode.
  		     */
  		    var CBC = C_mode.CBC = (function () {
  		        /**
  		         * Abstract base CBC mode.
  		         */
  		        var CBC = BlockCipherMode.extend();

  		        /**
  		         * CBC encryptor.
  		         */
  		        CBC.Encryptor = CBC.extend({
  		            /**
  		             * Processes the data block at offset.
  		             *
  		             * @param {Array} words The data words to operate on.
  		             * @param {number} offset The offset where the block starts.
  		             *
  		             * @example
  		             *
  		             *     mode.processBlock(data.words, offset);
  		             */
  		            processBlock: function (words, offset) {
  		                // Shortcuts
  		                var cipher = this._cipher;
  		                var blockSize = cipher.blockSize;

  		                // XOR and encrypt
  		                xorBlock.call(this, words, offset, blockSize);
  		                cipher.encryptBlock(words, offset);

  		                // Remember this block to use with next block
  		                this._prevBlock = words.slice(offset, offset + blockSize);
  		            }
  		        });

  		        /**
  		         * CBC decryptor.
  		         */
  		        CBC.Decryptor = CBC.extend({
  		            /**
  		             * Processes the data block at offset.
  		             *
  		             * @param {Array} words The data words to operate on.
  		             * @param {number} offset The offset where the block starts.
  		             *
  		             * @example
  		             *
  		             *     mode.processBlock(data.words, offset);
  		             */
  		            processBlock: function (words, offset) {
  		                // Shortcuts
  		                var cipher = this._cipher;
  		                var blockSize = cipher.blockSize;

  		                // Remember this block to use with next block
  		                var thisBlock = words.slice(offset, offset + blockSize);

  		                // Decrypt and XOR
  		                cipher.decryptBlock(words, offset);
  		                xorBlock.call(this, words, offset, blockSize);

  		                // This block becomes the previous block
  		                this._prevBlock = thisBlock;
  		            }
  		        });

  		        function xorBlock(words, offset, blockSize) {
  		            // Shortcut
  		            var iv = this._iv;

  		            // Choose mixing block
  		            if (iv) {
  		                var block = iv;

  		                // Remove IV for subsequent blocks
  		                this._iv = undefined$1;
  		            } else {
  		                var block = this._prevBlock;
  		            }

  		            // XOR blocks
  		            for (var i = 0; i < blockSize; i++) {
  		                words[offset + i] ^= block[i];
  		            }
  		        }

  		        return CBC;
  		    }());

  		    /**
  		     * Padding namespace.
  		     */
  		    var C_pad = C.pad = {};

  		    /**
  		     * PKCS #5/7 padding strategy.
  		     */
  		    var Pkcs7 = C_pad.Pkcs7 = {
  		        /**
  		         * Pads data using the algorithm defined in PKCS #5/7.
  		         *
  		         * @param {WordArray} data The data to pad.
  		         * @param {number} blockSize The multiple that the data should be padded to.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
  		         */
  		        pad: function (data, blockSize) {
  		            // Shortcut
  		            var blockSizeBytes = blockSize * 4;

  		            // Count padding bytes
  		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

  		            // Create padding word
  		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

  		            // Create padding
  		            var paddingWords = [];
  		            for (var i = 0; i < nPaddingBytes; i += 4) {
  		                paddingWords.push(paddingWord);
  		            }
  		            var padding = WordArray.create(paddingWords, nPaddingBytes);

  		            // Add padding
  		            data.concat(padding);
  		        },

  		        /**
  		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
  		         *
  		         * @param {WordArray} data The data to unpad.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
  		         */
  		        unpad: function (data) {
  		            // Get number of padding bytes from last byte
  		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

  		            // Remove padding
  		            data.sigBytes -= nPaddingBytes;
  		        }
  		    };

  		    /**
  		     * Abstract base block cipher template.
  		     *
  		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
  		     */
  		    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {Mode} mode The block mode to use. Default: CBC
  		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
  		         */
  		        cfg: Cipher.cfg.extend({
  		            mode: CBC,
  		            padding: Pkcs7
  		        }),

  		        reset: function () {
  		            // Reset cipher
  		            Cipher.reset.call(this);

  		            // Shortcuts
  		            var cfg = this.cfg;
  		            var iv = cfg.iv;
  		            var mode = cfg.mode;

  		            // Reset block mode
  		            if (this._xformMode == this._ENC_XFORM_MODE) {
  		                var modeCreator = mode.createEncryptor;
  		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
  		                var modeCreator = mode.createDecryptor;

  		                // Keep at least one block in the buffer for unpadding
  		                this._minBufferSize = 1;
  		            }
  		            this._mode = modeCreator.call(mode, this, iv && iv.words);
  		        },

  		        _doProcessBlock: function (words, offset) {
  		            this._mode.processBlock(words, offset);
  		        },

  		        _doFinalize: function () {
  		            // Shortcut
  		            var padding = this.cfg.padding;

  		            // Finalize
  		            if (this._xformMode == this._ENC_XFORM_MODE) {
  		                // Pad data
  		                padding.pad(this._data, this.blockSize);

  		                // Process final blocks
  		                var finalProcessedBlocks = this._process(!!'flush');
  		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
  		                // Process final blocks
  		                var finalProcessedBlocks = this._process(!!'flush');

  		                // Unpad data
  		                padding.unpad(finalProcessedBlocks);
  		            }

  		            return finalProcessedBlocks;
  		        },

  		        blockSize: 128/32
  		    });

  		    /**
  		     * A collection of cipher parameters.
  		     *
  		     * @property {WordArray} ciphertext The raw ciphertext.
  		     * @property {WordArray} key The key to this ciphertext.
  		     * @property {WordArray} iv The IV used in the ciphering operation.
  		     * @property {WordArray} salt The salt used with a key derivation function.
  		     * @property {Cipher} algorithm The cipher algorithm.
  		     * @property {Mode} mode The block mode used in the ciphering operation.
  		     * @property {Padding} padding The padding scheme used in the ciphering operation.
  		     * @property {number} blockSize The block size of the cipher.
  		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
  		     */
  		    var CipherParams = C_lib.CipherParams = Base.extend({
  		        /**
  		         * Initializes a newly created cipher params object.
  		         *
  		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
  		         *
  		         * @example
  		         *
  		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
  		         *         ciphertext: ciphertextWordArray,
  		         *         key: keyWordArray,
  		         *         iv: ivWordArray,
  		         *         salt: saltWordArray,
  		         *         algorithm: CryptoJS.algo.AES,
  		         *         mode: CryptoJS.mode.CBC,
  		         *         padding: CryptoJS.pad.PKCS7,
  		         *         blockSize: 4,
  		         *         formatter: CryptoJS.format.OpenSSL
  		         *     });
  		         */
  		        init: function (cipherParams) {
  		            this.mixIn(cipherParams);
  		        },

  		        /**
  		         * Converts this cipher params object to a string.
  		         *
  		         * @param {Format} formatter (Optional) The formatting strategy to use.
  		         *
  		         * @return {string} The stringified cipher params.
  		         *
  		         * @throws Error If neither the formatter nor the default formatter is set.
  		         *
  		         * @example
  		         *
  		         *     var string = cipherParams + '';
  		         *     var string = cipherParams.toString();
  		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
  		         */
  		        toString: function (formatter) {
  		            return (formatter || this.formatter).stringify(this);
  		        }
  		    });

  		    /**
  		     * Format namespace.
  		     */
  		    var C_format = C.format = {};

  		    /**
  		     * OpenSSL formatting strategy.
  		     */
  		    var OpenSSLFormatter = C_format.OpenSSL = {
  		        /**
  		         * Converts a cipher params object to an OpenSSL-compatible string.
  		         *
  		         * @param {CipherParams} cipherParams The cipher params object.
  		         *
  		         * @return {string} The OpenSSL-compatible string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
  		         */
  		        stringify: function (cipherParams) {
  		            // Shortcuts
  		            var ciphertext = cipherParams.ciphertext;
  		            var salt = cipherParams.salt;

  		            // Format
  		            if (salt) {
  		                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
  		            } else {
  		                var wordArray = ciphertext;
  		            }

  		            return wordArray.toString(Base64);
  		        },

  		        /**
  		         * Converts an OpenSSL-compatible string to a cipher params object.
  		         *
  		         * @param {string} openSSLStr The OpenSSL-compatible string.
  		         *
  		         * @return {CipherParams} The cipher params object.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
  		         */
  		        parse: function (openSSLStr) {
  		            // Parse base64
  		            var ciphertext = Base64.parse(openSSLStr);

  		            // Shortcut
  		            var ciphertextWords = ciphertext.words;

  		            // Test for salt
  		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
  		                // Extract salt
  		                var salt = WordArray.create(ciphertextWords.slice(2, 4));

  		                // Remove salt from ciphertext
  		                ciphertextWords.splice(0, 4);
  		                ciphertext.sigBytes -= 16;
  		            }

  		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
  		        }
  		    };

  		    /**
  		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
  		     */
  		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
  		         */
  		        cfg: Base.extend({
  		            format: OpenSSLFormatter
  		        }),

  		        /**
  		         * Encrypts a message.
  		         *
  		         * @param {Cipher} cipher The cipher algorithm to use.
  		         * @param {WordArray|string} message The message to encrypt.
  		         * @param {WordArray} key The key.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {CipherParams} A cipher params object.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
  		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
  		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
  		         */
  		        encrypt: function (cipher, message, key, cfg) {
  		            // Apply config defaults
  		            cfg = this.cfg.extend(cfg);

  		            // Encrypt
  		            var encryptor = cipher.createEncryptor(key, cfg);
  		            var ciphertext = encryptor.finalize(message);

  		            // Shortcut
  		            var cipherCfg = encryptor.cfg;

  		            // Create and return serializable cipher params
  		            return CipherParams.create({
  		                ciphertext: ciphertext,
  		                key: key,
  		                iv: cipherCfg.iv,
  		                algorithm: cipher,
  		                mode: cipherCfg.mode,
  		                padding: cipherCfg.padding,
  		                blockSize: cipher.blockSize,
  		                formatter: cfg.format
  		            });
  		        },

  		        /**
  		         * Decrypts serialized ciphertext.
  		         *
  		         * @param {Cipher} cipher The cipher algorithm to use.
  		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
  		         * @param {WordArray} key The key.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {WordArray} The plaintext.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
  		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
  		         */
  		        decrypt: function (cipher, ciphertext, key, cfg) {
  		            // Apply config defaults
  		            cfg = this.cfg.extend(cfg);

  		            // Convert string to CipherParams
  		            ciphertext = this._parse(ciphertext, cfg.format);

  		            // Decrypt
  		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

  		            return plaintext;
  		        },

  		        /**
  		         * Converts serialized ciphertext to CipherParams,
  		         * else assumed CipherParams already and returns ciphertext unchanged.
  		         *
  		         * @param {CipherParams|string} ciphertext The ciphertext.
  		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
  		         *
  		         * @return {CipherParams} The unserialized ciphertext.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
  		         */
  		        _parse: function (ciphertext, format) {
  		            if (typeof ciphertext == 'string') {
  		                return format.parse(ciphertext, this);
  		            } else {
  		                return ciphertext;
  		            }
  		        }
  		    });

  		    /**
  		     * Key derivation function namespace.
  		     */
  		    var C_kdf = C.kdf = {};

  		    /**
  		     * OpenSSL key derivation function.
  		     */
  		    var OpenSSLKdf = C_kdf.OpenSSL = {
  		        /**
  		         * Derives a key and IV from a password.
  		         *
  		         * @param {string} password The password to derive from.
  		         * @param {number} keySize The size in words of the key to generate.
  		         * @param {number} ivSize The size in words of the IV to generate.
  		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
  		         *
  		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
  		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
  		         */
  		        execute: function (password, keySize, ivSize, salt) {
  		            // Generate random salt
  		            if (!salt) {
  		                salt = WordArray.random(64/8);
  		            }

  		            // Derive key and IV
  		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

  		            // Separate key and IV
  		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
  		            key.sigBytes = keySize * 4;

  		            // Return params
  		            return CipherParams.create({ key: key, iv: iv, salt: salt });
  		        }
  		    };

  		    /**
  		     * A serializable cipher wrapper that derives the key from a password,
  		     * and returns ciphertext as a serializable cipher params object.
  		     */
  		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
  		         */
  		        cfg: SerializableCipher.cfg.extend({
  		            kdf: OpenSSLKdf
  		        }),

  		        /**
  		         * Encrypts a message using a password.
  		         *
  		         * @param {Cipher} cipher The cipher algorithm to use.
  		         * @param {WordArray|string} message The message to encrypt.
  		         * @param {string} password The password.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {CipherParams} A cipher params object.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
  		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
  		         */
  		        encrypt: function (cipher, message, password, cfg) {
  		            // Apply config defaults
  		            cfg = this.cfg.extend(cfg);

  		            // Derive key and other params
  		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

  		            // Add IV to config
  		            cfg.iv = derivedParams.iv;

  		            // Encrypt
  		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

  		            // Mix in derived params
  		            ciphertext.mixIn(derivedParams);

  		            return ciphertext;
  		        },

  		        /**
  		         * Decrypts serialized ciphertext using a password.
  		         *
  		         * @param {Cipher} cipher The cipher algorithm to use.
  		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
  		         * @param {string} password The password.
  		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
  		         *
  		         * @return {WordArray} The plaintext.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
  		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
  		         */
  		        decrypt: function (cipher, ciphertext, password, cfg) {
  		            // Apply config defaults
  		            cfg = this.cfg.extend(cfg);

  		            // Convert string to CipherParams
  		            ciphertext = this._parse(ciphertext, cfg.format);

  		            // Derive key and other params
  		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

  		            // Add IV to config
  		            cfg.iv = derivedParams.iv;

  		            // Decrypt
  		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

  		            return plaintext;
  		        }
  		    });
  		}());


  	}));
  	},{"./core":59}],59:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory();
  		}
  		else {
  			// Global (browser)
  			root.CryptoJS = factory();
  		}
  	}(this, function () {

  		/**
  		 * CryptoJS core components.
  		 */
  		var CryptoJS = CryptoJS || (function (Math, undefined$1) {
  		    /*
  		     * Local polyfil of Object.create
  		     */
  		    var create = Object.create || (function () {
  		        function F() {}
  		        return function (obj) {
  		            var subtype;

  		            F.prototype = obj;

  		            subtype = new F();

  		            F.prototype = null;

  		            return subtype;
  		        };
  		    }());

  		    /**
  		     * CryptoJS namespace.
  		     */
  		    var C = {};

  		    /**
  		     * Library namespace.
  		     */
  		    var C_lib = C.lib = {};

  		    /**
  		     * Base object for prototypal inheritance.
  		     */
  		    var Base = C_lib.Base = (function () {


  		        return {
  		            /**
  		             * Creates a new object that inherits from this object.
  		             *
  		             * @param {Object} overrides Properties to copy into the new object.
  		             *
  		             * @return {Object} The new object.
  		             *
  		             * @static
  		             *
  		             * @example
  		             *
  		             *     var MyType = CryptoJS.lib.Base.extend({
  		             *         field: 'value',
  		             *
  		             *         method: function () {
  		             *         }
  		             *     });
  		             */
  		            extend: function (overrides) {
  		                // Spawn
  		                var subtype = create(this);

  		                // Augment
  		                if (overrides) {
  		                    subtype.mixIn(overrides);
  		                }

  		                // Create default initializer
  		                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
  		                    subtype.init = function () {
  		                        subtype.$super.init.apply(this, arguments);
  		                    };
  		                }

  		                // Initializer's prototype is the subtype object
  		                subtype.init.prototype = subtype;

  		                // Reference supertype
  		                subtype.$super = this;

  		                return subtype;
  		            },

  		            /**
  		             * Extends this object and runs the init method.
  		             * Arguments to create() will be passed to init().
  		             *
  		             * @return {Object} The new object.
  		             *
  		             * @static
  		             *
  		             * @example
  		             *
  		             *     var instance = MyType.create();
  		             */
  		            create: function () {
  		                var instance = this.extend();
  		                instance.init.apply(instance, arguments);

  		                return instance;
  		            },

  		            /**
  		             * Initializes a newly created object.
  		             * Override this method to add some logic when your objects are created.
  		             *
  		             * @example
  		             *
  		             *     var MyType = CryptoJS.lib.Base.extend({
  		             *         init: function () {
  		             *             // ...
  		             *         }
  		             *     });
  		             */
  		            init: function () {
  		            },

  		            /**
  		             * Copies properties into this object.
  		             *
  		             * @param {Object} properties The properties to mix in.
  		             *
  		             * @example
  		             *
  		             *     MyType.mixIn({
  		             *         field: 'value'
  		             *     });
  		             */
  		            mixIn: function (properties) {
  		                for (var propertyName in properties) {
  		                    if (properties.hasOwnProperty(propertyName)) {
  		                        this[propertyName] = properties[propertyName];
  		                    }
  		                }

  		                // IE won't copy toString using the loop above
  		                if (properties.hasOwnProperty('toString')) {
  		                    this.toString = properties.toString;
  		                }
  		            },

  		            /**
  		             * Creates a copy of this object.
  		             *
  		             * @return {Object} The clone.
  		             *
  		             * @example
  		             *
  		             *     var clone = instance.clone();
  		             */
  		            clone: function () {
  		                return this.init.prototype.extend(this);
  		            }
  		        };
  		    }());

  		    /**
  		     * An array of 32-bit words.
  		     *
  		     * @property {Array} words The array of 32-bit words.
  		     * @property {number} sigBytes The number of significant bytes in this word array.
  		     */
  		    var WordArray = C_lib.WordArray = Base.extend({
  		        /**
  		         * Initializes a newly created word array.
  		         *
  		         * @param {Array} words (Optional) An array of 32-bit words.
  		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.lib.WordArray.create();
  		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
  		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
  		         */
  		        init: function (words, sigBytes) {
  		            words = this.words = words || [];

  		            if (sigBytes != undefined$1) {
  		                this.sigBytes = sigBytes;
  		            } else {
  		                this.sigBytes = words.length * 4;
  		            }
  		        },

  		        /**
  		         * Converts this word array to a string.
  		         *
  		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
  		         *
  		         * @return {string} The stringified word array.
  		         *
  		         * @example
  		         *
  		         *     var string = wordArray + '';
  		         *     var string = wordArray.toString();
  		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
  		         */
  		        toString: function (encoder) {
  		            return (encoder || Hex).stringify(this);
  		        },

  		        /**
  		         * Concatenates a word array to this word array.
  		         *
  		         * @param {WordArray} wordArray The word array to append.
  		         *
  		         * @return {WordArray} This word array.
  		         *
  		         * @example
  		         *
  		         *     wordArray1.concat(wordArray2);
  		         */
  		        concat: function (wordArray) {
  		            // Shortcuts
  		            var thisWords = this.words;
  		            var thatWords = wordArray.words;
  		            var thisSigBytes = this.sigBytes;
  		            var thatSigBytes = wordArray.sigBytes;

  		            // Clamp excess bits
  		            this.clamp();

  		            // Concat
  		            if (thisSigBytes % 4) {
  		                // Copy one byte at a time
  		                for (var i = 0; i < thatSigBytes; i++) {
  		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
  		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
  		                }
  		            } else {
  		                // Copy one word at a time
  		                for (var i = 0; i < thatSigBytes; i += 4) {
  		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
  		                }
  		            }
  		            this.sigBytes += thatSigBytes;

  		            // Chainable
  		            return this;
  		        },

  		        /**
  		         * Removes insignificant bits.
  		         *
  		         * @example
  		         *
  		         *     wordArray.clamp();
  		         */
  		        clamp: function () {
  		            // Shortcuts
  		            var words = this.words;
  		            var sigBytes = this.sigBytes;

  		            // Clamp
  		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
  		            words.length = Math.ceil(sigBytes / 4);
  		        },

  		        /**
  		         * Creates a copy of this word array.
  		         *
  		         * @return {WordArray} The clone.
  		         *
  		         * @example
  		         *
  		         *     var clone = wordArray.clone();
  		         */
  		        clone: function () {
  		            var clone = Base.clone.call(this);
  		            clone.words = this.words.slice(0);

  		            return clone;
  		        },

  		        /**
  		         * Creates a word array filled with random bytes.
  		         *
  		         * @param {number} nBytes The number of random bytes to generate.
  		         *
  		         * @return {WordArray} The random word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
  		         */
  		        random: function (nBytes) {
  		            var words = [];

  		            var r = (function (m_w) {
  		                var m_w = m_w;
  		                var m_z = 0x3ade68b1;
  		                var mask = 0xffffffff;

  		                return function () {
  		                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
  		                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
  		                    var result = ((m_z << 0x10) + m_w) & mask;
  		                    result /= 0x100000000;
  		                    result += 0.5;
  		                    return result * (Math.random() > .5 ? 1 : -1);
  		                }
  		            });

  		            for (var i = 0, rcache; i < nBytes; i += 4) {
  		                var _r = r((rcache || Math.random()) * 0x100000000);

  		                rcache = _r() * 0x3ade67b7;
  		                words.push((_r() * 0x100000000) | 0);
  		            }

  		            return new WordArray.init(words, nBytes);
  		        }
  		    });

  		    /**
  		     * Encoder namespace.
  		     */
  		    var C_enc = C.enc = {};

  		    /**
  		     * Hex encoding strategy.
  		     */
  		    var Hex = C_enc.Hex = {
  		        /**
  		         * Converts a word array to a hex string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The hex string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            // Shortcuts
  		            var words = wordArray.words;
  		            var sigBytes = wordArray.sigBytes;

  		            // Convert
  		            var hexChars = [];
  		            for (var i = 0; i < sigBytes; i++) {
  		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
  		                hexChars.push((bite >>> 4).toString(16));
  		                hexChars.push((bite & 0x0f).toString(16));
  		            }

  		            return hexChars.join('');
  		        },

  		        /**
  		         * Converts a hex string to a word array.
  		         *
  		         * @param {string} hexStr The hex string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
  		         */
  		        parse: function (hexStr) {
  		            // Shortcut
  		            var hexStrLength = hexStr.length;

  		            // Convert
  		            var words = [];
  		            for (var i = 0; i < hexStrLength; i += 2) {
  		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
  		            }

  		            return new WordArray.init(words, hexStrLength / 2);
  		        }
  		    };

  		    /**
  		     * Latin1 encoding strategy.
  		     */
  		    var Latin1 = C_enc.Latin1 = {
  		        /**
  		         * Converts a word array to a Latin1 string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The Latin1 string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            // Shortcuts
  		            var words = wordArray.words;
  		            var sigBytes = wordArray.sigBytes;

  		            // Convert
  		            var latin1Chars = [];
  		            for (var i = 0; i < sigBytes; i++) {
  		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
  		                latin1Chars.push(String.fromCharCode(bite));
  		            }

  		            return latin1Chars.join('');
  		        },

  		        /**
  		         * Converts a Latin1 string to a word array.
  		         *
  		         * @param {string} latin1Str The Latin1 string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
  		         */
  		        parse: function (latin1Str) {
  		            // Shortcut
  		            var latin1StrLength = latin1Str.length;

  		            // Convert
  		            var words = [];
  		            for (var i = 0; i < latin1StrLength; i++) {
  		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
  		            }

  		            return new WordArray.init(words, latin1StrLength);
  		        }
  		    };

  		    /**
  		     * UTF-8 encoding strategy.
  		     */
  		    var Utf8 = C_enc.Utf8 = {
  		        /**
  		         * Converts a word array to a UTF-8 string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The UTF-8 string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            try {
  		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
  		            } catch (e) {
  		                throw new Error('Malformed UTF-8 data');
  		            }
  		        },

  		        /**
  		         * Converts a UTF-8 string to a word array.
  		         *
  		         * @param {string} utf8Str The UTF-8 string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
  		         */
  		        parse: function (utf8Str) {
  		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
  		        }
  		    };

  		    /**
  		     * Abstract buffered block algorithm template.
  		     *
  		     * The property blockSize must be implemented in a concrete subtype.
  		     *
  		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
  		     */
  		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
  		        /**
  		         * Resets this block algorithm's data buffer to its initial state.
  		         *
  		         * @example
  		         *
  		         *     bufferedBlockAlgorithm.reset();
  		         */
  		        reset: function () {
  		            // Initial values
  		            this._data = new WordArray.init();
  		            this._nDataBytes = 0;
  		        },

  		        /**
  		         * Adds new data to this block algorithm's buffer.
  		         *
  		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
  		         *
  		         * @example
  		         *
  		         *     bufferedBlockAlgorithm._append('data');
  		         *     bufferedBlockAlgorithm._append(wordArray);
  		         */
  		        _append: function (data) {
  		            // Convert string to WordArray, else assume WordArray already
  		            if (typeof data == 'string') {
  		                data = Utf8.parse(data);
  		            }

  		            // Append
  		            this._data.concat(data);
  		            this._nDataBytes += data.sigBytes;
  		        },

  		        /**
  		         * Processes available data blocks.
  		         *
  		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
  		         *
  		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
  		         *
  		         * @return {WordArray} The processed data.
  		         *
  		         * @example
  		         *
  		         *     var processedData = bufferedBlockAlgorithm._process();
  		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
  		         */
  		        _process: function (doFlush) {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;
  		            var dataSigBytes = data.sigBytes;
  		            var blockSize = this.blockSize;
  		            var blockSizeBytes = blockSize * 4;

  		            // Count blocks ready
  		            var nBlocksReady = dataSigBytes / blockSizeBytes;
  		            if (doFlush) {
  		                // Round up to include partial blocks
  		                nBlocksReady = Math.ceil(nBlocksReady);
  		            } else {
  		                // Round down to include only full blocks,
  		                // less the number of blocks that must remain in the buffer
  		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
  		            }

  		            // Count words ready
  		            var nWordsReady = nBlocksReady * blockSize;

  		            // Count bytes ready
  		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

  		            // Process blocks
  		            if (nWordsReady) {
  		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
  		                    // Perform concrete-algorithm logic
  		                    this._doProcessBlock(dataWords, offset);
  		                }

  		                // Remove processed words
  		                var processedWords = dataWords.splice(0, nWordsReady);
  		                data.sigBytes -= nBytesReady;
  		            }

  		            // Return processed words
  		            return new WordArray.init(processedWords, nBytesReady);
  		        },

  		        /**
  		         * Creates a copy of this object.
  		         *
  		         * @return {Object} The clone.
  		         *
  		         * @example
  		         *
  		         *     var clone = bufferedBlockAlgorithm.clone();
  		         */
  		        clone: function () {
  		            var clone = Base.clone.call(this);
  		            clone._data = this._data.clone();

  		            return clone;
  		        },

  		        _minBufferSize: 0
  		    });

  		    /**
  		     * Abstract hasher template.
  		     *
  		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
  		     */
  		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
  		        /**
  		         * Configuration options.
  		         */
  		        cfg: Base.extend(),

  		        /**
  		         * Initializes a newly created hasher.
  		         *
  		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
  		         *
  		         * @example
  		         *
  		         *     var hasher = CryptoJS.algo.SHA256.create();
  		         */
  		        init: function (cfg) {
  		            // Apply config defaults
  		            this.cfg = this.cfg.extend(cfg);

  		            // Set initial values
  		            this.reset();
  		        },

  		        /**
  		         * Resets this hasher to its initial state.
  		         *
  		         * @example
  		         *
  		         *     hasher.reset();
  		         */
  		        reset: function () {
  		            // Reset data buffer
  		            BufferedBlockAlgorithm.reset.call(this);

  		            // Perform concrete-hasher logic
  		            this._doReset();
  		        },

  		        /**
  		         * Updates this hasher with a message.
  		         *
  		         * @param {WordArray|string} messageUpdate The message to append.
  		         *
  		         * @return {Hasher} This hasher.
  		         *
  		         * @example
  		         *
  		         *     hasher.update('message');
  		         *     hasher.update(wordArray);
  		         */
  		        update: function (messageUpdate) {
  		            // Append
  		            this._append(messageUpdate);

  		            // Update the hash
  		            this._process();

  		            // Chainable
  		            return this;
  		        },

  		        /**
  		         * Finalizes the hash computation.
  		         * Note that the finalize operation is effectively a destructive, read-once operation.
  		         *
  		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
  		         *
  		         * @return {WordArray} The hash.
  		         *
  		         * @example
  		         *
  		         *     var hash = hasher.finalize();
  		         *     var hash = hasher.finalize('message');
  		         *     var hash = hasher.finalize(wordArray);
  		         */
  		        finalize: function (messageUpdate) {
  		            // Final message update
  		            if (messageUpdate) {
  		                this._append(messageUpdate);
  		            }

  		            // Perform concrete-hasher logic
  		            var hash = this._doFinalize();

  		            return hash;
  		        },

  		        blockSize: 512/32,

  		        /**
  		         * Creates a shortcut function to a hasher's object interface.
  		         *
  		         * @param {Hasher} hasher The hasher to create a helper for.
  		         *
  		         * @return {Function} The shortcut function.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
  		         */
  		        _createHelper: function (hasher) {
  		            return function (message, cfg) {
  		                return new hasher.init(cfg).finalize(message);
  		            };
  		        },

  		        /**
  		         * Creates a shortcut function to the HMAC's object interface.
  		         *
  		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
  		         *
  		         * @return {Function} The shortcut function.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
  		         */
  		        _createHmacHelper: function (hasher) {
  		            return function (message, key) {
  		                return new C_algo.HMAC.init(hasher, key).finalize(message);
  		            };
  		        }
  		    });

  		    /**
  		     * Algorithm namespace.
  		     */
  		    var C_algo = C.algo = {};

  		    return C;
  		}(Math));


  		return CryptoJS;

  	}));
  	},{}],60:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var C_enc = C.enc;

  		    /**
  		     * Base64 encoding strategy.
  		     */
  		    var Base64 = C_enc.Base64 = {
  		        /**
  		         * Converts a word array to a Base64 string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The Base64 string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            // Shortcuts
  		            var words = wordArray.words;
  		            var sigBytes = wordArray.sigBytes;
  		            var map = this._map;

  		            // Clamp excess bits
  		            wordArray.clamp();

  		            // Convert
  		            var base64Chars = [];
  		            for (var i = 0; i < sigBytes; i += 3) {
  		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
  		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
  		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

  		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

  		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
  		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
  		                }
  		            }

  		            // Add padding
  		            var paddingChar = map.charAt(64);
  		            if (paddingChar) {
  		                while (base64Chars.length % 4) {
  		                    base64Chars.push(paddingChar);
  		                }
  		            }

  		            return base64Chars.join('');
  		        },

  		        /**
  		         * Converts a Base64 string to a word array.
  		         *
  		         * @param {string} base64Str The Base64 string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
  		         */
  		        parse: function (base64Str) {
  		            // Shortcuts
  		            var base64StrLength = base64Str.length;
  		            var map = this._map;
  		            var reverseMap = this._reverseMap;

  		            if (!reverseMap) {
  		                    reverseMap = this._reverseMap = [];
  		                    for (var j = 0; j < map.length; j++) {
  		                        reverseMap[map.charCodeAt(j)] = j;
  		                    }
  		            }

  		            // Ignore padding
  		            var paddingChar = map.charAt(64);
  		            if (paddingChar) {
  		                var paddingIndex = base64Str.indexOf(paddingChar);
  		                if (paddingIndex !== -1) {
  		                    base64StrLength = paddingIndex;
  		                }
  		            }

  		            // Convert
  		            return parseLoop(base64Str, base64StrLength, reverseMap);

  		        },

  		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
  		    };

  		    function parseLoop(base64Str, base64StrLength, reverseMap) {
  		      var words = [];
  		      var nBytes = 0;
  		      for (var i = 0; i < base64StrLength; i++) {
  		          if (i % 4) {
  		              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
  		              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
  		              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
  		              nBytes++;
  		          }
  		      }
  		      return WordArray.create(words, nBytes);
  		    }
  		}());


  		return CryptoJS.enc.Base64;

  	}));
  	},{"./core":59}],61:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var C_enc = C.enc;

  		    /**
  		     * UTF-16 BE encoding strategy.
  		     */
  		    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
  		        /**
  		         * Converts a word array to a UTF-16 BE string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The UTF-16 BE string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            // Shortcuts
  		            var words = wordArray.words;
  		            var sigBytes = wordArray.sigBytes;

  		            // Convert
  		            var utf16Chars = [];
  		            for (var i = 0; i < sigBytes; i += 2) {
  		                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
  		                utf16Chars.push(String.fromCharCode(codePoint));
  		            }

  		            return utf16Chars.join('');
  		        },

  		        /**
  		         * Converts a UTF-16 BE string to a word array.
  		         *
  		         * @param {string} utf16Str The UTF-16 BE string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
  		         */
  		        parse: function (utf16Str) {
  		            // Shortcut
  		            var utf16StrLength = utf16Str.length;

  		            // Convert
  		            var words = [];
  		            for (var i = 0; i < utf16StrLength; i++) {
  		                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
  		            }

  		            return WordArray.create(words, utf16StrLength * 2);
  		        }
  		    };

  		    /**
  		     * UTF-16 LE encoding strategy.
  		     */
  		    C_enc.Utf16LE = {
  		        /**
  		         * Converts a word array to a UTF-16 LE string.
  		         *
  		         * @param {WordArray} wordArray The word array.
  		         *
  		         * @return {string} The UTF-16 LE string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
  		         */
  		        stringify: function (wordArray) {
  		            // Shortcuts
  		            var words = wordArray.words;
  		            var sigBytes = wordArray.sigBytes;

  		            // Convert
  		            var utf16Chars = [];
  		            for (var i = 0; i < sigBytes; i += 2) {
  		                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
  		                utf16Chars.push(String.fromCharCode(codePoint));
  		            }

  		            return utf16Chars.join('');
  		        },

  		        /**
  		         * Converts a UTF-16 LE string to a word array.
  		         *
  		         * @param {string} utf16Str The UTF-16 LE string.
  		         *
  		         * @return {WordArray} The word array.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
  		         */
  		        parse: function (utf16Str) {
  		            // Shortcut
  		            var utf16StrLength = utf16Str.length;

  		            // Convert
  		            var words = [];
  		            for (var i = 0; i < utf16StrLength; i++) {
  		                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
  		            }

  		            return WordArray.create(words, utf16StrLength * 2);
  		        }
  		    };

  		    function swapEndian(word) {
  		        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
  		    }
  		}());


  		return CryptoJS.enc.Utf16;

  	}));
  	},{"./core":59}],62:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Base = C_lib.Base;
  		    var WordArray = C_lib.WordArray;
  		    var C_algo = C.algo;
  		    var MD5 = C_algo.MD5;

  		    /**
  		     * This key derivation function is meant to conform with EVP_BytesToKey.
  		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
  		     */
  		    var EvpKDF = C_algo.EvpKDF = Base.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
  		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
  		         * @property {number} iterations The number of iterations to perform. Default: 1
  		         */
  		        cfg: Base.extend({
  		            keySize: 128/32,
  		            hasher: MD5,
  		            iterations: 1
  		        }),

  		        /**
  		         * Initializes a newly created key derivation function.
  		         *
  		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
  		         *
  		         * @example
  		         *
  		         *     var kdf = CryptoJS.algo.EvpKDF.create();
  		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
  		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
  		         */
  		        init: function (cfg) {
  		            this.cfg = this.cfg.extend(cfg);
  		        },

  		        /**
  		         * Derives a key from a password.
  		         *
  		         * @param {WordArray|string} password The password.
  		         * @param {WordArray|string} salt A salt.
  		         *
  		         * @return {WordArray} The derived key.
  		         *
  		         * @example
  		         *
  		         *     var key = kdf.compute(password, salt);
  		         */
  		        compute: function (password, salt) {
  		            // Shortcut
  		            var cfg = this.cfg;

  		            // Init hasher
  		            var hasher = cfg.hasher.create();

  		            // Initial values
  		            var derivedKey = WordArray.create();

  		            // Shortcuts
  		            var derivedKeyWords = derivedKey.words;
  		            var keySize = cfg.keySize;
  		            var iterations = cfg.iterations;

  		            // Generate key
  		            while (derivedKeyWords.length < keySize) {
  		                if (block) {
  		                    hasher.update(block);
  		                }
  		                var block = hasher.update(password).finalize(salt);
  		                hasher.reset();

  		                // Iterations
  		                for (var i = 1; i < iterations; i++) {
  		                    block = hasher.finalize(block);
  		                    hasher.reset();
  		                }

  		                derivedKey.concat(block);
  		            }
  		            derivedKey.sigBytes = keySize * 4;

  		            return derivedKey;
  		        }
  		    });

  		    /**
  		     * Derives a key from a password.
  		     *
  		     * @param {WordArray|string} password The password.
  		     * @param {WordArray|string} salt A salt.
  		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
  		     *
  		     * @return {WordArray} The derived key.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var key = CryptoJS.EvpKDF(password, salt);
  		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
  		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
  		     */
  		    C.EvpKDF = function (password, salt, cfg) {
  		        return EvpKDF.create(cfg).compute(password, salt);
  		    };
  		}());


  		return CryptoJS.EvpKDF;

  	}));
  	},{"./core":59,"./hmac":64,"./sha1":83}],63:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function (undefined$1) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var CipherParams = C_lib.CipherParams;
  		    var C_enc = C.enc;
  		    var Hex = C_enc.Hex;
  		    var C_format = C.format;

  		    var HexFormatter = C_format.Hex = {
  		        /**
  		         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
  		         *
  		         * @param {CipherParams} cipherParams The cipher params object.
  		         *
  		         * @return {string} The hexadecimally encoded string.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
  		         */
  		        stringify: function (cipherParams) {
  		            return cipherParams.ciphertext.toString(Hex);
  		        },

  		        /**
  		         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
  		         *
  		         * @param {string} input The hexadecimally encoded string.
  		         *
  		         * @return {CipherParams} The cipher params object.
  		         *
  		         * @static
  		         *
  		         * @example
  		         *
  		         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
  		         */
  		        parse: function (input) {
  		            var ciphertext = Hex.parse(input);
  		            return CipherParams.create({ ciphertext: ciphertext });
  		        }
  		    };
  		}());


  		return CryptoJS.format.Hex;

  	}));
  	},{"./cipher-core":58,"./core":59}],64:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Base = C_lib.Base;
  		    var C_enc = C.enc;
  		    var Utf8 = C_enc.Utf8;
  		    var C_algo = C.algo;

  		    /**
  		     * HMAC algorithm.
  		     */
  		    var HMAC = C_algo.HMAC = Base.extend({
  		        /**
  		         * Initializes a newly created HMAC.
  		         *
  		         * @param {Hasher} hasher The hash algorithm to use.
  		         * @param {WordArray|string} key The secret key.
  		         *
  		         * @example
  		         *
  		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
  		         */
  		        init: function (hasher, key) {
  		            // Init hasher
  		            hasher = this._hasher = new hasher.init();

  		            // Convert string to WordArray, else assume WordArray already
  		            if (typeof key == 'string') {
  		                key = Utf8.parse(key);
  		            }

  		            // Shortcuts
  		            var hasherBlockSize = hasher.blockSize;
  		            var hasherBlockSizeBytes = hasherBlockSize * 4;

  		            // Allow arbitrary length keys
  		            if (key.sigBytes > hasherBlockSizeBytes) {
  		                key = hasher.finalize(key);
  		            }

  		            // Clamp excess bits
  		            key.clamp();

  		            // Clone key for inner and outer pads
  		            var oKey = this._oKey = key.clone();
  		            var iKey = this._iKey = key.clone();

  		            // Shortcuts
  		            var oKeyWords = oKey.words;
  		            var iKeyWords = iKey.words;

  		            // XOR keys with pad constants
  		            for (var i = 0; i < hasherBlockSize; i++) {
  		                oKeyWords[i] ^= 0x5c5c5c5c;
  		                iKeyWords[i] ^= 0x36363636;
  		            }
  		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

  		            // Set initial values
  		            this.reset();
  		        },

  		        /**
  		         * Resets this HMAC to its initial state.
  		         *
  		         * @example
  		         *
  		         *     hmacHasher.reset();
  		         */
  		        reset: function () {
  		            // Shortcut
  		            var hasher = this._hasher;

  		            // Reset
  		            hasher.reset();
  		            hasher.update(this._iKey);
  		        },

  		        /**
  		         * Updates this HMAC with a message.
  		         *
  		         * @param {WordArray|string} messageUpdate The message to append.
  		         *
  		         * @return {HMAC} This HMAC instance.
  		         *
  		         * @example
  		         *
  		         *     hmacHasher.update('message');
  		         *     hmacHasher.update(wordArray);
  		         */
  		        update: function (messageUpdate) {
  		            this._hasher.update(messageUpdate);

  		            // Chainable
  		            return this;
  		        },

  		        /**
  		         * Finalizes the HMAC computation.
  		         * Note that the finalize operation is effectively a destructive, read-once operation.
  		         *
  		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
  		         *
  		         * @return {WordArray} The HMAC.
  		         *
  		         * @example
  		         *
  		         *     var hmac = hmacHasher.finalize();
  		         *     var hmac = hmacHasher.finalize('message');
  		         *     var hmac = hmacHasher.finalize(wordArray);
  		         */
  		        finalize: function (messageUpdate) {
  		            // Shortcut
  		            var hasher = this._hasher;

  		            // Compute HMAC
  		            var innerHash = hasher.finalize(messageUpdate);
  		            hasher.reset();
  		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

  		            return hmac;
  		        }
  		    });
  		}());


  	}));
  	},{"./core":59}],65:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
  		}
  		else {
  			// Global (browser)
  			root.CryptoJS = factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		return CryptoJS;

  	}));
  	},{"./aes":57,"./cipher-core":58,"./core":59,"./enc-base64":60,"./enc-utf16":61,"./evpkdf":62,"./format-hex":63,"./hmac":64,"./lib-typedarrays":66,"./md5":67,"./mode-cfb":68,"./mode-ctr":70,"./mode-ctr-gladman":69,"./mode-ecb":71,"./mode-ofb":72,"./pad-ansix923":73,"./pad-iso10126":74,"./pad-iso97971":75,"./pad-nopadding":76,"./pad-zeropadding":77,"./pbkdf2":78,"./rabbit":80,"./rabbit-legacy":79,"./rc4":81,"./ripemd160":82,"./sha1":83,"./sha224":84,"./sha256":85,"./sha3":86,"./sha384":87,"./sha512":88,"./tripledes":89,"./x64-core":90}],66:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Check if typed arrays are supported
  		    if (typeof ArrayBuffer != 'function') {
  		        return;
  		    }

  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;

  		    // Reference original init
  		    var superInit = WordArray.init;

  		    // Augment WordArray.init to handle typed arrays
  		    var subInit = WordArray.init = function (typedArray) {
  		        // Convert buffers to uint8
  		        if (typedArray instanceof ArrayBuffer) {
  		            typedArray = new Uint8Array(typedArray);
  		        }

  		        // Convert other array views to uint8
  		        if (
  		            typedArray instanceof Int8Array ||
  		            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
  		            typedArray instanceof Int16Array ||
  		            typedArray instanceof Uint16Array ||
  		            typedArray instanceof Int32Array ||
  		            typedArray instanceof Uint32Array ||
  		            typedArray instanceof Float32Array ||
  		            typedArray instanceof Float64Array
  		        ) {
  		            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
  		        }

  		        // Handle Uint8Array
  		        if (typedArray instanceof Uint8Array) {
  		            // Shortcut
  		            var typedArrayByteLength = typedArray.byteLength;

  		            // Extract bytes
  		            var words = [];
  		            for (var i = 0; i < typedArrayByteLength; i++) {
  		                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
  		            }

  		            // Initialize this word array
  		            superInit.call(this, words, typedArrayByteLength);
  		        } else {
  		            // Else call normal init
  		            superInit.apply(this, arguments);
  		        }
  		    };

  		    subInit.prototype = WordArray;
  		}());


  		return CryptoJS.lib.WordArray;

  	}));
  	},{"./core":59}],67:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function (Math) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var Hasher = C_lib.Hasher;
  		    var C_algo = C.algo;

  		    // Constants table
  		    var T = [];

  		    // Compute constants
  		    (function () {
  		        for (var i = 0; i < 64; i++) {
  		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
  		        }
  		    }());

  		    /**
  		     * MD5 hash algorithm.
  		     */
  		    var MD5 = C_algo.MD5 = Hasher.extend({
  		        _doReset: function () {
  		            this._hash = new WordArray.init([
  		                0x67452301, 0xefcdab89,
  		                0x98badcfe, 0x10325476
  		            ]);
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Swap endian
  		            for (var i = 0; i < 16; i++) {
  		                // Shortcuts
  		                var offset_i = offset + i;
  		                var M_offset_i = M[offset_i];

  		                M[offset_i] = (
  		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
  		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
  		                );
  		            }

  		            // Shortcuts
  		            var H = this._hash.words;

  		            var M_offset_0  = M[offset + 0];
  		            var M_offset_1  = M[offset + 1];
  		            var M_offset_2  = M[offset + 2];
  		            var M_offset_3  = M[offset + 3];
  		            var M_offset_4  = M[offset + 4];
  		            var M_offset_5  = M[offset + 5];
  		            var M_offset_6  = M[offset + 6];
  		            var M_offset_7  = M[offset + 7];
  		            var M_offset_8  = M[offset + 8];
  		            var M_offset_9  = M[offset + 9];
  		            var M_offset_10 = M[offset + 10];
  		            var M_offset_11 = M[offset + 11];
  		            var M_offset_12 = M[offset + 12];
  		            var M_offset_13 = M[offset + 13];
  		            var M_offset_14 = M[offset + 14];
  		            var M_offset_15 = M[offset + 15];

  		            // Working varialbes
  		            var a = H[0];
  		            var b = H[1];
  		            var c = H[2];
  		            var d = H[3];

  		            // Computation
  		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
  		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
  		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
  		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
  		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
  		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
  		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
  		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
  		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
  		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
  		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
  		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
  		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
  		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
  		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
  		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

  		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
  		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
  		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
  		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
  		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
  		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
  		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
  		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
  		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
  		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
  		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
  		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
  		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
  		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
  		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
  		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

  		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
  		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
  		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
  		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
  		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
  		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
  		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
  		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
  		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
  		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
  		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
  		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
  		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
  		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
  		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
  		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

  		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
  		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
  		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
  		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
  		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
  		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
  		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
  		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
  		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
  		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
  		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
  		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
  		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
  		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
  		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
  		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

  		            // Intermediate hash value
  		            H[0] = (H[0] + a) | 0;
  		            H[1] = (H[1] + b) | 0;
  		            H[2] = (H[2] + c) | 0;
  		            H[3] = (H[3] + d) | 0;
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;

  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

  		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
  		            var nBitsTotalL = nBitsTotal;
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
  		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
  		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
  		            );
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
  		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
  		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
  		            );

  		            data.sigBytes = (dataWords.length + 1) * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Shortcuts
  		            var hash = this._hash;
  		            var H = hash.words;

  		            // Swap endian
  		            for (var i = 0; i < 4; i++) {
  		                // Shortcut
  		                var H_i = H[i];

  		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
  		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
  		            }

  		            // Return final computed hash
  		            return hash;
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);
  		            clone._hash = this._hash.clone();

  		            return clone;
  		        }
  		    });

  		    function FF(a, b, c, d, x, s, t) {
  		        var n = a + ((b & c) | (~b & d)) + x + t;
  		        return ((n << s) | (n >>> (32 - s))) + b;
  		    }

  		    function GG(a, b, c, d, x, s, t) {
  		        var n = a + ((b & d) | (c & ~d)) + x + t;
  		        return ((n << s) | (n >>> (32 - s))) + b;
  		    }

  		    function HH(a, b, c, d, x, s, t) {
  		        var n = a + (b ^ c ^ d) + x + t;
  		        return ((n << s) | (n >>> (32 - s))) + b;
  		    }

  		    function II(a, b, c, d, x, s, t) {
  		        var n = a + (c ^ (b | ~d)) + x + t;
  		        return ((n << s) | (n >>> (32 - s))) + b;
  		    }

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.MD5('message');
  		     *     var hash = CryptoJS.MD5(wordArray);
  		     */
  		    C.MD5 = Hasher._createHelper(MD5);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacMD5(message, key);
  		     */
  		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
  		}(Math));


  		return CryptoJS.MD5;

  	}));
  	},{"./core":59}],68:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Cipher Feedback block mode.
  		 */
  		CryptoJS.mode.CFB = (function () {
  		    var CFB = CryptoJS.lib.BlockCipherMode.extend();

  		    CFB.Encryptor = CFB.extend({
  		        processBlock: function (words, offset) {
  		            // Shortcuts
  		            var cipher = this._cipher;
  		            var blockSize = cipher.blockSize;

  		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

  		            // Remember this block to use with next block
  		            this._prevBlock = words.slice(offset, offset + blockSize);
  		        }
  		    });

  		    CFB.Decryptor = CFB.extend({
  		        processBlock: function (words, offset) {
  		            // Shortcuts
  		            var cipher = this._cipher;
  		            var blockSize = cipher.blockSize;

  		            // Remember this block to use with next block
  		            var thisBlock = words.slice(offset, offset + blockSize);

  		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

  		            // This block becomes the previous block
  		            this._prevBlock = thisBlock;
  		        }
  		    });

  		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
  		        // Shortcut
  		        var iv = this._iv;

  		        // Generate keystream
  		        if (iv) {
  		            var keystream = iv.slice(0);

  		            // Remove IV for subsequent blocks
  		            this._iv = undefined;
  		        } else {
  		            var keystream = this._prevBlock;
  		        }
  		        cipher.encryptBlock(keystream, 0);

  		        // Encrypt
  		        for (var i = 0; i < blockSize; i++) {
  		            words[offset + i] ^= keystream[i];
  		        }
  		    }

  		    return CFB;
  		}());


  		return CryptoJS.mode.CFB;

  	}));
  	},{"./cipher-core":58,"./core":59}],69:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/** @preserve
  		 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
  		 * derived from CryptoJS.mode.CTR
  		 * Jan Hruby jhruby.web@gmail.com
  		 */
  		CryptoJS.mode.CTRGladman = (function () {
  		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

  			function incWord(word)
  			{
  				if (((word >> 24) & 0xff) === 0xff) { //overflow
  				var b1 = (word >> 16)&0xff;
  				var b2 = (word >> 8)&0xff;
  				var b3 = word & 0xff;

  				if (b1 === 0xff) // overflow b1
  				{
  				b1 = 0;
  				if (b2 === 0xff)
  				{
  					b2 = 0;
  					if (b3 === 0xff)
  					{
  						b3 = 0;
  					}
  					else
  					{
  						++b3;
  					}
  				}
  				else
  				{
  					++b2;
  				}
  				}
  				else
  				{
  				++b1;
  				}

  				word = 0;
  				word += (b1 << 16);
  				word += (b2 << 8);
  				word += b3;
  				}
  				else
  				{
  				word += (0x01 << 24);
  				}
  				return word;
  			}

  			function incCounter(counter)
  			{
  				if ((counter[0] = incWord(counter[0])) === 0)
  				{
  					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
  					counter[1] = incWord(counter[1]);
  				}
  				return counter;
  			}

  		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
  		        processBlock: function (words, offset) {
  		            // Shortcuts
  		            var cipher = this._cipher;
  		            var blockSize = cipher.blockSize;
  		            var iv = this._iv;
  		            var counter = this._counter;

  		            // Generate keystream
  		            if (iv) {
  		                counter = this._counter = iv.slice(0);

  		                // Remove IV for subsequent blocks
  		                this._iv = undefined;
  		            }

  					incCounter(counter);

  					var keystream = counter.slice(0);
  		            cipher.encryptBlock(keystream, 0);

  		            // Encrypt
  		            for (var i = 0; i < blockSize; i++) {
  		                words[offset + i] ^= keystream[i];
  		            }
  		        }
  		    });

  		    CTRGladman.Decryptor = Encryptor;

  		    return CTRGladman;
  		}());




  		return CryptoJS.mode.CTRGladman;

  	}));
  	},{"./cipher-core":58,"./core":59}],70:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Counter block mode.
  		 */
  		CryptoJS.mode.CTR = (function () {
  		    var CTR = CryptoJS.lib.BlockCipherMode.extend();

  		    var Encryptor = CTR.Encryptor = CTR.extend({
  		        processBlock: function (words, offset) {
  		            // Shortcuts
  		            var cipher = this._cipher;
  		            var blockSize = cipher.blockSize;
  		            var iv = this._iv;
  		            var counter = this._counter;

  		            // Generate keystream
  		            if (iv) {
  		                counter = this._counter = iv.slice(0);

  		                // Remove IV for subsequent blocks
  		                this._iv = undefined;
  		            }
  		            var keystream = counter.slice(0);
  		            cipher.encryptBlock(keystream, 0);

  		            // Increment counter
  		            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;

  		            // Encrypt
  		            for (var i = 0; i < blockSize; i++) {
  		                words[offset + i] ^= keystream[i];
  		            }
  		        }
  		    });

  		    CTR.Decryptor = Encryptor;

  		    return CTR;
  		}());


  		return CryptoJS.mode.CTR;

  	}));
  	},{"./cipher-core":58,"./core":59}],71:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Electronic Codebook block mode.
  		 */
  		CryptoJS.mode.ECB = (function () {
  		    var ECB = CryptoJS.lib.BlockCipherMode.extend();

  		    ECB.Encryptor = ECB.extend({
  		        processBlock: function (words, offset) {
  		            this._cipher.encryptBlock(words, offset);
  		        }
  		    });

  		    ECB.Decryptor = ECB.extend({
  		        processBlock: function (words, offset) {
  		            this._cipher.decryptBlock(words, offset);
  		        }
  		    });

  		    return ECB;
  		}());


  		return CryptoJS.mode.ECB;

  	}));
  	},{"./cipher-core":58,"./core":59}],72:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Output Feedback block mode.
  		 */
  		CryptoJS.mode.OFB = (function () {
  		    var OFB = CryptoJS.lib.BlockCipherMode.extend();

  		    var Encryptor = OFB.Encryptor = OFB.extend({
  		        processBlock: function (words, offset) {
  		            // Shortcuts
  		            var cipher = this._cipher;
  		            var blockSize = cipher.blockSize;
  		            var iv = this._iv;
  		            var keystream = this._keystream;

  		            // Generate keystream
  		            if (iv) {
  		                keystream = this._keystream = iv.slice(0);

  		                // Remove IV for subsequent blocks
  		                this._iv = undefined;
  		            }
  		            cipher.encryptBlock(keystream, 0);

  		            // Encrypt
  		            for (var i = 0; i < blockSize; i++) {
  		                words[offset + i] ^= keystream[i];
  		            }
  		        }
  		    });

  		    OFB.Decryptor = Encryptor;

  		    return OFB;
  		}());


  		return CryptoJS.mode.OFB;

  	}));
  	},{"./cipher-core":58,"./core":59}],73:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * ANSI X.923 padding strategy.
  		 */
  		CryptoJS.pad.AnsiX923 = {
  		    pad: function (data, blockSize) {
  		        // Shortcuts
  		        var dataSigBytes = data.sigBytes;
  		        var blockSizeBytes = blockSize * 4;

  		        // Count padding bytes
  		        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

  		        // Compute last byte position
  		        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

  		        // Pad
  		        data.clamp();
  		        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
  		        data.sigBytes += nPaddingBytes;
  		    },

  		    unpad: function (data) {
  		        // Get number of padding bytes from last byte
  		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

  		        // Remove padding
  		        data.sigBytes -= nPaddingBytes;
  		    }
  		};


  		return CryptoJS.pad.Ansix923;

  	}));
  	},{"./cipher-core":58,"./core":59}],74:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * ISO 10126 padding strategy.
  		 */
  		CryptoJS.pad.Iso10126 = {
  		    pad: function (data, blockSize) {
  		        // Shortcut
  		        var blockSizeBytes = blockSize * 4;

  		        // Count padding bytes
  		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

  		        // Pad
  		        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
  		             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
  		    },

  		    unpad: function (data) {
  		        // Get number of padding bytes from last byte
  		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

  		        // Remove padding
  		        data.sigBytes -= nPaddingBytes;
  		    }
  		};


  		return CryptoJS.pad.Iso10126;

  	}));
  	},{"./cipher-core":58,"./core":59}],75:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * ISO/IEC 9797-1 Padding Method 2.
  		 */
  		CryptoJS.pad.Iso97971 = {
  		    pad: function (data, blockSize) {
  		        // Add 0x80 byte
  		        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

  		        // Zero pad the rest
  		        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
  		    },

  		    unpad: function (data) {
  		        // Remove zero padding
  		        CryptoJS.pad.ZeroPadding.unpad(data);

  		        // Remove one more byte -- the 0x80 byte
  		        data.sigBytes--;
  		    }
  		};


  		return CryptoJS.pad.Iso97971;

  	}));
  	},{"./cipher-core":58,"./core":59}],76:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * A noop padding strategy.
  		 */
  		CryptoJS.pad.NoPadding = {
  		    pad: function () {
  		    },

  		    unpad: function () {
  		    }
  		};


  		return CryptoJS.pad.NoPadding;

  	}));
  	},{"./cipher-core":58,"./core":59}],77:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/**
  		 * Zero padding strategy.
  		 */
  		CryptoJS.pad.ZeroPadding = {
  		    pad: function (data, blockSize) {
  		        // Shortcut
  		        var blockSizeBytes = blockSize * 4;

  		        // Pad
  		        data.clamp();
  		        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
  		    },

  		    unpad: function (data) {
  		        // Shortcut
  		        var dataWords = data.words;

  		        // Unpad
  		        var i = data.sigBytes - 1;
  		        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
  		            i--;
  		        }
  		        data.sigBytes = i + 1;
  		    }
  		};


  		return CryptoJS.pad.ZeroPadding;

  	}));
  	},{"./cipher-core":58,"./core":59}],78:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Base = C_lib.Base;
  		    var WordArray = C_lib.WordArray;
  		    var C_algo = C.algo;
  		    var SHA1 = C_algo.SHA1;
  		    var HMAC = C_algo.HMAC;

  		    /**
  		     * Password-Based Key Derivation Function 2 algorithm.
  		     */
  		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
  		         * @property {Hasher} hasher The hasher to use. Default: SHA1
  		         * @property {number} iterations The number of iterations to perform. Default: 1
  		         */
  		        cfg: Base.extend({
  		            keySize: 128/32,
  		            hasher: SHA1,
  		            iterations: 1
  		        }),

  		        /**
  		         * Initializes a newly created key derivation function.
  		         *
  		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
  		         *
  		         * @example
  		         *
  		         *     var kdf = CryptoJS.algo.PBKDF2.create();
  		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
  		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
  		         */
  		        init: function (cfg) {
  		            this.cfg = this.cfg.extend(cfg);
  		        },

  		        /**
  		         * Computes the Password-Based Key Derivation Function 2.
  		         *
  		         * @param {WordArray|string} password The password.
  		         * @param {WordArray|string} salt A salt.
  		         *
  		         * @return {WordArray} The derived key.
  		         *
  		         * @example
  		         *
  		         *     var key = kdf.compute(password, salt);
  		         */
  		        compute: function (password, salt) {
  		            // Shortcut
  		            var cfg = this.cfg;

  		            // Init HMAC
  		            var hmac = HMAC.create(cfg.hasher, password);

  		            // Initial values
  		            var derivedKey = WordArray.create();
  		            var blockIndex = WordArray.create([0x00000001]);

  		            // Shortcuts
  		            var derivedKeyWords = derivedKey.words;
  		            var blockIndexWords = blockIndex.words;
  		            var keySize = cfg.keySize;
  		            var iterations = cfg.iterations;

  		            // Generate key
  		            while (derivedKeyWords.length < keySize) {
  		                var block = hmac.update(salt).finalize(blockIndex);
  		                hmac.reset();

  		                // Shortcuts
  		                var blockWords = block.words;
  		                var blockWordsLength = blockWords.length;

  		                // Iterations
  		                var intermediate = block;
  		                for (var i = 1; i < iterations; i++) {
  		                    intermediate = hmac.finalize(intermediate);
  		                    hmac.reset();

  		                    // Shortcut
  		                    var intermediateWords = intermediate.words;

  		                    // XOR intermediate with block
  		                    for (var j = 0; j < blockWordsLength; j++) {
  		                        blockWords[j] ^= intermediateWords[j];
  		                    }
  		                }

  		                derivedKey.concat(block);
  		                blockIndexWords[0]++;
  		            }
  		            derivedKey.sigBytes = keySize * 4;

  		            return derivedKey;
  		        }
  		    });

  		    /**
  		     * Computes the Password-Based Key Derivation Function 2.
  		     *
  		     * @param {WordArray|string} password The password.
  		     * @param {WordArray|string} salt A salt.
  		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
  		     *
  		     * @return {WordArray} The derived key.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var key = CryptoJS.PBKDF2(password, salt);
  		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
  		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
  		     */
  		    C.PBKDF2 = function (password, salt, cfg) {
  		        return PBKDF2.create(cfg).compute(password, salt);
  		    };
  		}());


  		return CryptoJS.PBKDF2;

  	}));
  	},{"./core":59,"./hmac":64,"./sha1":83}],79:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var StreamCipher = C_lib.StreamCipher;
  		    var C_algo = C.algo;

  		    // Reusable objects
  		    var S  = [];
  		    var C_ = [];
  		    var G  = [];

  		    /**
  		     * Rabbit stream cipher algorithm.
  		     *
  		     * This is a legacy version that neglected to convert the key to little-endian.
  		     * This error doesn't affect the cipher's security,
  		     * but it does affect its compatibility with other implementations.
  		     */
  		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
  		        _doReset: function () {
  		            // Shortcuts
  		            var K = this._key.words;
  		            var iv = this.cfg.iv;

  		            // Generate initial state values
  		            var X = this._X = [
  		                K[0], (K[3] << 16) | (K[2] >>> 16),
  		                K[1], (K[0] << 16) | (K[3] >>> 16),
  		                K[2], (K[1] << 16) | (K[0] >>> 16),
  		                K[3], (K[2] << 16) | (K[1] >>> 16)
  		            ];

  		            // Generate initial counter values
  		            var C = this._C = [
  		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
  		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
  		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
  		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
  		            ];

  		            // Carry bit
  		            this._b = 0;

  		            // Iterate the system four times
  		            for (var i = 0; i < 4; i++) {
  		                nextState.call(this);
  		            }

  		            // Modify the counters
  		            for (var i = 0; i < 8; i++) {
  		                C[i] ^= X[(i + 4) & 7];
  		            }

  		            // IV setup
  		            if (iv) {
  		                // Shortcuts
  		                var IV = iv.words;
  		                var IV_0 = IV[0];
  		                var IV_1 = IV[1];

  		                // Generate four subvectors
  		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
  		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
  		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
  		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

  		                // Modify counter values
  		                C[0] ^= i0;
  		                C[1] ^= i1;
  		                C[2] ^= i2;
  		                C[3] ^= i3;
  		                C[4] ^= i0;
  		                C[5] ^= i1;
  		                C[6] ^= i2;
  		                C[7] ^= i3;

  		                // Iterate the system four times
  		                for (var i = 0; i < 4; i++) {
  		                    nextState.call(this);
  		                }
  		            }
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcut
  		            var X = this._X;

  		            // Iterate the system
  		            nextState.call(this);

  		            // Generate four keystream words
  		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
  		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
  		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
  		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

  		            for (var i = 0; i < 4; i++) {
  		                // Swap endian
  		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
  		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

  		                // Encrypt
  		                M[offset + i] ^= S[i];
  		            }
  		        },

  		        blockSize: 128/32,

  		        ivSize: 64/32
  		    });

  		    function nextState() {
  		        // Shortcuts
  		        var X = this._X;
  		        var C = this._C;

  		        // Save old counter values
  		        for (var i = 0; i < 8; i++) {
  		            C_[i] = C[i];
  		        }

  		        // Calculate new counter values
  		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
  		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
  		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
  		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
  		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
  		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
  		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
  		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
  		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

  		        // Calculate the g-values
  		        for (var i = 0; i < 8; i++) {
  		            var gx = X[i] + C[i];

  		            // Construct high and low argument for squaring
  		            var ga = gx & 0xffff;
  		            var gb = gx >>> 16;

  		            // Calculate high and low result of squaring
  		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
  		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

  		            // High XOR low
  		            G[i] = gh ^ gl;
  		        }

  		        // Calculate new state values
  		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
  		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
  		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
  		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
  		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
  		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
  		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
  		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
  		    }

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
  		     */
  		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
  		}());


  		return CryptoJS.RabbitLegacy;

  	}));
  	},{"./cipher-core":58,"./core":59,"./enc-base64":60,"./evpkdf":62,"./md5":67}],80:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var StreamCipher = C_lib.StreamCipher;
  		    var C_algo = C.algo;

  		    // Reusable objects
  		    var S  = [];
  		    var C_ = [];
  		    var G  = [];

  		    /**
  		     * Rabbit stream cipher algorithm
  		     */
  		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
  		        _doReset: function () {
  		            // Shortcuts
  		            var K = this._key.words;
  		            var iv = this.cfg.iv;

  		            // Swap endian
  		            for (var i = 0; i < 4; i++) {
  		                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
  		                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
  		            }

  		            // Generate initial state values
  		            var X = this._X = [
  		                K[0], (K[3] << 16) | (K[2] >>> 16),
  		                K[1], (K[0] << 16) | (K[3] >>> 16),
  		                K[2], (K[1] << 16) | (K[0] >>> 16),
  		                K[3], (K[2] << 16) | (K[1] >>> 16)
  		            ];

  		            // Generate initial counter values
  		            var C = this._C = [
  		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
  		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
  		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
  		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
  		            ];

  		            // Carry bit
  		            this._b = 0;

  		            // Iterate the system four times
  		            for (var i = 0; i < 4; i++) {
  		                nextState.call(this);
  		            }

  		            // Modify the counters
  		            for (var i = 0; i < 8; i++) {
  		                C[i] ^= X[(i + 4) & 7];
  		            }

  		            // IV setup
  		            if (iv) {
  		                // Shortcuts
  		                var IV = iv.words;
  		                var IV_0 = IV[0];
  		                var IV_1 = IV[1];

  		                // Generate four subvectors
  		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
  		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
  		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
  		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

  		                // Modify counter values
  		                C[0] ^= i0;
  		                C[1] ^= i1;
  		                C[2] ^= i2;
  		                C[3] ^= i3;
  		                C[4] ^= i0;
  		                C[5] ^= i1;
  		                C[6] ^= i2;
  		                C[7] ^= i3;

  		                // Iterate the system four times
  		                for (var i = 0; i < 4; i++) {
  		                    nextState.call(this);
  		                }
  		            }
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcut
  		            var X = this._X;

  		            // Iterate the system
  		            nextState.call(this);

  		            // Generate four keystream words
  		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
  		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
  		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
  		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

  		            for (var i = 0; i < 4; i++) {
  		                // Swap endian
  		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
  		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

  		                // Encrypt
  		                M[offset + i] ^= S[i];
  		            }
  		        },

  		        blockSize: 128/32,

  		        ivSize: 64/32
  		    });

  		    function nextState() {
  		        // Shortcuts
  		        var X = this._X;
  		        var C = this._C;

  		        // Save old counter values
  		        for (var i = 0; i < 8; i++) {
  		            C_[i] = C[i];
  		        }

  		        // Calculate new counter values
  		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
  		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
  		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
  		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
  		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
  		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
  		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
  		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
  		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

  		        // Calculate the g-values
  		        for (var i = 0; i < 8; i++) {
  		            var gx = X[i] + C[i];

  		            // Construct high and low argument for squaring
  		            var ga = gx & 0xffff;
  		            var gb = gx >>> 16;

  		            // Calculate high and low result of squaring
  		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
  		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

  		            // High XOR low
  		            G[i] = gh ^ gl;
  		        }

  		        // Calculate new state values
  		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
  		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
  		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
  		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
  		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
  		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
  		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
  		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
  		    }

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
  		     */
  		    C.Rabbit = StreamCipher._createHelper(Rabbit);
  		}());


  		return CryptoJS.Rabbit;

  	}));
  	},{"./cipher-core":58,"./core":59,"./enc-base64":60,"./evpkdf":62,"./md5":67}],81:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var StreamCipher = C_lib.StreamCipher;
  		    var C_algo = C.algo;

  		    /**
  		     * RC4 stream cipher algorithm.
  		     */
  		    var RC4 = C_algo.RC4 = StreamCipher.extend({
  		        _doReset: function () {
  		            // Shortcuts
  		            var key = this._key;
  		            var keyWords = key.words;
  		            var keySigBytes = key.sigBytes;

  		            // Init sbox
  		            var S = this._S = [];
  		            for (var i = 0; i < 256; i++) {
  		                S[i] = i;
  		            }

  		            // Key setup
  		            for (var i = 0, j = 0; i < 256; i++) {
  		                var keyByteIndex = i % keySigBytes;
  		                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

  		                j = (j + S[i] + keyByte) % 256;

  		                // Swap
  		                var t = S[i];
  		                S[i] = S[j];
  		                S[j] = t;
  		            }

  		            // Counters
  		            this._i = this._j = 0;
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            M[offset] ^= generateKeystreamWord.call(this);
  		        },

  		        keySize: 256/32,

  		        ivSize: 0
  		    });

  		    function generateKeystreamWord() {
  		        // Shortcuts
  		        var S = this._S;
  		        var i = this._i;
  		        var j = this._j;

  		        // Generate keystream word
  		        var keystreamWord = 0;
  		        for (var n = 0; n < 4; n++) {
  		            i = (i + 1) % 256;
  		            j = (j + S[i]) % 256;

  		            // Swap
  		            var t = S[i];
  		            S[i] = S[j];
  		            S[j] = t;

  		            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
  		        }

  		        // Update counters
  		        this._i = i;
  		        this._j = j;

  		        return keystreamWord;
  		    }

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
  		     */
  		    C.RC4 = StreamCipher._createHelper(RC4);

  		    /**
  		     * Modified RC4 stream cipher algorithm.
  		     */
  		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {number} drop The number of keystream words to drop. Default 192
  		         */
  		        cfg: RC4.cfg.extend({
  		            drop: 192
  		        }),

  		        _doReset: function () {
  		            RC4._doReset.call(this);

  		            // Drop
  		            for (var i = this.cfg.drop; i > 0; i--) {
  		                generateKeystreamWord.call(this);
  		            }
  		        }
  		    });

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
  		     */
  		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
  		}());


  		return CryptoJS.RC4;

  	}));
  	},{"./cipher-core":58,"./core":59,"./enc-base64":60,"./evpkdf":62,"./md5":67}],82:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		/** @preserve
  		(c) 2012 by Cédric Mesnil. All rights reserved.

  		Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  		    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  		    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  		*/

  		(function (Math) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var Hasher = C_lib.Hasher;
  		    var C_algo = C.algo;

  		    // Constants table
  		    var _zl = WordArray.create([
  		        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
  		        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
  		        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
  		        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
  		        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
  		    var _zr = WordArray.create([
  		        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
  		        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
  		        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
  		        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
  		        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
  		    var _sl = WordArray.create([
  		         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
  		        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
  		        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
  		          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
  		        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
  		    var _sr = WordArray.create([
  		        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
  		        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
  		        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
  		        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
  		        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

  		    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
  		    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

  		    /**
  		     * RIPEMD160 hash algorithm.
  		     */
  		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
  		        _doReset: function () {
  		            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
  		        },

  		        _doProcessBlock: function (M, offset) {

  		            // Swap endian
  		            for (var i = 0; i < 16; i++) {
  		                // Shortcuts
  		                var offset_i = offset + i;
  		                var M_offset_i = M[offset_i];

  		                // Swap
  		                M[offset_i] = (
  		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
  		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
  		                );
  		            }
  		            // Shortcut
  		            var H  = this._hash.words;
  		            var hl = _hl.words;
  		            var hr = _hr.words;
  		            var zl = _zl.words;
  		            var zr = _zr.words;
  		            var sl = _sl.words;
  		            var sr = _sr.words;

  		            // Working variables
  		            var al, bl, cl, dl, el;
  		            var ar, br, cr, dr, er;

  		            ar = al = H[0];
  		            br = bl = H[1];
  		            cr = cl = H[2];
  		            dr = dl = H[3];
  		            er = el = H[4];
  		            // Computation
  		            var t;
  		            for (var i = 0; i < 80; i += 1) {
  		                t = (al +  M[offset+zl[i]])|0;
  		                if (i<16){
  			            t +=  f1(bl,cl,dl) + hl[0];
  		                } else if (i<32) {
  			            t +=  f2(bl,cl,dl) + hl[1];
  		                } else if (i<48) {
  			            t +=  f3(bl,cl,dl) + hl[2];
  		                } else if (i<64) {
  			            t +=  f4(bl,cl,dl) + hl[3];
  		                } else {// if (i<80) {
  			            t +=  f5(bl,cl,dl) + hl[4];
  		                }
  		                t = t|0;
  		                t =  rotl(t,sl[i]);
  		                t = (t+el)|0;
  		                al = el;
  		                el = dl;
  		                dl = rotl(cl, 10);
  		                cl = bl;
  		                bl = t;

  		                t = (ar + M[offset+zr[i]])|0;
  		                if (i<16){
  			            t +=  f5(br,cr,dr) + hr[0];
  		                } else if (i<32) {
  			            t +=  f4(br,cr,dr) + hr[1];
  		                } else if (i<48) {
  			            t +=  f3(br,cr,dr) + hr[2];
  		                } else if (i<64) {
  			            t +=  f2(br,cr,dr) + hr[3];
  		                } else {// if (i<80) {
  			            t +=  f1(br,cr,dr) + hr[4];
  		                }
  		                t = t|0;
  		                t =  rotl(t,sr[i]) ;
  		                t = (t+er)|0;
  		                ar = er;
  		                er = dr;
  		                dr = rotl(cr, 10);
  		                cr = br;
  		                br = t;
  		            }
  		            // Intermediate hash value
  		            t    = (H[1] + cl + dr)|0;
  		            H[1] = (H[2] + dl + er)|0;
  		            H[2] = (H[3] + el + ar)|0;
  		            H[3] = (H[4] + al + br)|0;
  		            H[4] = (H[0] + bl + cr)|0;
  		            H[0] =  t;
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;

  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
  		                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
  		                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
  		            );
  		            data.sigBytes = (dataWords.length + 1) * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Shortcuts
  		            var hash = this._hash;
  		            var H = hash.words;

  		            // Swap endian
  		            for (var i = 0; i < 5; i++) {
  		                // Shortcut
  		                var H_i = H[i];

  		                // Swap
  		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
  		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
  		            }

  		            // Return final computed hash
  		            return hash;
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);
  		            clone._hash = this._hash.clone();

  		            return clone;
  		        }
  		    });


  		    function f1(x, y, z) {
  		        return ((x) ^ (y) ^ (z));

  		    }

  		    function f2(x, y, z) {
  		        return (((x)&(y)) | ((~x)&(z)));
  		    }

  		    function f3(x, y, z) {
  		        return (((x) | (~(y))) ^ (z));
  		    }

  		    function f4(x, y, z) {
  		        return (((x) & (z)) | ((y)&(~(z))));
  		    }

  		    function f5(x, y, z) {
  		        return ((x) ^ ((y) |(~(z))));

  		    }

  		    function rotl(x,n) {
  		        return (x<<n) | (x>>>(32-n));
  		    }


  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.RIPEMD160('message');
  		     *     var hash = CryptoJS.RIPEMD160(wordArray);
  		     */
  		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
  		     */
  		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
  		}());


  		return CryptoJS.RIPEMD160;

  	}));
  	},{"./core":59}],83:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var Hasher = C_lib.Hasher;
  		    var C_algo = C.algo;

  		    // Reusable object
  		    var W = [];

  		    /**
  		     * SHA-1 hash algorithm.
  		     */
  		    var SHA1 = C_algo.SHA1 = Hasher.extend({
  		        _doReset: function () {
  		            this._hash = new WordArray.init([
  		                0x67452301, 0xefcdab89,
  		                0x98badcfe, 0x10325476,
  		                0xc3d2e1f0
  		            ]);
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcut
  		            var H = this._hash.words;

  		            // Working variables
  		            var a = H[0];
  		            var b = H[1];
  		            var c = H[2];
  		            var d = H[3];
  		            var e = H[4];

  		            // Computation
  		            for (var i = 0; i < 80; i++) {
  		                if (i < 16) {
  		                    W[i] = M[offset + i] | 0;
  		                } else {
  		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  		                    W[i] = (n << 1) | (n >>> 31);
  		                }

  		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
  		                if (i < 20) {
  		                    t += ((b & c) | (~b & d)) + 0x5a827999;
  		                } else if (i < 40) {
  		                    t += (b ^ c ^ d) + 0x6ed9eba1;
  		                } else if (i < 60) {
  		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
  		                } else /* if (i < 80) */ {
  		                    t += (b ^ c ^ d) - 0x359d3e2a;
  		                }

  		                e = d;
  		                d = c;
  		                c = (b << 30) | (b >>> 2);
  		                b = a;
  		                a = t;
  		            }

  		            // Intermediate hash value
  		            H[0] = (H[0] + a) | 0;
  		            H[1] = (H[1] + b) | 0;
  		            H[2] = (H[2] + c) | 0;
  		            H[3] = (H[3] + d) | 0;
  		            H[4] = (H[4] + e) | 0;
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;

  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
  		            data.sigBytes = dataWords.length * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Return final computed hash
  		            return this._hash;
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);
  		            clone._hash = this._hash.clone();

  		            return clone;
  		        }
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA1('message');
  		     *     var hash = CryptoJS.SHA1(wordArray);
  		     */
  		    C.SHA1 = Hasher._createHelper(SHA1);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA1(message, key);
  		     */
  		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
  		}());


  		return CryptoJS.SHA1;

  	}));
  	},{"./core":59}],84:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./sha256"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var C_algo = C.algo;
  		    var SHA256 = C_algo.SHA256;

  		    /**
  		     * SHA-224 hash algorithm.
  		     */
  		    var SHA224 = C_algo.SHA224 = SHA256.extend({
  		        _doReset: function () {
  		            this._hash = new WordArray.init([
  		                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
  		                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
  		            ]);
  		        },

  		        _doFinalize: function () {
  		            var hash = SHA256._doFinalize.call(this);

  		            hash.sigBytes -= 4;

  		            return hash;
  		        }
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA224('message');
  		     *     var hash = CryptoJS.SHA224(wordArray);
  		     */
  		    C.SHA224 = SHA256._createHelper(SHA224);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA224(message, key);
  		     */
  		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
  		}());


  		return CryptoJS.SHA224;

  	}));
  	},{"./core":59,"./sha256":85}],85:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function (Math) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var Hasher = C_lib.Hasher;
  		    var C_algo = C.algo;

  		    // Initialization and round constants tables
  		    var H = [];
  		    var K = [];

  		    // Compute constants
  		    (function () {
  		        function isPrime(n) {
  		            var sqrtN = Math.sqrt(n);
  		            for (var factor = 2; factor <= sqrtN; factor++) {
  		                if (!(n % factor)) {
  		                    return false;
  		                }
  		            }

  		            return true;
  		        }

  		        function getFractionalBits(n) {
  		            return ((n - (n | 0)) * 0x100000000) | 0;
  		        }

  		        var n = 2;
  		        var nPrime = 0;
  		        while (nPrime < 64) {
  		            if (isPrime(n)) {
  		                if (nPrime < 8) {
  		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
  		                }
  		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

  		                nPrime++;
  		            }

  		            n++;
  		        }
  		    }());

  		    // Reusable object
  		    var W = [];

  		    /**
  		     * SHA-256 hash algorithm.
  		     */
  		    var SHA256 = C_algo.SHA256 = Hasher.extend({
  		        _doReset: function () {
  		            this._hash = new WordArray.init(H.slice(0));
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcut
  		            var H = this._hash.words;

  		            // Working variables
  		            var a = H[0];
  		            var b = H[1];
  		            var c = H[2];
  		            var d = H[3];
  		            var e = H[4];
  		            var f = H[5];
  		            var g = H[6];
  		            var h = H[7];

  		            // Computation
  		            for (var i = 0; i < 64; i++) {
  		                if (i < 16) {
  		                    W[i] = M[offset + i] | 0;
  		                } else {
  		                    var gamma0x = W[i - 15];
  		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
  		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
  		                                   (gamma0x >>> 3);

  		                    var gamma1x = W[i - 2];
  		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
  		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
  		                                   (gamma1x >>> 10);

  		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
  		                }

  		                var ch  = (e & f) ^ (~e & g);
  		                var maj = (a & b) ^ (a & c) ^ (b & c);

  		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
  		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

  		                var t1 = h + sigma1 + ch + K[i] + W[i];
  		                var t2 = sigma0 + maj;

  		                h = g;
  		                g = f;
  		                f = e;
  		                e = (d + t1) | 0;
  		                d = c;
  		                c = b;
  		                b = a;
  		                a = (t1 + t2) | 0;
  		            }

  		            // Intermediate hash value
  		            H[0] = (H[0] + a) | 0;
  		            H[1] = (H[1] + b) | 0;
  		            H[2] = (H[2] + c) | 0;
  		            H[3] = (H[3] + d) | 0;
  		            H[4] = (H[4] + e) | 0;
  		            H[5] = (H[5] + f) | 0;
  		            H[6] = (H[6] + g) | 0;
  		            H[7] = (H[7] + h) | 0;
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;

  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
  		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
  		            data.sigBytes = dataWords.length * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Return final computed hash
  		            return this._hash;
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);
  		            clone._hash = this._hash.clone();

  		            return clone;
  		        }
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA256('message');
  		     *     var hash = CryptoJS.SHA256(wordArray);
  		     */
  		    C.SHA256 = Hasher._createHelper(SHA256);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA256(message, key);
  		     */
  		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
  		}(Math));


  		return CryptoJS.SHA256;

  	}));
  	},{"./core":59}],86:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./x64-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function (Math) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var Hasher = C_lib.Hasher;
  		    var C_x64 = C.x64;
  		    var X64Word = C_x64.Word;
  		    var C_algo = C.algo;

  		    // Constants tables
  		    var RHO_OFFSETS = [];
  		    var PI_INDEXES  = [];
  		    var ROUND_CONSTANTS = [];

  		    // Compute Constants
  		    (function () {
  		        // Compute rho offset constants
  		        var x = 1, y = 0;
  		        for (var t = 0; t < 24; t++) {
  		            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

  		            var newX = y % 5;
  		            var newY = (2 * x + 3 * y) % 5;
  		            x = newX;
  		            y = newY;
  		        }

  		        // Compute pi index constants
  		        for (var x = 0; x < 5; x++) {
  		            for (var y = 0; y < 5; y++) {
  		                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
  		            }
  		        }

  		        // Compute round constants
  		        var LFSR = 0x01;
  		        for (var i = 0; i < 24; i++) {
  		            var roundConstantMsw = 0;
  		            var roundConstantLsw = 0;

  		            for (var j = 0; j < 7; j++) {
  		                if (LFSR & 0x01) {
  		                    var bitPosition = (1 << j) - 1;
  		                    if (bitPosition < 32) {
  		                        roundConstantLsw ^= 1 << bitPosition;
  		                    } else /* if (bitPosition >= 32) */ {
  		                        roundConstantMsw ^= 1 << (bitPosition - 32);
  		                    }
  		                }

  		                // Compute next LFSR
  		                if (LFSR & 0x80) {
  		                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
  		                    LFSR = (LFSR << 1) ^ 0x71;
  		                } else {
  		                    LFSR <<= 1;
  		                }
  		            }

  		            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
  		        }
  		    }());

  		    // Reusable objects for temporary values
  		    var T = [];
  		    (function () {
  		        for (var i = 0; i < 25; i++) {
  		            T[i] = X64Word.create();
  		        }
  		    }());

  		    /**
  		     * SHA-3 hash algorithm.
  		     */
  		    var SHA3 = C_algo.SHA3 = Hasher.extend({
  		        /**
  		         * Configuration options.
  		         *
  		         * @property {number} outputLength
  		         *   The desired number of bits in the output hash.
  		         *   Only values permitted are: 224, 256, 384, 512.
  		         *   Default: 512
  		         */
  		        cfg: Hasher.cfg.extend({
  		            outputLength: 512
  		        }),

  		        _doReset: function () {
  		            var state = this._state = [];
  		            for (var i = 0; i < 25; i++) {
  		                state[i] = new X64Word.init();
  		            }

  		            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcuts
  		            var state = this._state;
  		            var nBlockSizeLanes = this.blockSize / 2;

  		            // Absorb
  		            for (var i = 0; i < nBlockSizeLanes; i++) {
  		                // Shortcuts
  		                var M2i  = M[offset + 2 * i];
  		                var M2i1 = M[offset + 2 * i + 1];

  		                // Swap endian
  		                M2i = (
  		                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
  		                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
  		                );
  		                M2i1 = (
  		                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
  		                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
  		                );

  		                // Absorb message into state
  		                var lane = state[i];
  		                lane.high ^= M2i1;
  		                lane.low  ^= M2i;
  		            }

  		            // Rounds
  		            for (var round = 0; round < 24; round++) {
  		                // Theta
  		                for (var x = 0; x < 5; x++) {
  		                    // Mix column lanes
  		                    var tMsw = 0, tLsw = 0;
  		                    for (var y = 0; y < 5; y++) {
  		                        var lane = state[x + 5 * y];
  		                        tMsw ^= lane.high;
  		                        tLsw ^= lane.low;
  		                    }

  		                    // Temporary values
  		                    var Tx = T[x];
  		                    Tx.high = tMsw;
  		                    Tx.low  = tLsw;
  		                }
  		                for (var x = 0; x < 5; x++) {
  		                    // Shortcuts
  		                    var Tx4 = T[(x + 4) % 5];
  		                    var Tx1 = T[(x + 1) % 5];
  		                    var Tx1Msw = Tx1.high;
  		                    var Tx1Lsw = Tx1.low;

  		                    // Mix surrounding columns
  		                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
  		                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
  		                    for (var y = 0; y < 5; y++) {
  		                        var lane = state[x + 5 * y];
  		                        lane.high ^= tMsw;
  		                        lane.low  ^= tLsw;
  		                    }
  		                }

  		                // Rho Pi
  		                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
  		                    // Shortcuts
  		                    var lane = state[laneIndex];
  		                    var laneMsw = lane.high;
  		                    var laneLsw = lane.low;
  		                    var rhoOffset = RHO_OFFSETS[laneIndex];

  		                    // Rotate lanes
  		                    if (rhoOffset < 32) {
  		                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
  		                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
  		                    } else /* if (rhoOffset >= 32) */ {
  		                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
  		                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
  		                    }

  		                    // Transpose lanes
  		                    var TPiLane = T[PI_INDEXES[laneIndex]];
  		                    TPiLane.high = tMsw;
  		                    TPiLane.low  = tLsw;
  		                }

  		                // Rho pi at x = y = 0
  		                var T0 = T[0];
  		                var state0 = state[0];
  		                T0.high = state0.high;
  		                T0.low  = state0.low;

  		                // Chi
  		                for (var x = 0; x < 5; x++) {
  		                    for (var y = 0; y < 5; y++) {
  		                        // Shortcuts
  		                        var laneIndex = x + 5 * y;
  		                        var lane = state[laneIndex];
  		                        var TLane = T[laneIndex];
  		                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
  		                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

  		                        // Mix rows
  		                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
  		                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
  		                    }
  		                }

  		                // Iota
  		                var lane = state[0];
  		                var roundConstant = ROUND_CONSTANTS[round];
  		                lane.high ^= roundConstant.high;
  		                lane.low  ^= roundConstant.low;	            }
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;
  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;
  		            var blockSizeBits = this.blockSize * 32;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
  		            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
  		            data.sigBytes = dataWords.length * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Shortcuts
  		            var state = this._state;
  		            var outputLengthBytes = this.cfg.outputLength / 8;
  		            var outputLengthLanes = outputLengthBytes / 8;

  		            // Squeeze
  		            var hashWords = [];
  		            for (var i = 0; i < outputLengthLanes; i++) {
  		                // Shortcuts
  		                var lane = state[i];
  		                var laneMsw = lane.high;
  		                var laneLsw = lane.low;

  		                // Swap endian
  		                laneMsw = (
  		                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
  		                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
  		                );
  		                laneLsw = (
  		                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
  		                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
  		                );

  		                // Squeeze state to retrieve hash
  		                hashWords.push(laneLsw);
  		                hashWords.push(laneMsw);
  		            }

  		            // Return final computed hash
  		            return new WordArray.init(hashWords, outputLengthBytes);
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);

  		            var state = clone._state = this._state.slice(0);
  		            for (var i = 0; i < 25; i++) {
  		                state[i] = state[i].clone();
  		            }

  		            return clone;
  		        }
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA3('message');
  		     *     var hash = CryptoJS.SHA3(wordArray);
  		     */
  		    C.SHA3 = Hasher._createHelper(SHA3);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA3(message, key);
  		     */
  		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
  		}(Math));


  		return CryptoJS.SHA3;

  	}));
  	},{"./core":59,"./x64-core":90}],87:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_x64 = C.x64;
  		    var X64Word = C_x64.Word;
  		    var X64WordArray = C_x64.WordArray;
  		    var C_algo = C.algo;
  		    var SHA512 = C_algo.SHA512;

  		    /**
  		     * SHA-384 hash algorithm.
  		     */
  		    var SHA384 = C_algo.SHA384 = SHA512.extend({
  		        _doReset: function () {
  		            this._hash = new X64WordArray.init([
  		                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
  		                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
  		                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
  		                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
  		            ]);
  		        },

  		        _doFinalize: function () {
  		            var hash = SHA512._doFinalize.call(this);

  		            hash.sigBytes -= 16;

  		            return hash;
  		        }
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA384('message');
  		     *     var hash = CryptoJS.SHA384(wordArray);
  		     */
  		    C.SHA384 = SHA512._createHelper(SHA384);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA384(message, key);
  		     */
  		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
  		}());


  		return CryptoJS.SHA384;

  	}));
  	},{"./core":59,"./sha512":88,"./x64-core":90}],88:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./x64-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Hasher = C_lib.Hasher;
  		    var C_x64 = C.x64;
  		    var X64Word = C_x64.Word;
  		    var X64WordArray = C_x64.WordArray;
  		    var C_algo = C.algo;

  		    function X64Word_create() {
  		        return X64Word.create.apply(X64Word, arguments);
  		    }

  		    // Constants
  		    var K = [
  		        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
  		        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
  		        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
  		        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
  		        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
  		        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
  		        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
  		        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
  		        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
  		        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
  		        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
  		        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
  		        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
  		        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
  		        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
  		        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
  		        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
  		        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
  		        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
  		        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
  		        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
  		        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
  		        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
  		        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
  		        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
  		        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
  		        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
  		        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
  		        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
  		        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
  		        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
  		        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
  		        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
  		        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
  		        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
  		        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
  		        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
  		        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
  		        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
  		        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
  		    ];

  		    // Reusable objects
  		    var W = [];
  		    (function () {
  		        for (var i = 0; i < 80; i++) {
  		            W[i] = X64Word_create();
  		        }
  		    }());

  		    /**
  		     * SHA-512 hash algorithm.
  		     */
  		    var SHA512 = C_algo.SHA512 = Hasher.extend({
  		        _doReset: function () {
  		            this._hash = new X64WordArray.init([
  		                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
  		                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
  		                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
  		                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
  		            ]);
  		        },

  		        _doProcessBlock: function (M, offset) {
  		            // Shortcuts
  		            var H = this._hash.words;

  		            var H0 = H[0];
  		            var H1 = H[1];
  		            var H2 = H[2];
  		            var H3 = H[3];
  		            var H4 = H[4];
  		            var H5 = H[5];
  		            var H6 = H[6];
  		            var H7 = H[7];

  		            var H0h = H0.high;
  		            var H0l = H0.low;
  		            var H1h = H1.high;
  		            var H1l = H1.low;
  		            var H2h = H2.high;
  		            var H2l = H2.low;
  		            var H3h = H3.high;
  		            var H3l = H3.low;
  		            var H4h = H4.high;
  		            var H4l = H4.low;
  		            var H5h = H5.high;
  		            var H5l = H5.low;
  		            var H6h = H6.high;
  		            var H6l = H6.low;
  		            var H7h = H7.high;
  		            var H7l = H7.low;

  		            // Working variables
  		            var ah = H0h;
  		            var al = H0l;
  		            var bh = H1h;
  		            var bl = H1l;
  		            var ch = H2h;
  		            var cl = H2l;
  		            var dh = H3h;
  		            var dl = H3l;
  		            var eh = H4h;
  		            var el = H4l;
  		            var fh = H5h;
  		            var fl = H5l;
  		            var gh = H6h;
  		            var gl = H6l;
  		            var hh = H7h;
  		            var hl = H7l;

  		            // Rounds
  		            for (var i = 0; i < 80; i++) {
  		                // Shortcut
  		                var Wi = W[i];

  		                // Extend message
  		                if (i < 16) {
  		                    var Wih = Wi.high = M[offset + i * 2]     | 0;
  		                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
  		                } else {
  		                    // Gamma0
  		                    var gamma0x  = W[i - 15];
  		                    var gamma0xh = gamma0x.high;
  		                    var gamma0xl = gamma0x.low;
  		                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
  		                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

  		                    // Gamma1
  		                    var gamma1x  = W[i - 2];
  		                    var gamma1xh = gamma1x.high;
  		                    var gamma1xl = gamma1x.low;
  		                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
  		                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

  		                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
  		                    var Wi7  = W[i - 7];
  		                    var Wi7h = Wi7.high;
  		                    var Wi7l = Wi7.low;

  		                    var Wi16  = W[i - 16];
  		                    var Wi16h = Wi16.high;
  		                    var Wi16l = Wi16.low;

  		                    var Wil = gamma0l + Wi7l;
  		                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
  		                    var Wil = Wil + gamma1l;
  		                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
  		                    var Wil = Wil + Wi16l;
  		                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

  		                    Wi.high = Wih;
  		                    Wi.low  = Wil;
  		                }

  		                var chh  = (eh & fh) ^ (~eh & gh);
  		                var chl  = (el & fl) ^ (~el & gl);
  		                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
  		                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

  		                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
  		                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
  		                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
  		                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

  		                // t1 = h + sigma1 + ch + K[i] + W[i]
  		                var Ki  = K[i];
  		                var Kih = Ki.high;
  		                var Kil = Ki.low;

  		                var t1l = hl + sigma1l;
  		                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
  		                var t1l = t1l + chl;
  		                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
  		                var t1l = t1l + Kil;
  		                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
  		                var t1l = t1l + Wil;
  		                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

  		                // t2 = sigma0 + maj
  		                var t2l = sigma0l + majl;
  		                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

  		                // Update working variables
  		                hh = gh;
  		                hl = gl;
  		                gh = fh;
  		                gl = fl;
  		                fh = eh;
  		                fl = el;
  		                el = (dl + t1l) | 0;
  		                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
  		                dh = ch;
  		                dl = cl;
  		                ch = bh;
  		                cl = bl;
  		                bh = ah;
  		                bl = al;
  		                al = (t1l + t2l) | 0;
  		                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
  		            }

  		            // Intermediate hash value
  		            H0l = H0.low  = (H0l + al);
  		            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
  		            H1l = H1.low  = (H1l + bl);
  		            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
  		            H2l = H2.low  = (H2l + cl);
  		            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
  		            H3l = H3.low  = (H3l + dl);
  		            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
  		            H4l = H4.low  = (H4l + el);
  		            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
  		            H5l = H5.low  = (H5l + fl);
  		            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
  		            H6l = H6.low  = (H6l + gl);
  		            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
  		            H7l = H7.low  = (H7l + hl);
  		            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
  		        },

  		        _doFinalize: function () {
  		            // Shortcuts
  		            var data = this._data;
  		            var dataWords = data.words;

  		            var nBitsTotal = this._nDataBytes * 8;
  		            var nBitsLeft = data.sigBytes * 8;

  		            // Add padding
  		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
  		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
  		            data.sigBytes = dataWords.length * 4;

  		            // Hash final blocks
  		            this._process();

  		            // Convert hash to 32-bit word array before returning
  		            var hash = this._hash.toX32();

  		            // Return final computed hash
  		            return hash;
  		        },

  		        clone: function () {
  		            var clone = Hasher.clone.call(this);
  		            clone._hash = this._hash.clone();

  		            return clone;
  		        },

  		        blockSize: 1024/32
  		    });

  		    /**
  		     * Shortcut function to the hasher's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     *
  		     * @return {WordArray} The hash.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hash = CryptoJS.SHA512('message');
  		     *     var hash = CryptoJS.SHA512(wordArray);
  		     */
  		    C.SHA512 = Hasher._createHelper(SHA512);

  		    /**
  		     * Shortcut function to the HMAC's object interface.
  		     *
  		     * @param {WordArray|string} message The message to hash.
  		     * @param {WordArray|string} key The secret key.
  		     *
  		     * @return {WordArray} The HMAC.
  		     *
  		     * @static
  		     *
  		     * @example
  		     *
  		     *     var hmac = CryptoJS.HmacSHA512(message, key);
  		     */
  		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
  		}());


  		return CryptoJS.SHA512;

  	}));
  	},{"./core":59,"./x64-core":90}],89:[function(require,module,exports){
  	(function (root, factory, undef) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function () {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var WordArray = C_lib.WordArray;
  		    var BlockCipher = C_lib.BlockCipher;
  		    var C_algo = C.algo;

  		    // Permuted Choice 1 constants
  		    var PC1 = [
  		        57, 49, 41, 33, 25, 17, 9,  1,
  		        58, 50, 42, 34, 26, 18, 10, 2,
  		        59, 51, 43, 35, 27, 19, 11, 3,
  		        60, 52, 44, 36, 63, 55, 47, 39,
  		        31, 23, 15, 7,  62, 54, 46, 38,
  		        30, 22, 14, 6,  61, 53, 45, 37,
  		        29, 21, 13, 5,  28, 20, 12, 4
  		    ];

  		    // Permuted Choice 2 constants
  		    var PC2 = [
  		        14, 17, 11, 24, 1,  5,
  		        3,  28, 15, 6,  21, 10,
  		        23, 19, 12, 4,  26, 8,
  		        16, 7,  27, 20, 13, 2,
  		        41, 52, 31, 37, 47, 55,
  		        30, 40, 51, 45, 33, 48,
  		        44, 49, 39, 56, 34, 53,
  		        46, 42, 50, 36, 29, 32
  		    ];

  		    // Cumulative bit shift constants
  		    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

  		    // SBOXes and round permutation constants
  		    var SBOX_P = [
  		        {
  		            0x0: 0x808200,
  		            0x10000000: 0x8000,
  		            0x20000000: 0x808002,
  		            0x30000000: 0x2,
  		            0x40000000: 0x200,
  		            0x50000000: 0x808202,
  		            0x60000000: 0x800202,
  		            0x70000000: 0x800000,
  		            0x80000000: 0x202,
  		            0x90000000: 0x800200,
  		            0xa0000000: 0x8200,
  		            0xb0000000: 0x808000,
  		            0xc0000000: 0x8002,
  		            0xd0000000: 0x800002,
  		            0xe0000000: 0x0,
  		            0xf0000000: 0x8202,
  		            0x8000000: 0x0,
  		            0x18000000: 0x808202,
  		            0x28000000: 0x8202,
  		            0x38000000: 0x8000,
  		            0x48000000: 0x808200,
  		            0x58000000: 0x200,
  		            0x68000000: 0x808002,
  		            0x78000000: 0x2,
  		            0x88000000: 0x800200,
  		            0x98000000: 0x8200,
  		            0xa8000000: 0x808000,
  		            0xb8000000: 0x800202,
  		            0xc8000000: 0x800002,
  		            0xd8000000: 0x8002,
  		            0xe8000000: 0x202,
  		            0xf8000000: 0x800000,
  		            0x1: 0x8000,
  		            0x10000001: 0x2,
  		            0x20000001: 0x808200,
  		            0x30000001: 0x800000,
  		            0x40000001: 0x808002,
  		            0x50000001: 0x8200,
  		            0x60000001: 0x200,
  		            0x70000001: 0x800202,
  		            0x80000001: 0x808202,
  		            0x90000001: 0x808000,
  		            0xa0000001: 0x800002,
  		            0xb0000001: 0x8202,
  		            0xc0000001: 0x202,
  		            0xd0000001: 0x800200,
  		            0xe0000001: 0x8002,
  		            0xf0000001: 0x0,
  		            0x8000001: 0x808202,
  		            0x18000001: 0x808000,
  		            0x28000001: 0x800000,
  		            0x38000001: 0x200,
  		            0x48000001: 0x8000,
  		            0x58000001: 0x800002,
  		            0x68000001: 0x2,
  		            0x78000001: 0x8202,
  		            0x88000001: 0x8002,
  		            0x98000001: 0x800202,
  		            0xa8000001: 0x202,
  		            0xb8000001: 0x808200,
  		            0xc8000001: 0x800200,
  		            0xd8000001: 0x0,
  		            0xe8000001: 0x8200,
  		            0xf8000001: 0x808002
  		        },
  		        {
  		            0x0: 0x40084010,
  		            0x1000000: 0x4000,
  		            0x2000000: 0x80000,
  		            0x3000000: 0x40080010,
  		            0x4000000: 0x40000010,
  		            0x5000000: 0x40084000,
  		            0x6000000: 0x40004000,
  		            0x7000000: 0x10,
  		            0x8000000: 0x84000,
  		            0x9000000: 0x40004010,
  		            0xa000000: 0x40000000,
  		            0xb000000: 0x84010,
  		            0xc000000: 0x80010,
  		            0xd000000: 0x0,
  		            0xe000000: 0x4010,
  		            0xf000000: 0x40080000,
  		            0x800000: 0x40004000,
  		            0x1800000: 0x84010,
  		            0x2800000: 0x10,
  		            0x3800000: 0x40004010,
  		            0x4800000: 0x40084010,
  		            0x5800000: 0x40000000,
  		            0x6800000: 0x80000,
  		            0x7800000: 0x40080010,
  		            0x8800000: 0x80010,
  		            0x9800000: 0x0,
  		            0xa800000: 0x4000,
  		            0xb800000: 0x40080000,
  		            0xc800000: 0x40000010,
  		            0xd800000: 0x84000,
  		            0xe800000: 0x40084000,
  		            0xf800000: 0x4010,
  		            0x10000000: 0x0,
  		            0x11000000: 0x40080010,
  		            0x12000000: 0x40004010,
  		            0x13000000: 0x40084000,
  		            0x14000000: 0x40080000,
  		            0x15000000: 0x10,
  		            0x16000000: 0x84010,
  		            0x17000000: 0x4000,
  		            0x18000000: 0x4010,
  		            0x19000000: 0x80000,
  		            0x1a000000: 0x80010,
  		            0x1b000000: 0x40000010,
  		            0x1c000000: 0x84000,
  		            0x1d000000: 0x40004000,
  		            0x1e000000: 0x40000000,
  		            0x1f000000: 0x40084010,
  		            0x10800000: 0x84010,
  		            0x11800000: 0x80000,
  		            0x12800000: 0x40080000,
  		            0x13800000: 0x4000,
  		            0x14800000: 0x40004000,
  		            0x15800000: 0x40084010,
  		            0x16800000: 0x10,
  		            0x17800000: 0x40000000,
  		            0x18800000: 0x40084000,
  		            0x19800000: 0x40000010,
  		            0x1a800000: 0x40004010,
  		            0x1b800000: 0x80010,
  		            0x1c800000: 0x0,
  		            0x1d800000: 0x4010,
  		            0x1e800000: 0x40080010,
  		            0x1f800000: 0x84000
  		        },
  		        {
  		            0x0: 0x104,
  		            0x100000: 0x0,
  		            0x200000: 0x4000100,
  		            0x300000: 0x10104,
  		            0x400000: 0x10004,
  		            0x500000: 0x4000004,
  		            0x600000: 0x4010104,
  		            0x700000: 0x4010000,
  		            0x800000: 0x4000000,
  		            0x900000: 0x4010100,
  		            0xa00000: 0x10100,
  		            0xb00000: 0x4010004,
  		            0xc00000: 0x4000104,
  		            0xd00000: 0x10000,
  		            0xe00000: 0x4,
  		            0xf00000: 0x100,
  		            0x80000: 0x4010100,
  		            0x180000: 0x4010004,
  		            0x280000: 0x0,
  		            0x380000: 0x4000100,
  		            0x480000: 0x4000004,
  		            0x580000: 0x10000,
  		            0x680000: 0x10004,
  		            0x780000: 0x104,
  		            0x880000: 0x4,
  		            0x980000: 0x100,
  		            0xa80000: 0x4010000,
  		            0xb80000: 0x10104,
  		            0xc80000: 0x10100,
  		            0xd80000: 0x4000104,
  		            0xe80000: 0x4010104,
  		            0xf80000: 0x4000000,
  		            0x1000000: 0x4010100,
  		            0x1100000: 0x10004,
  		            0x1200000: 0x10000,
  		            0x1300000: 0x4000100,
  		            0x1400000: 0x100,
  		            0x1500000: 0x4010104,
  		            0x1600000: 0x4000004,
  		            0x1700000: 0x0,
  		            0x1800000: 0x4000104,
  		            0x1900000: 0x4000000,
  		            0x1a00000: 0x4,
  		            0x1b00000: 0x10100,
  		            0x1c00000: 0x4010000,
  		            0x1d00000: 0x104,
  		            0x1e00000: 0x10104,
  		            0x1f00000: 0x4010004,
  		            0x1080000: 0x4000000,
  		            0x1180000: 0x104,
  		            0x1280000: 0x4010100,
  		            0x1380000: 0x0,
  		            0x1480000: 0x10004,
  		            0x1580000: 0x4000100,
  		            0x1680000: 0x100,
  		            0x1780000: 0x4010004,
  		            0x1880000: 0x10000,
  		            0x1980000: 0x4010104,
  		            0x1a80000: 0x10104,
  		            0x1b80000: 0x4000004,
  		            0x1c80000: 0x4000104,
  		            0x1d80000: 0x4010000,
  		            0x1e80000: 0x4,
  		            0x1f80000: 0x10100
  		        },
  		        {
  		            0x0: 0x80401000,
  		            0x10000: 0x80001040,
  		            0x20000: 0x401040,
  		            0x30000: 0x80400000,
  		            0x40000: 0x0,
  		            0x50000: 0x401000,
  		            0x60000: 0x80000040,
  		            0x70000: 0x400040,
  		            0x80000: 0x80000000,
  		            0x90000: 0x400000,
  		            0xa0000: 0x40,
  		            0xb0000: 0x80001000,
  		            0xc0000: 0x80400040,
  		            0xd0000: 0x1040,
  		            0xe0000: 0x1000,
  		            0xf0000: 0x80401040,
  		            0x8000: 0x80001040,
  		            0x18000: 0x40,
  		            0x28000: 0x80400040,
  		            0x38000: 0x80001000,
  		            0x48000: 0x401000,
  		            0x58000: 0x80401040,
  		            0x68000: 0x0,
  		            0x78000: 0x80400000,
  		            0x88000: 0x1000,
  		            0x98000: 0x80401000,
  		            0xa8000: 0x400000,
  		            0xb8000: 0x1040,
  		            0xc8000: 0x80000000,
  		            0xd8000: 0x400040,
  		            0xe8000: 0x401040,
  		            0xf8000: 0x80000040,
  		            0x100000: 0x400040,
  		            0x110000: 0x401000,
  		            0x120000: 0x80000040,
  		            0x130000: 0x0,
  		            0x140000: 0x1040,
  		            0x150000: 0x80400040,
  		            0x160000: 0x80401000,
  		            0x170000: 0x80001040,
  		            0x180000: 0x80401040,
  		            0x190000: 0x80000000,
  		            0x1a0000: 0x80400000,
  		            0x1b0000: 0x401040,
  		            0x1c0000: 0x80001000,
  		            0x1d0000: 0x400000,
  		            0x1e0000: 0x40,
  		            0x1f0000: 0x1000,
  		            0x108000: 0x80400000,
  		            0x118000: 0x80401040,
  		            0x128000: 0x0,
  		            0x138000: 0x401000,
  		            0x148000: 0x400040,
  		            0x158000: 0x80000000,
  		            0x168000: 0x80001040,
  		            0x178000: 0x40,
  		            0x188000: 0x80000040,
  		            0x198000: 0x1000,
  		            0x1a8000: 0x80001000,
  		            0x1b8000: 0x80400040,
  		            0x1c8000: 0x1040,
  		            0x1d8000: 0x80401000,
  		            0x1e8000: 0x400000,
  		            0x1f8000: 0x401040
  		        },
  		        {
  		            0x0: 0x80,
  		            0x1000: 0x1040000,
  		            0x2000: 0x40000,
  		            0x3000: 0x20000000,
  		            0x4000: 0x20040080,
  		            0x5000: 0x1000080,
  		            0x6000: 0x21000080,
  		            0x7000: 0x40080,
  		            0x8000: 0x1000000,
  		            0x9000: 0x20040000,
  		            0xa000: 0x20000080,
  		            0xb000: 0x21040080,
  		            0xc000: 0x21040000,
  		            0xd000: 0x0,
  		            0xe000: 0x1040080,
  		            0xf000: 0x21000000,
  		            0x800: 0x1040080,
  		            0x1800: 0x21000080,
  		            0x2800: 0x80,
  		            0x3800: 0x1040000,
  		            0x4800: 0x40000,
  		            0x5800: 0x20040080,
  		            0x6800: 0x21040000,
  		            0x7800: 0x20000000,
  		            0x8800: 0x20040000,
  		            0x9800: 0x0,
  		            0xa800: 0x21040080,
  		            0xb800: 0x1000080,
  		            0xc800: 0x20000080,
  		            0xd800: 0x21000000,
  		            0xe800: 0x1000000,
  		            0xf800: 0x40080,
  		            0x10000: 0x40000,
  		            0x11000: 0x80,
  		            0x12000: 0x20000000,
  		            0x13000: 0x21000080,
  		            0x14000: 0x1000080,
  		            0x15000: 0x21040000,
  		            0x16000: 0x20040080,
  		            0x17000: 0x1000000,
  		            0x18000: 0x21040080,
  		            0x19000: 0x21000000,
  		            0x1a000: 0x1040000,
  		            0x1b000: 0x20040000,
  		            0x1c000: 0x40080,
  		            0x1d000: 0x20000080,
  		            0x1e000: 0x0,
  		            0x1f000: 0x1040080,
  		            0x10800: 0x21000080,
  		            0x11800: 0x1000000,
  		            0x12800: 0x1040000,
  		            0x13800: 0x20040080,
  		            0x14800: 0x20000000,
  		            0x15800: 0x1040080,
  		            0x16800: 0x80,
  		            0x17800: 0x21040000,
  		            0x18800: 0x40080,
  		            0x19800: 0x21040080,
  		            0x1a800: 0x0,
  		            0x1b800: 0x21000000,
  		            0x1c800: 0x1000080,
  		            0x1d800: 0x40000,
  		            0x1e800: 0x20040000,
  		            0x1f800: 0x20000080
  		        },
  		        {
  		            0x0: 0x10000008,
  		            0x100: 0x2000,
  		            0x200: 0x10200000,
  		            0x300: 0x10202008,
  		            0x400: 0x10002000,
  		            0x500: 0x200000,
  		            0x600: 0x200008,
  		            0x700: 0x10000000,
  		            0x800: 0x0,
  		            0x900: 0x10002008,
  		            0xa00: 0x202000,
  		            0xb00: 0x8,
  		            0xc00: 0x10200008,
  		            0xd00: 0x202008,
  		            0xe00: 0x2008,
  		            0xf00: 0x10202000,
  		            0x80: 0x10200000,
  		            0x180: 0x10202008,
  		            0x280: 0x8,
  		            0x380: 0x200000,
  		            0x480: 0x202008,
  		            0x580: 0x10000008,
  		            0x680: 0x10002000,
  		            0x780: 0x2008,
  		            0x880: 0x200008,
  		            0x980: 0x2000,
  		            0xa80: 0x10002008,
  		            0xb80: 0x10200008,
  		            0xc80: 0x0,
  		            0xd80: 0x10202000,
  		            0xe80: 0x202000,
  		            0xf80: 0x10000000,
  		            0x1000: 0x10002000,
  		            0x1100: 0x10200008,
  		            0x1200: 0x10202008,
  		            0x1300: 0x2008,
  		            0x1400: 0x200000,
  		            0x1500: 0x10000000,
  		            0x1600: 0x10000008,
  		            0x1700: 0x202000,
  		            0x1800: 0x202008,
  		            0x1900: 0x0,
  		            0x1a00: 0x8,
  		            0x1b00: 0x10200000,
  		            0x1c00: 0x2000,
  		            0x1d00: 0x10002008,
  		            0x1e00: 0x10202000,
  		            0x1f00: 0x200008,
  		            0x1080: 0x8,
  		            0x1180: 0x202000,
  		            0x1280: 0x200000,
  		            0x1380: 0x10000008,
  		            0x1480: 0x10002000,
  		            0x1580: 0x2008,
  		            0x1680: 0x10202008,
  		            0x1780: 0x10200000,
  		            0x1880: 0x10202000,
  		            0x1980: 0x10200008,
  		            0x1a80: 0x2000,
  		            0x1b80: 0x202008,
  		            0x1c80: 0x200008,
  		            0x1d80: 0x0,
  		            0x1e80: 0x10000000,
  		            0x1f80: 0x10002008
  		        },
  		        {
  		            0x0: 0x100000,
  		            0x10: 0x2000401,
  		            0x20: 0x400,
  		            0x30: 0x100401,
  		            0x40: 0x2100401,
  		            0x50: 0x0,
  		            0x60: 0x1,
  		            0x70: 0x2100001,
  		            0x80: 0x2000400,
  		            0x90: 0x100001,
  		            0xa0: 0x2000001,
  		            0xb0: 0x2100400,
  		            0xc0: 0x2100000,
  		            0xd0: 0x401,
  		            0xe0: 0x100400,
  		            0xf0: 0x2000000,
  		            0x8: 0x2100001,
  		            0x18: 0x0,
  		            0x28: 0x2000401,
  		            0x38: 0x2100400,
  		            0x48: 0x100000,
  		            0x58: 0x2000001,
  		            0x68: 0x2000000,
  		            0x78: 0x401,
  		            0x88: 0x100401,
  		            0x98: 0x2000400,
  		            0xa8: 0x2100000,
  		            0xb8: 0x100001,
  		            0xc8: 0x400,
  		            0xd8: 0x2100401,
  		            0xe8: 0x1,
  		            0xf8: 0x100400,
  		            0x100: 0x2000000,
  		            0x110: 0x100000,
  		            0x120: 0x2000401,
  		            0x130: 0x2100001,
  		            0x140: 0x100001,
  		            0x150: 0x2000400,
  		            0x160: 0x2100400,
  		            0x170: 0x100401,
  		            0x180: 0x401,
  		            0x190: 0x2100401,
  		            0x1a0: 0x100400,
  		            0x1b0: 0x1,
  		            0x1c0: 0x0,
  		            0x1d0: 0x2100000,
  		            0x1e0: 0x2000001,
  		            0x1f0: 0x400,
  		            0x108: 0x100400,
  		            0x118: 0x2000401,
  		            0x128: 0x2100001,
  		            0x138: 0x1,
  		            0x148: 0x2000000,
  		            0x158: 0x100000,
  		            0x168: 0x401,
  		            0x178: 0x2100400,
  		            0x188: 0x2000001,
  		            0x198: 0x2100000,
  		            0x1a8: 0x0,
  		            0x1b8: 0x2100401,
  		            0x1c8: 0x100401,
  		            0x1d8: 0x400,
  		            0x1e8: 0x2000400,
  		            0x1f8: 0x100001
  		        },
  		        {
  		            0x0: 0x8000820,
  		            0x1: 0x20000,
  		            0x2: 0x8000000,
  		            0x3: 0x20,
  		            0x4: 0x20020,
  		            0x5: 0x8020820,
  		            0x6: 0x8020800,
  		            0x7: 0x800,
  		            0x8: 0x8020000,
  		            0x9: 0x8000800,
  		            0xa: 0x20800,
  		            0xb: 0x8020020,
  		            0xc: 0x820,
  		            0xd: 0x0,
  		            0xe: 0x8000020,
  		            0xf: 0x20820,
  		            0x80000000: 0x800,
  		            0x80000001: 0x8020820,
  		            0x80000002: 0x8000820,
  		            0x80000003: 0x8000000,
  		            0x80000004: 0x8020000,
  		            0x80000005: 0x20800,
  		            0x80000006: 0x20820,
  		            0x80000007: 0x20,
  		            0x80000008: 0x8000020,
  		            0x80000009: 0x820,
  		            0x8000000a: 0x20020,
  		            0x8000000b: 0x8020800,
  		            0x8000000c: 0x0,
  		            0x8000000d: 0x8020020,
  		            0x8000000e: 0x8000800,
  		            0x8000000f: 0x20000,
  		            0x10: 0x20820,
  		            0x11: 0x8020800,
  		            0x12: 0x20,
  		            0x13: 0x800,
  		            0x14: 0x8000800,
  		            0x15: 0x8000020,
  		            0x16: 0x8020020,
  		            0x17: 0x20000,
  		            0x18: 0x0,
  		            0x19: 0x20020,
  		            0x1a: 0x8020000,
  		            0x1b: 0x8000820,
  		            0x1c: 0x8020820,
  		            0x1d: 0x20800,
  		            0x1e: 0x820,
  		            0x1f: 0x8000000,
  		            0x80000010: 0x20000,
  		            0x80000011: 0x800,
  		            0x80000012: 0x8020020,
  		            0x80000013: 0x20820,
  		            0x80000014: 0x20,
  		            0x80000015: 0x8020000,
  		            0x80000016: 0x8000000,
  		            0x80000017: 0x8000820,
  		            0x80000018: 0x8020820,
  		            0x80000019: 0x8000020,
  		            0x8000001a: 0x8000800,
  		            0x8000001b: 0x0,
  		            0x8000001c: 0x20800,
  		            0x8000001d: 0x820,
  		            0x8000001e: 0x20020,
  		            0x8000001f: 0x8020800
  		        }
  		    ];

  		    // Masks that select the SBOX input
  		    var SBOX_MASK = [
  		        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
  		        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
  		    ];

  		    /**
  		     * DES block cipher algorithm.
  		     */
  		    var DES = C_algo.DES = BlockCipher.extend({
  		        _doReset: function () {
  		            // Shortcuts
  		            var key = this._key;
  		            var keyWords = key.words;

  		            // Select 56 bits according to PC1
  		            var keyBits = [];
  		            for (var i = 0; i < 56; i++) {
  		                var keyBitPos = PC1[i] - 1;
  		                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
  		            }

  		            // Assemble 16 subkeys
  		            var subKeys = this._subKeys = [];
  		            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
  		                // Create subkey
  		                var subKey = subKeys[nSubKey] = [];

  		                // Shortcut
  		                var bitShift = BIT_SHIFTS[nSubKey];

  		                // Select 48 bits according to PC2
  		                for (var i = 0; i < 24; i++) {
  		                    // Select from the left 28 key bits
  		                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

  		                    // Select from the right 28 key bits
  		                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
  		                }

  		                // Since each subkey is applied to an expanded 32-bit input,
  		                // the subkey can be broken into 8 values scaled to 32-bits,
  		                // which allows the key to be used without expansion
  		                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
  		                for (var i = 1; i < 7; i++) {
  		                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
  		                }
  		                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
  		            }

  		            // Compute inverse subkeys
  		            var invSubKeys = this._invSubKeys = [];
  		            for (var i = 0; i < 16; i++) {
  		                invSubKeys[i] = subKeys[15 - i];
  		            }
  		        },

  		        encryptBlock: function (M, offset) {
  		            this._doCryptBlock(M, offset, this._subKeys);
  		        },

  		        decryptBlock: function (M, offset) {
  		            this._doCryptBlock(M, offset, this._invSubKeys);
  		        },

  		        _doCryptBlock: function (M, offset, subKeys) {
  		            // Get input
  		            this._lBlock = M[offset];
  		            this._rBlock = M[offset + 1];

  		            // Initial permutation
  		            exchangeLR.call(this, 4,  0x0f0f0f0f);
  		            exchangeLR.call(this, 16, 0x0000ffff);
  		            exchangeRL.call(this, 2,  0x33333333);
  		            exchangeRL.call(this, 8,  0x00ff00ff);
  		            exchangeLR.call(this, 1,  0x55555555);

  		            // Rounds
  		            for (var round = 0; round < 16; round++) {
  		                // Shortcuts
  		                var subKey = subKeys[round];
  		                var lBlock = this._lBlock;
  		                var rBlock = this._rBlock;

  		                // Feistel function
  		                var f = 0;
  		                for (var i = 0; i < 8; i++) {
  		                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
  		                }
  		                this._lBlock = rBlock;
  		                this._rBlock = lBlock ^ f;
  		            }

  		            // Undo swap from last round
  		            var t = this._lBlock;
  		            this._lBlock = this._rBlock;
  		            this._rBlock = t;

  		            // Final permutation
  		            exchangeLR.call(this, 1,  0x55555555);
  		            exchangeRL.call(this, 8,  0x00ff00ff);
  		            exchangeRL.call(this, 2,  0x33333333);
  		            exchangeLR.call(this, 16, 0x0000ffff);
  		            exchangeLR.call(this, 4,  0x0f0f0f0f);

  		            // Set output
  		            M[offset] = this._lBlock;
  		            M[offset + 1] = this._rBlock;
  		        },

  		        keySize: 64/32,

  		        ivSize: 64/32,

  		        blockSize: 64/32
  		    });

  		    // Swap bits across the left and right words
  		    function exchangeLR(offset, mask) {
  		        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
  		        this._rBlock ^= t;
  		        this._lBlock ^= t << offset;
  		    }

  		    function exchangeRL(offset, mask) {
  		        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
  		        this._lBlock ^= t;
  		        this._rBlock ^= t << offset;
  		    }

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
  		     */
  		    C.DES = BlockCipher._createHelper(DES);

  		    /**
  		     * Triple-DES block cipher algorithm.
  		     */
  		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
  		        _doReset: function () {
  		            // Shortcuts
  		            var key = this._key;
  		            var keyWords = key.words;

  		            // Create DES instances
  		            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
  		            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
  		            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
  		        },

  		        encryptBlock: function (M, offset) {
  		            this._des1.encryptBlock(M, offset);
  		            this._des2.decryptBlock(M, offset);
  		            this._des3.encryptBlock(M, offset);
  		        },

  		        decryptBlock: function (M, offset) {
  		            this._des3.decryptBlock(M, offset);
  		            this._des2.encryptBlock(M, offset);
  		            this._des1.decryptBlock(M, offset);
  		        },

  		        keySize: 192/32,

  		        ivSize: 64/32,

  		        blockSize: 64/32
  		    });

  		    /**
  		     * Shortcut functions to the cipher's object interface.
  		     *
  		     * @example
  		     *
  		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
  		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
  		     */
  		    C.TripleDES = BlockCipher._createHelper(TripleDES);
  		}());


  		return CryptoJS.TripleDES;

  	}));
  	},{"./cipher-core":58,"./core":59,"./enc-base64":60,"./evpkdf":62,"./md5":67}],90:[function(require,module,exports){
  	(function (root, factory) {
  		if (typeof exports === "object") {
  			// CommonJS
  			module.exports = exports = factory(require("./core"));
  		}
  		else {
  			// Global (browser)
  			factory(root.CryptoJS);
  		}
  	}(this, function (CryptoJS) {

  		(function (undefined$1) {
  		    // Shortcuts
  		    var C = CryptoJS;
  		    var C_lib = C.lib;
  		    var Base = C_lib.Base;
  		    var X32WordArray = C_lib.WordArray;

  		    /**
  		     * x64 namespace.
  		     */
  		    var C_x64 = C.x64 = {};

  		    /**
  		     * A 64-bit word.
  		     */
  		    var X64Word = C_x64.Word = Base.extend({
  		        /**
  		         * Initializes a newly created 64-bit word.
  		         *
  		         * @param {number} high The high 32 bits.
  		         * @param {number} low The low 32 bits.
  		         *
  		         * @example
  		         *
  		         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
  		         */
  		        init: function (high, low) {
  		            this.high = high;
  		            this.low = low;
  		        }

  		        /**
  		         * Bitwise NOTs this word.
  		         *
  		         * @return {X64Word} A new x64-Word object after negating.
  		         *
  		         * @example
  		         *
  		         *     var negated = x64Word.not();
  		         */
  		        // not: function () {
  		            // var high = ~this.high;
  		            // var low = ~this.low;

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Bitwise ANDs this word with the passed word.
  		         *
  		         * @param {X64Word} word The x64-Word to AND with this word.
  		         *
  		         * @return {X64Word} A new x64-Word object after ANDing.
  		         *
  		         * @example
  		         *
  		         *     var anded = x64Word.and(anotherX64Word);
  		         */
  		        // and: function (word) {
  		            // var high = this.high & word.high;
  		            // var low = this.low & word.low;

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Bitwise ORs this word with the passed word.
  		         *
  		         * @param {X64Word} word The x64-Word to OR with this word.
  		         *
  		         * @return {X64Word} A new x64-Word object after ORing.
  		         *
  		         * @example
  		         *
  		         *     var ored = x64Word.or(anotherX64Word);
  		         */
  		        // or: function (word) {
  		            // var high = this.high | word.high;
  		            // var low = this.low | word.low;

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Bitwise XORs this word with the passed word.
  		         *
  		         * @param {X64Word} word The x64-Word to XOR with this word.
  		         *
  		         * @return {X64Word} A new x64-Word object after XORing.
  		         *
  		         * @example
  		         *
  		         *     var xored = x64Word.xor(anotherX64Word);
  		         */
  		        // xor: function (word) {
  		            // var high = this.high ^ word.high;
  		            // var low = this.low ^ word.low;

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Shifts this word n bits to the left.
  		         *
  		         * @param {number} n The number of bits to shift.
  		         *
  		         * @return {X64Word} A new x64-Word object after shifting.
  		         *
  		         * @example
  		         *
  		         *     var shifted = x64Word.shiftL(25);
  		         */
  		        // shiftL: function (n) {
  		            // if (n < 32) {
  		                // var high = (this.high << n) | (this.low >>> (32 - n));
  		                // var low = this.low << n;
  		            // } else {
  		                // var high = this.low << (n - 32);
  		                // var low = 0;
  		            // }

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Shifts this word n bits to the right.
  		         *
  		         * @param {number} n The number of bits to shift.
  		         *
  		         * @return {X64Word} A new x64-Word object after shifting.
  		         *
  		         * @example
  		         *
  		         *     var shifted = x64Word.shiftR(7);
  		         */
  		        // shiftR: function (n) {
  		            // if (n < 32) {
  		                // var low = (this.low >>> n) | (this.high << (32 - n));
  		                // var high = this.high >>> n;
  		            // } else {
  		                // var low = this.high >>> (n - 32);
  		                // var high = 0;
  		            // }

  		            // return X64Word.create(high, low);
  		        // },

  		        /**
  		         * Rotates this word n bits to the left.
  		         *
  		         * @param {number} n The number of bits to rotate.
  		         *
  		         * @return {X64Word} A new x64-Word object after rotating.
  		         *
  		         * @example
  		         *
  		         *     var rotated = x64Word.rotL(25);
  		         */
  		        // rotL: function (n) {
  		            // return this.shiftL(n).or(this.shiftR(64 - n));
  		        // },

  		        /**
  		         * Rotates this word n bits to the right.
  		         *
  		         * @param {number} n The number of bits to rotate.
  		         *
  		         * @return {X64Word} A new x64-Word object after rotating.
  		         *
  		         * @example
  		         *
  		         *     var rotated = x64Word.rotR(7);
  		         */
  		        // rotR: function (n) {
  		            // return this.shiftR(n).or(this.shiftL(64 - n));
  		        // },

  		        /**
  		         * Adds this word with the passed word.
  		         *
  		         * @param {X64Word} word The x64-Word to add with this word.
  		         *
  		         * @return {X64Word} A new x64-Word object after adding.
  		         *
  		         * @example
  		         *
  		         *     var added = x64Word.add(anotherX64Word);
  		         */
  		        // add: function (word) {
  		            // var low = (this.low + word.low) | 0;
  		            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
  		            // var high = (this.high + word.high + carry) | 0;

  		            // return X64Word.create(high, low);
  		        // }
  		    });

  		    /**
  		     * An array of 64-bit words.
  		     *
  		     * @property {Array} words The array of CryptoJS.x64.Word objects.
  		     * @property {number} sigBytes The number of significant bytes in this word array.
  		     */
  		    var X64WordArray = C_x64.WordArray = Base.extend({
  		        /**
  		         * Initializes a newly created word array.
  		         *
  		         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
  		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
  		         *
  		         * @example
  		         *
  		         *     var wordArray = CryptoJS.x64.WordArray.create();
  		         *
  		         *     var wordArray = CryptoJS.x64.WordArray.create([
  		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
  		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
  		         *     ]);
  		         *
  		         *     var wordArray = CryptoJS.x64.WordArray.create([
  		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
  		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
  		         *     ], 10);
  		         */
  		        init: function (words, sigBytes) {
  		            words = this.words = words || [];

  		            if (sigBytes != undefined$1) {
  		                this.sigBytes = sigBytes;
  		            } else {
  		                this.sigBytes = words.length * 8;
  		            }
  		        },

  		        /**
  		         * Converts this 64-bit word array to a 32-bit word array.
  		         *
  		         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
  		         *
  		         * @example
  		         *
  		         *     var x32WordArray = x64WordArray.toX32();
  		         */
  		        toX32: function () {
  		            // Shortcuts
  		            var x64Words = this.words;
  		            var x64WordsLength = x64Words.length;

  		            // Convert
  		            var x32Words = [];
  		            for (var i = 0; i < x64WordsLength; i++) {
  		                var x64Word = x64Words[i];
  		                x32Words.push(x64Word.high);
  		                x32Words.push(x64Word.low);
  		            }

  		            return X32WordArray.create(x32Words, this.sigBytes);
  		        },

  		        /**
  		         * Creates a copy of this word array.
  		         *
  		         * @return {X64WordArray} The clone.
  		         *
  		         * @example
  		         *
  		         *     var clone = x64WordArray.clone();
  		         */
  		        clone: function () {
  		            var clone = Base.clone.call(this);

  		            // Clone "words" array
  		            var words = clone.words = this.words.slice(0);

  		            // Clone each X64Word object
  		            var wordsLength = words.length;
  		            for (var i = 0; i < wordsLength; i++) {
  		                words[i] = words[i].clone();
  		            }

  		            return clone;
  		        }
  		    });
  		}());


  		return CryptoJS;

  	}));
  	},{"./core":59}],91:[function(require,module,exports){
  	// Copyright Joyent, Inc. and other Node contributors.
  	//
  	// Permission is hereby granted, free of charge, to any person obtaining a
  	// copy of this software and associated documentation files (the
  	// "Software"), to deal in the Software without restriction, including
  	// without limitation the rights to use, copy, modify, merge, publish,
  	// distribute, sublicense, and/or sell copies of the Software, and to permit
  	// persons to whom the Software is furnished to do so, subject to the
  	// following conditions:
  	//
  	// The above copyright notice and this permission notice shall be included
  	// in all copies or substantial portions of the Software.
  	//
  	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  	// USE OR OTHER DEALINGS IN THE SOFTWARE.

  	var objectCreate = Object.create || objectCreatePolyfill;
  	var objectKeys = Object.keys || objectKeysPolyfill;
  	var bind = Function.prototype.bind || functionBindPolyfill;

  	function EventEmitter() {
  	  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
  	    this._events = objectCreate(null);
  	    this._eventsCount = 0;
  	  }

  	  this._maxListeners = this._maxListeners || undefined;
  	}
  	module.exports = EventEmitter;

  	// Backwards-compat with node 0.10.x
  	EventEmitter.EventEmitter = EventEmitter;

  	EventEmitter.prototype._events = undefined;
  	EventEmitter.prototype._maxListeners = undefined;

  	// By default EventEmitters will print a warning if more than 10 listeners are
  	// added to it. This is a useful default which helps finding memory leaks.
  	var defaultMaxListeners = 10;

  	var hasDefineProperty;
  	try {
  	  var o = {};
  	  if (Object.defineProperty) { Object.defineProperty(o, 'x', { value: 0 }); }
  	  hasDefineProperty = o.x === 0;
  	} catch (err) { hasDefineProperty = false; }
  	if (hasDefineProperty) {
  	  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  	    enumerable: true,
  	    get: function() {
  	      return defaultMaxListeners;
  	    },
  	    set: function(arg) {
  	      // check whether the input is a positive number (whose value is zero or
  	      // greater and not a NaN).
  	      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
  	        { throw new TypeError('"defaultMaxListeners" must be a positive number'); }
  	      defaultMaxListeners = arg;
  	    }
  	  });
  	} else {
  	  EventEmitter.defaultMaxListeners = defaultMaxListeners;
  	}

  	// Obviously not all Emitters should be limited to 10. This function allows
  	// that to be increased. Set to zero for unlimited.
  	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  	  if (typeof n !== 'number' || n < 0 || isNaN(n))
  	    { throw new TypeError('"n" argument must be a positive number'); }
  	  this._maxListeners = n;
  	  return this;
  	};

  	function $getMaxListeners(that) {
  	  if (that._maxListeners === undefined)
  	    { return EventEmitter.defaultMaxListeners; }
  	  return that._maxListeners;
  	}

  	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  	  return $getMaxListeners(this);
  	};

  	// These standalone emit* functions are used to optimize calling of event
  	// handlers for fast cases because emit() itself often has a variable number of
  	// arguments and can be deoptimized because of that. These functions always have
  	// the same number of arguments and thus do not get deoptimized, so the code
  	// inside them can execute faster.
  	function emitNone(handler, isFn, self) {
  	  if (isFn)
  	    { handler.call(self); }
  	  else {
  	    var len = handler.length;
  	    var listeners = arrayClone(handler, len);
  	    for (var i = 0; i < len; ++i)
  	      { listeners[i].call(self); }
  	  }
  	}
  	function emitOne(handler, isFn, self, arg1) {
  	  if (isFn)
  	    { handler.call(self, arg1); }
  	  else {
  	    var len = handler.length;
  	    var listeners = arrayClone(handler, len);
  	    for (var i = 0; i < len; ++i)
  	      { listeners[i].call(self, arg1); }
  	  }
  	}
  	function emitTwo(handler, isFn, self, arg1, arg2) {
  	  if (isFn)
  	    { handler.call(self, arg1, arg2); }
  	  else {
  	    var len = handler.length;
  	    var listeners = arrayClone(handler, len);
  	    for (var i = 0; i < len; ++i)
  	      { listeners[i].call(self, arg1, arg2); }
  	  }
  	}
  	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  	  if (isFn)
  	    { handler.call(self, arg1, arg2, arg3); }
  	  else {
  	    var len = handler.length;
  	    var listeners = arrayClone(handler, len);
  	    for (var i = 0; i < len; ++i)
  	      { listeners[i].call(self, arg1, arg2, arg3); }
  	  }
  	}

  	function emitMany(handler, isFn, self, args) {
  	  if (isFn)
  	    { handler.apply(self, args); }
  	  else {
  	    var len = handler.length;
  	    var listeners = arrayClone(handler, len);
  	    for (var i = 0; i < len; ++i)
  	      { listeners[i].apply(self, args); }
  	  }
  	}

  	EventEmitter.prototype.emit = function emit(type) {
  	  var arguments$1 = arguments;

  	  var er, handler, len, args, i, events;
  	  var doError = (type === 'error');

  	  events = this._events;
  	  if (events)
  	    { doError = (doError && events.error == null); }
  	  else if (!doError)
  	    { return false; }

  	  // If there is no 'error' event listener then throw.
  	  if (doError) {
  	    if (arguments.length > 1)
  	      { er = arguments[1]; }
  	    if (er instanceof Error) {
  	      throw er; // Unhandled 'error' event
  	    } else {
  	      // At least give some kind of context to the user
  	      var err = new Error('Unhandled "error" event. (' + er + ')');
  	      err.context = er;
  	      throw err;
  	    }
  	  }

  	  handler = events[type];

  	  if (!handler)
  	    { return false; }

  	  var isFn = typeof handler === 'function';
  	  len = arguments.length;
  	  switch (len) {
  	      // fast cases
  	    case 1:
  	      emitNone(handler, isFn, this);
  	      break;
  	    case 2:
  	      emitOne(handler, isFn, this, arguments[1]);
  	      break;
  	    case 3:
  	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
  	      break;
  	    case 4:
  	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
  	      break;
  	      // slower
  	    default:
  	      args = new Array(len - 1);
  	      for (i = 1; i < len; i++)
  	        { args[i - 1] = arguments$1[i]; }
  	      emitMany(handler, isFn, this, args);
  	  }

  	  return true;
  	};

  	function _addListener(target, type, listener, prepend) {
  	  var m;
  	  var events;
  	  var existing;

  	  if (typeof listener !== 'function')
  	    { throw new TypeError('"listener" argument must be a function'); }

  	  events = target._events;
  	  if (!events) {
  	    events = target._events = objectCreate(null);
  	    target._eventsCount = 0;
  	  } else {
  	    // To avoid recursion in the case that type === "newListener"! Before
  	    // adding it to the listeners, first emit "newListener".
  	    if (events.newListener) {
  	      target.emit('newListener', type,
  	          listener.listener ? listener.listener : listener);

  	      // Re-assign `events` because a newListener handler could have caused the
  	      // this._events to be assigned to a new object
  	      events = target._events;
  	    }
  	    existing = events[type];
  	  }

  	  if (!existing) {
  	    // Optimize the case of one listener. Don't need the extra array object.
  	    existing = events[type] = listener;
  	    ++target._eventsCount;
  	  } else {
  	    if (typeof existing === 'function') {
  	      // Adding the second element, need to change to array.
  	      existing = events[type] =
  	          prepend ? [listener, existing] : [existing, listener];
  	    } else {
  	      // If we've already got an array, just append.
  	      if (prepend) {
  	        existing.unshift(listener);
  	      } else {
  	        existing.push(listener);
  	      }
  	    }

  	    // Check for listener leak
  	    if (!existing.warned) {
  	      m = $getMaxListeners(target);
  	      if (m && m > 0 && existing.length > m) {
  	        existing.warned = true;
  	        var w = new Error('Possible EventEmitter memory leak detected. ' +
  	            existing.length + ' "' + String(type) + '" listeners ' +
  	            'added. Use emitter.setMaxListeners() to ' +
  	            'increase limit.');
  	        w.name = 'MaxListenersExceededWarning';
  	        w.emitter = target;
  	        w.type = type;
  	        w.count = existing.length;
  	        if (typeof console === 'object' && console.warn) {
  	          console.warn('%s: %s', w.name, w.message);
  	        }
  	      }
  	    }
  	  }

  	  return target;
  	}

  	EventEmitter.prototype.addListener = function addListener(type, listener) {
  	  return _addListener(this, type, listener, false);
  	};

  	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  	EventEmitter.prototype.prependListener =
  	    function prependListener(type, listener) {
  	      return _addListener(this, type, listener, true);
  	    };

  	function onceWrapper() {
  	  var arguments$1 = arguments;

  	  if (!this.fired) {
  	    this.target.removeListener(this.type, this.wrapFn);
  	    this.fired = true;
  	    switch (arguments.length) {
  	      case 0:
  	        return this.listener.call(this.target);
  	      case 1:
  	        return this.listener.call(this.target, arguments[0]);
  	      case 2:
  	        return this.listener.call(this.target, arguments[0], arguments[1]);
  	      case 3:
  	        return this.listener.call(this.target, arguments[0], arguments[1],
  	            arguments[2]);
  	      default:
  	        var args = new Array(arguments.length);
  	        for (var i = 0; i < args.length; ++i)
  	          { args[i] = arguments$1[i]; }
  	        this.listener.apply(this.target, args);
  	    }
  	  }
  	}

  	function _onceWrap(target, type, listener) {
  	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  	  var wrapped = bind.call(onceWrapper, state);
  	  wrapped.listener = listener;
  	  state.wrapFn = wrapped;
  	  return wrapped;
  	}

  	EventEmitter.prototype.once = function once(type, listener) {
  	  if (typeof listener !== 'function')
  	    { throw new TypeError('"listener" argument must be a function'); }
  	  this.on(type, _onceWrap(this, type, listener));
  	  return this;
  	};

  	EventEmitter.prototype.prependOnceListener =
  	    function prependOnceListener(type, listener) {
  	      if (typeof listener !== 'function')
  	        { throw new TypeError('"listener" argument must be a function'); }
  	      this.prependListener(type, _onceWrap(this, type, listener));
  	      return this;
  	    };

  	// Emits a 'removeListener' event if and only if the listener was removed.
  	EventEmitter.prototype.removeListener =
  	    function removeListener(type, listener) {
  	      var list, events, position, i, originalListener;

  	      if (typeof listener !== 'function')
  	        { throw new TypeError('"listener" argument must be a function'); }

  	      events = this._events;
  	      if (!events)
  	        { return this; }

  	      list = events[type];
  	      if (!list)
  	        { return this; }

  	      if (list === listener || list.listener === listener) {
  	        if (--this._eventsCount === 0)
  	          { this._events = objectCreate(null); }
  	        else {
  	          delete events[type];
  	          if (events.removeListener)
  	            { this.emit('removeListener', type, list.listener || listener); }
  	        }
  	      } else if (typeof list !== 'function') {
  	        position = -1;

  	        for (i = list.length - 1; i >= 0; i--) {
  	          if (list[i] === listener || list[i].listener === listener) {
  	            originalListener = list[i].listener;
  	            position = i;
  	            break;
  	          }
  	        }

  	        if (position < 0)
  	          { return this; }

  	        if (position === 0)
  	          { list.shift(); }
  	        else
  	          { spliceOne(list, position); }

  	        if (list.length === 1)
  	          { events[type] = list[0]; }

  	        if (events.removeListener)
  	          { this.emit('removeListener', type, originalListener || listener); }
  	      }

  	      return this;
  	    };

  	EventEmitter.prototype.removeAllListeners =
  	    function removeAllListeners(type) {
  	      var listeners, events, i;

  	      events = this._events;
  	      if (!events)
  	        { return this; }

  	      // not listening for removeListener, no need to emit
  	      if (!events.removeListener) {
  	        if (arguments.length === 0) {
  	          this._events = objectCreate(null);
  	          this._eventsCount = 0;
  	        } else if (events[type]) {
  	          if (--this._eventsCount === 0)
  	            { this._events = objectCreate(null); }
  	          else
  	            { delete events[type]; }
  	        }
  	        return this;
  	      }

  	      // emit removeListener for all listeners on all events
  	      if (arguments.length === 0) {
  	        var keys = objectKeys(events);
  	        var key;
  	        for (i = 0; i < keys.length; ++i) {
  	          key = keys[i];
  	          if (key === 'removeListener') { continue; }
  	          this.removeAllListeners(key);
  	        }
  	        this.removeAllListeners('removeListener');
  	        this._events = objectCreate(null);
  	        this._eventsCount = 0;
  	        return this;
  	      }

  	      listeners = events[type];

  	      if (typeof listeners === 'function') {
  	        this.removeListener(type, listeners);
  	      } else if (listeners) {
  	        // LIFO order
  	        for (i = listeners.length - 1; i >= 0; i--) {
  	          this.removeListener(type, listeners[i]);
  	        }
  	      }

  	      return this;
  	    };

  	function _listeners(target, type, unwrap) {
  	  var events = target._events;

  	  if (!events)
  	    { return []; }

  	  var evlistener = events[type];
  	  if (!evlistener)
  	    { return []; }

  	  if (typeof evlistener === 'function')
  	    { return unwrap ? [evlistener.listener || evlistener] : [evlistener]; }

  	  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  	}

  	EventEmitter.prototype.listeners = function listeners(type) {
  	  return _listeners(this, type, true);
  	};

  	EventEmitter.prototype.rawListeners = function rawListeners(type) {
  	  return _listeners(this, type, false);
  	};

  	EventEmitter.listenerCount = function(emitter, type) {
  	  if (typeof emitter.listenerCount === 'function') {
  	    return emitter.listenerCount(type);
  	  } else {
  	    return listenerCount.call(emitter, type);
  	  }
  	};

  	EventEmitter.prototype.listenerCount = listenerCount;
  	function listenerCount(type) {
  	  var events = this._events;

  	  if (events) {
  	    var evlistener = events[type];

  	    if (typeof evlistener === 'function') {
  	      return 1;
  	    } else if (evlistener) {
  	      return evlistener.length;
  	    }
  	  }

  	  return 0;
  	}

  	EventEmitter.prototype.eventNames = function eventNames() {
  	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  	};

  	// About 1.5x faster than the two-arg version of Array#splice().
  	function spliceOne(list, index) {
  	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
  	    { list[i] = list[k]; }
  	  list.pop();
  	}

  	function arrayClone(arr, n) {
  	  var copy = new Array(n);
  	  for (var i = 0; i < n; ++i)
  	    { copy[i] = arr[i]; }
  	  return copy;
  	}

  	function unwrapListeners(arr) {
  	  var ret = new Array(arr.length);
  	  for (var i = 0; i < ret.length; ++i) {
  	    ret[i] = arr[i].listener || arr[i];
  	  }
  	  return ret;
  	}

  	function objectCreatePolyfill(proto) {
  	  var F = function() {};
  	  F.prototype = proto;
  	  return new F;
  	}
  	function objectKeysPolyfill(obj) {
  	  for (var k in obj) { if (Object.prototype.hasOwnProperty.call(obj, k)) ; }
  	  return k;
  	}
  	function functionBindPolyfill(context) {
  	  var fn = this;
  	  return function () {
  	    return fn.apply(context, arguments);
  	  };
  	}

  	},{}],92:[function(require,module,exports){
  	var http = require('http');
  	var url = require('url');

  	var https = module.exports;

  	for (var key in http) {
  	  if (http.hasOwnProperty(key)) { https[key] = http[key]; }
  	}

  	https.request = function (params, cb) {
  	  params = validateParams(params);
  	  return http.request.call(this, params, cb)
  	};

  	https.get = function (params, cb) {
  	  params = validateParams(params);
  	  return http.get.call(this, params, cb)
  	};

  	function validateParams (params) {
  	  if (typeof params === 'string') {
  	    params = url.parse(params);
  	  }
  	  if (!params.protocol) {
  	    params.protocol = 'https:';
  	  }
  	  if (params.protocol !== 'https:') {
  	    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
  	  }
  	  return params
  	}

  	},{"http":114,"url":121}],93:[function(require,module,exports){
  	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  	  var e, m;
  	  var eLen = (nBytes * 8) - mLen - 1;
  	  var eMax = (1 << eLen) - 1;
  	  var eBias = eMax >> 1;
  	  var nBits = -7;
  	  var i = isLE ? (nBytes - 1) : 0;
  	  var d = isLE ? -1 : 1;
  	  var s = buffer[offset + i];

  	  i += d;

  	  e = s & ((1 << (-nBits)) - 1);
  	  s >>= (-nBits);
  	  nBits += eLen;
  	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  	  m = e & ((1 << (-nBits)) - 1);
  	  e >>= (-nBits);
  	  nBits += mLen;
  	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  	  if (e === 0) {
  	    e = 1 - eBias;
  	  } else if (e === eMax) {
  	    return m ? NaN : ((s ? -1 : 1) * Infinity)
  	  } else {
  	    m = m + Math.pow(2, mLen);
  	    e = e - eBias;
  	  }
  	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  	};

  	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  	  var e, m, c;
  	  var eLen = (nBytes * 8) - mLen - 1;
  	  var eMax = (1 << eLen) - 1;
  	  var eBias = eMax >> 1;
  	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  	  var i = isLE ? 0 : (nBytes - 1);
  	  var d = isLE ? 1 : -1;
  	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  	  value = Math.abs(value);

  	  if (isNaN(value) || value === Infinity) {
  	    m = isNaN(value) ? 1 : 0;
  	    e = eMax;
  	  } else {
  	    e = Math.floor(Math.log(value) / Math.LN2);
  	    if (value * (c = Math.pow(2, -e)) < 1) {
  	      e--;
  	      c *= 2;
  	    }
  	    if (e + eBias >= 1) {
  	      value += rt / c;
  	    } else {
  	      value += rt * Math.pow(2, 1 - eBias);
  	    }
  	    if (value * c >= 2) {
  	      e++;
  	      c /= 2;
  	    }

  	    if (e + eBias >= eMax) {
  	      m = 0;
  	      e = eMax;
  	    } else if (e + eBias >= 1) {
  	      m = ((value * c) - 1) * Math.pow(2, mLen);
  	      e = e + eBias;
  	    } else {
  	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
  	      e = 0;
  	    }
  	  }

  	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  	  e = (e << mLen) | m;
  	  eLen += mLen;
  	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  	  buffer[offset + i - d] |= s * 128;
  	};

  	},{}],94:[function(require,module,exports){
  	if (typeof Object.create === 'function') {
  	  // implementation from standard node.js 'util' module
  	  module.exports = function inherits(ctor, superCtor) {
  	    ctor.super_ = superCtor;
  	    ctor.prototype = Object.create(superCtor.prototype, {
  	      constructor: {
  	        value: ctor,
  	        enumerable: false,
  	        writable: true,
  	        configurable: true
  	      }
  	    });
  	  };
  	} else {
  	  // old school shim for old browsers
  	  module.exports = function inherits(ctor, superCtor) {
  	    ctor.super_ = superCtor;
  	    var TempCtor = function () {};
  	    TempCtor.prototype = superCtor.prototype;
  	    ctor.prototype = new TempCtor();
  	    ctor.prototype.constructor = ctor;
  	  };
  	}

  	},{}],95:[function(require,module,exports){
  	/*!
  	 * Determine if an object is a Buffer
  	 *
  	 * @author   Feross Aboukhadijeh <https://feross.org>
  	 * @license  MIT
  	 */

  	// The _isBuffer check is for Safari 5-7 support, because it's missing
  	// Object.prototype.constructor. Remove this eventually
  	module.exports = function (obj) {
  	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
  	};

  	function isBuffer (obj) {
  	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  	}

  	// For Node v0.10 support. Remove this eventually.
  	function isSlowBuffer (obj) {
  	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
  	}

  	},{}],96:[function(require,module,exports){
  	var toString = {}.toString;

  	module.exports = Array.isArray || function (arr) {
  	  return toString.call(arr) == '[object Array]';
  	};

  	},{}],97:[function(require,module,exports){
  	exports.endianness = function () { return 'LE' };

  	exports.hostname = function () {
  	    if (typeof location !== 'undefined') {
  	        return location.hostname
  	    }
  	    else { return ''; }
  	};

  	exports.loadavg = function () { return [] };

  	exports.uptime = function () { return 0 };

  	exports.freemem = function () {
  	    return Number.MAX_VALUE;
  	};

  	exports.totalmem = function () {
  	    return Number.MAX_VALUE;
  	};

  	exports.cpus = function () { return [] };

  	exports.type = function () { return 'Browser' };

  	exports.release = function () {
  	    if (typeof navigator !== 'undefined') {
  	        return navigator.appVersion;
  	    }
  	    return '';
  	};

  	exports.networkInterfaces
  	= exports.getNetworkInterfaces
  	= function () { return {} };

  	exports.arch = function () { return 'javascript' };

  	exports.platform = function () { return 'browser' };

  	exports.tmpdir = exports.tmpDir = function () {
  	    return '/tmp';
  	};

  	exports.EOL = '\n';

  	exports.homedir = function () {
  		return '/'
  	};

  	},{}],98:[function(require,module,exports){
  	(function (process){

  	if (!process.version ||
  	    process.version.indexOf('v0.') === 0 ||
  	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  	  module.exports = { nextTick: nextTick };
  	} else {
  	  module.exports = process;
  	}

  	function nextTick(fn, arg1, arg2, arg3) {
  	  var arguments$1 = arguments;

  	  if (typeof fn !== 'function') {
  	    throw new TypeError('"callback" argument must be a function');
  	  }
  	  var len = arguments.length;
  	  var args, i;
  	  switch (len) {
  	  case 0:
  	  case 1:
  	    return process.nextTick(fn);
  	  case 2:
  	    return process.nextTick(function afterTickOne() {
  	      fn.call(null, arg1);
  	    });
  	  case 3:
  	    return process.nextTick(function afterTickTwo() {
  	      fn.call(null, arg1, arg2);
  	    });
  	  case 4:
  	    return process.nextTick(function afterTickThree() {
  	      fn.call(null, arg1, arg2, arg3);
  	    });
  	  default:
  	    args = new Array(len - 1);
  	    i = 0;
  	    while (i < args.length) {
  	      args[i++] = arguments$1[i];
  	    }
  	    return process.nextTick(function afterTick() {
  	      fn.apply(null, args);
  	    });
  	  }
  	}


  	}).call(this,require('_process'));

  	},{"_process":99}],99:[function(require,module,exports){
  	// shim for using process in browser
  	var process = module.exports = {};

  	// cached from whatever global is present so that test runners that stub it
  	// don't break things.  But we need to wrap it in a try catch in case it is
  	// wrapped in strict mode code which doesn't define any globals.  It's inside a
  	// function because try/catches deoptimize in certain engines.

  	var cachedSetTimeout;
  	var cachedClearTimeout;

  	function defaultSetTimout() {
  	    throw new Error('setTimeout has not been defined');
  	}
  	function defaultClearTimeout () {
  	    throw new Error('clearTimeout has not been defined');
  	}
  	(function () {
  	    try {
  	        if (typeof setTimeout === 'function') {
  	            cachedSetTimeout = setTimeout;
  	        } else {
  	            cachedSetTimeout = defaultSetTimout;
  	        }
  	    } catch (e) {
  	        cachedSetTimeout = defaultSetTimout;
  	    }
  	    try {
  	        if (typeof clearTimeout === 'function') {
  	            cachedClearTimeout = clearTimeout;
  	        } else {
  	            cachedClearTimeout = defaultClearTimeout;
  	        }
  	    } catch (e) {
  	        cachedClearTimeout = defaultClearTimeout;
  	    }
  	} ());
  	function runTimeout(fun) {
  	    if (cachedSetTimeout === setTimeout) {
  	        //normal enviroments in sane situations
  	        return setTimeout(fun, 0);
  	    }
  	    // if setTimeout wasn't available but was latter defined
  	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
  	        cachedSetTimeout = setTimeout;
  	        return setTimeout(fun, 0);
  	    }
  	    try {
  	        // when when somebody has screwed with setTimeout but no I.E. maddness
  	        return cachedSetTimeout(fun, 0);
  	    } catch(e){
  	        try {
  	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
  	            return cachedSetTimeout.call(null, fun, 0);
  	        } catch(e){
  	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
  	            return cachedSetTimeout.call(this, fun, 0);
  	        }
  	    }


  	}
  	function runClearTimeout(marker) {
  	    if (cachedClearTimeout === clearTimeout) {
  	        //normal enviroments in sane situations
  	        return clearTimeout(marker);
  	    }
  	    // if clearTimeout wasn't available but was latter defined
  	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
  	        cachedClearTimeout = clearTimeout;
  	        return clearTimeout(marker);
  	    }
  	    try {
  	        // when when somebody has screwed with setTimeout but no I.E. maddness
  	        return cachedClearTimeout(marker);
  	    } catch (e){
  	        try {
  	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
  	            return cachedClearTimeout.call(null, marker);
  	        } catch (e){
  	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
  	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
  	            return cachedClearTimeout.call(this, marker);
  	        }
  	    }



  	}
  	var queue = [];
  	var draining = false;
  	var currentQueue;
  	var queueIndex = -1;

  	function cleanUpNextTick() {
  	    if (!draining || !currentQueue) {
  	        return;
  	    }
  	    draining = false;
  	    if (currentQueue.length) {
  	        queue = currentQueue.concat(queue);
  	    } else {
  	        queueIndex = -1;
  	    }
  	    if (queue.length) {
  	        drainQueue();
  	    }
  	}

  	function drainQueue() {
  	    if (draining) {
  	        return;
  	    }
  	    var timeout = runTimeout(cleanUpNextTick);
  	    draining = true;

  	    var len = queue.length;
  	    while(len) {
  	        currentQueue = queue;
  	        queue = [];
  	        while (++queueIndex < len) {
  	            if (currentQueue) {
  	                currentQueue[queueIndex].run();
  	            }
  	        }
  	        queueIndex = -1;
  	        len = queue.length;
  	    }
  	    currentQueue = null;
  	    draining = false;
  	    runClearTimeout(timeout);
  	}

  	process.nextTick = function (fun) {
  	    var arguments$1 = arguments;

  	    var args = new Array(arguments.length - 1);
  	    if (arguments.length > 1) {
  	        for (var i = 1; i < arguments.length; i++) {
  	            args[i - 1] = arguments$1[i];
  	        }
  	    }
  	    queue.push(new Item(fun, args));
  	    if (queue.length === 1 && !draining) {
  	        runTimeout(drainQueue);
  	    }
  	};

  	// v8 likes predictible objects
  	function Item(fun, array) {
  	    this.fun = fun;
  	    this.array = array;
  	}
  	Item.prototype.run = function () {
  	    this.fun.apply(null, this.array);
  	};
  	process.title = 'browser';
  	process.browser = true;
  	process.env = {};
  	process.argv = [];
  	process.version = ''; // empty string to avoid regexp issues
  	process.versions = {};

  	function noop() {}

  	process.on = noop;
  	process.addListener = noop;
  	process.once = noop;
  	process.off = noop;
  	process.removeListener = noop;
  	process.removeAllListeners = noop;
  	process.emit = noop;
  	process.prependListener = noop;
  	process.prependOnceListener = noop;

  	process.listeners = function (name) { return [] };

  	process.binding = function (name) {
  	    throw new Error('process.binding is not supported');
  	};

  	process.cwd = function () { return '/' };
  	process.chdir = function (dir) {
  	    throw new Error('process.chdir is not supported');
  	};
  	process.umask = function() { return 0; };

  	},{}],100:[function(require,module,exports){
  	(function (global){
  	(function(root) {

  		/** Detect free variables */
  		var freeExports = typeof exports == 'object' && exports &&
  			!exports.nodeType && exports;
  		var freeModule = typeof module == 'object' && module &&
  			!module.nodeType && module;
  		var freeGlobal = typeof global == 'object' && global;
  		if (
  			freeGlobal.global === freeGlobal ||
  			freeGlobal.window === freeGlobal ||
  			freeGlobal.self === freeGlobal
  		) {
  			root = freeGlobal;
  		}

  		/**
  		 * The `punycode` object.
  		 * @name punycode
  		 * @type Object
  		 */
  		var punycode,

  		/** Highest positive signed 32-bit float value */
  		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

  		/** Bootstring parameters */
  		base = 36,
  		tMin = 1,
  		tMax = 26,
  		skew = 38,
  		damp = 700,
  		initialBias = 72,
  		initialN = 128, // 0x80
  		delimiter = '-', // '\x2D'

  		/** Regular expressions */
  		regexPunycode = /^xn--/,
  		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
  		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

  		/** Error messages */
  		errors = {
  			'overflow': 'Overflow: input needs wider integers to process',
  			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  			'invalid-input': 'Invalid input'
  		},

  		/** Convenience shortcuts */
  		baseMinusTMin = base - tMin,
  		floor = Math.floor,
  		stringFromCharCode = String.fromCharCode,

  		/** Temporary variable */
  		key;

  		/*--------------------------------------------------------------------------*/

  		/**
  		 * A generic error utility function.
  		 * @private
  		 * @param {String} type The error type.
  		 * @returns {Error} Throws a `RangeError` with the applicable error message.
  		 */
  		function error(type) {
  			throw new RangeError(errors[type]);
  		}

  		/**
  		 * A generic `Array#map` utility function.
  		 * @private
  		 * @param {Array} array The array to iterate over.
  		 * @param {Function} callback The function that gets called for every array
  		 * item.
  		 * @returns {Array} A new array of values returned by the callback function.
  		 */
  		function map(array, fn) {
  			var length = array.length;
  			var result = [];
  			while (length--) {
  				result[length] = fn(array[length]);
  			}
  			return result;
  		}

  		/**
  		 * A simple `Array#map`-like wrapper to work with domain name strings or email
  		 * addresses.
  		 * @private
  		 * @param {String} domain The domain name or email address.
  		 * @param {Function} callback The function that gets called for every
  		 * character.
  		 * @returns {Array} A new string of characters returned by the callback
  		 * function.
  		 */
  		function mapDomain(string, fn) {
  			var parts = string.split('@');
  			var result = '';
  			if (parts.length > 1) {
  				// In email addresses, only the domain name should be punycoded. Leave
  				// the local part (i.e. everything up to `@`) intact.
  				result = parts[0] + '@';
  				string = parts[1];
  			}
  			// Avoid `split(regex)` for IE8 compatibility. See #17.
  			string = string.replace(regexSeparators, '\x2E');
  			var labels = string.split('.');
  			var encoded = map(labels, fn).join('.');
  			return result + encoded;
  		}

  		/**
  		 * Creates an array containing the numeric code points of each Unicode
  		 * character in the string. While JavaScript uses UCS-2 internally,
  		 * this function will convert a pair of surrogate halves (each of which
  		 * UCS-2 exposes as separate characters) into a single code point,
  		 * matching UTF-16.
  		 * @see `punycode.ucs2.encode`
  		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  		 * @memberOf punycode.ucs2
  		 * @name decode
  		 * @param {String} string The Unicode input string (UCS-2).
  		 * @returns {Array} The new array of code points.
  		 */
  		function ucs2decode(string) {
  			var output = [],
  			    counter = 0,
  			    length = string.length,
  			    value,
  			    extra;
  			while (counter < length) {
  				value = string.charCodeAt(counter++);
  				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  					// high surrogate, and there is a next character
  					extra = string.charCodeAt(counter++);
  					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  					} else {
  						// unmatched surrogate; only append this code unit, in case the next
  						// code unit is the high surrogate of a surrogate pair
  						output.push(value);
  						counter--;
  					}
  				} else {
  					output.push(value);
  				}
  			}
  			return output;
  		}

  		/**
  		 * Creates a string based on an array of numeric code points.
  		 * @see `punycode.ucs2.decode`
  		 * @memberOf punycode.ucs2
  		 * @name encode
  		 * @param {Array} codePoints The array of numeric code points.
  		 * @returns {String} The new Unicode string (UCS-2).
  		 */
  		function ucs2encode(array) {
  			return map(array, function(value) {
  				var output = '';
  				if (value > 0xFFFF) {
  					value -= 0x10000;
  					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  					value = 0xDC00 | value & 0x3FF;
  				}
  				output += stringFromCharCode(value);
  				return output;
  			}).join('');
  		}

  		/**
  		 * Converts a basic code point into a digit/integer.
  		 * @see `digitToBasic()`
  		 * @private
  		 * @param {Number} codePoint The basic numeric code point value.
  		 * @returns {Number} The numeric value of a basic code point (for use in
  		 * representing integers) in the range `0` to `base - 1`, or `base` if
  		 * the code point does not represent a value.
  		 */
  		function basicToDigit(codePoint) {
  			if (codePoint - 48 < 10) {
  				return codePoint - 22;
  			}
  			if (codePoint - 65 < 26) {
  				return codePoint - 65;
  			}
  			if (codePoint - 97 < 26) {
  				return codePoint - 97;
  			}
  			return base;
  		}

  		/**
  		 * Converts a digit/integer into a basic code point.
  		 * @see `basicToDigit()`
  		 * @private
  		 * @param {Number} digit The numeric value of a basic code point.
  		 * @returns {Number} The basic code point whose value (when used for
  		 * representing integers) is `digit`, which needs to be in the range
  		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  		 * used; else, the lowercase form is used. The behavior is undefined
  		 * if `flag` is non-zero and `digit` has no uppercase form.
  		 */
  		function digitToBasic(digit, flag) {
  			//  0..25 map to ASCII a..z or A..Z
  			// 26..35 map to ASCII 0..9
  			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  		}

  		/**
  		 * Bias adaptation function as per section 3.4 of RFC 3492.
  		 * https://tools.ietf.org/html/rfc3492#section-3.4
  		 * @private
  		 */
  		function adapt(delta, numPoints, firstTime) {
  			var k = 0;
  			delta = firstTime ? floor(delta / damp) : delta >> 1;
  			delta += floor(delta / numPoints);
  			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  				delta = floor(delta / baseMinusTMin);
  			}
  			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  		}

  		/**
  		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  		 * symbols.
  		 * @memberOf punycode
  		 * @param {String} input The Punycode string of ASCII-only symbols.
  		 * @returns {String} The resulting string of Unicode symbols.
  		 */
  		function decode(input) {
  			// Don't use UCS-2
  			var output = [],
  			    inputLength = input.length,
  			    out,
  			    i = 0,
  			    n = initialN,
  			    bias = initialBias,
  			    basic,
  			    j,
  			    index,
  			    oldi,
  			    w,
  			    k,
  			    digit,
  			    t,
  			    /** Cached calculation results */
  			    baseMinusT;

  			// Handle the basic code points: let `basic` be the number of input code
  			// points before the last delimiter, or `0` if there is none, then copy
  			// the first basic code points to the output.

  			basic = input.lastIndexOf(delimiter);
  			if (basic < 0) {
  				basic = 0;
  			}

  			for (j = 0; j < basic; ++j) {
  				// if it's not a basic code point
  				if (input.charCodeAt(j) >= 0x80) {
  					error('not-basic');
  				}
  				output.push(input.charCodeAt(j));
  			}

  			// Main decoding loop: start just after the last delimiter if any basic code
  			// points were copied; start at the beginning otherwise.

  			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

  				// `index` is the index of the next character to be consumed.
  				// Decode a generalized variable-length integer into `delta`,
  				// which gets added to `i`. The overflow checking is easier
  				// if we increase `i` as we go, then subtract off its starting
  				// value at the end to obtain `delta`.
  				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

  					if (index >= inputLength) {
  						error('invalid-input');
  					}

  					digit = basicToDigit(input.charCodeAt(index++));

  					if (digit >= base || digit > floor((maxInt - i) / w)) {
  						error('overflow');
  					}

  					i += digit * w;
  					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

  					if (digit < t) {
  						break;
  					}

  					baseMinusT = base - t;
  					if (w > floor(maxInt / baseMinusT)) {
  						error('overflow');
  					}

  					w *= baseMinusT;

  				}

  				out = output.length + 1;
  				bias = adapt(i - oldi, out, oldi == 0);

  				// `i` was supposed to wrap around from `out` to `0`,
  				// incrementing `n` each time, so we'll fix that now:
  				if (floor(i / out) > maxInt - n) {
  					error('overflow');
  				}

  				n += floor(i / out);
  				i %= out;

  				// Insert `n` at position `i` of the output
  				output.splice(i++, 0, n);

  			}

  			return ucs2encode(output);
  		}

  		/**
  		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
  		 * Punycode string of ASCII-only symbols.
  		 * @memberOf punycode
  		 * @param {String} input The string of Unicode symbols.
  		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
  		 */
  		function encode(input) {
  			var n,
  			    delta,
  			    handledCPCount,
  			    basicLength,
  			    bias,
  			    j,
  			    m,
  			    q,
  			    k,
  			    t,
  			    currentValue,
  			    output = [],
  			    /** `inputLength` will hold the number of code points in `input`. */
  			    inputLength,
  			    /** Cached calculation results */
  			    handledCPCountPlusOne,
  			    baseMinusT,
  			    qMinusT;

  			// Convert the input in UCS-2 to Unicode
  			input = ucs2decode(input);

  			// Cache the length
  			inputLength = input.length;

  			// Initialize the state
  			n = initialN;
  			delta = 0;
  			bias = initialBias;

  			// Handle the basic code points
  			for (j = 0; j < inputLength; ++j) {
  				currentValue = input[j];
  				if (currentValue < 0x80) {
  					output.push(stringFromCharCode(currentValue));
  				}
  			}

  			handledCPCount = basicLength = output.length;

  			// `handledCPCount` is the number of code points that have been handled;
  			// `basicLength` is the number of basic code points.

  			// Finish the basic string - if it is not empty - with a delimiter
  			if (basicLength) {
  				output.push(delimiter);
  			}

  			// Main encoding loop:
  			while (handledCPCount < inputLength) {

  				// All non-basic code points < n have been handled already. Find the next
  				// larger one:
  				for (m = maxInt, j = 0; j < inputLength; ++j) {
  					currentValue = input[j];
  					if (currentValue >= n && currentValue < m) {
  						m = currentValue;
  					}
  				}

  				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  				// but guard against overflow
  				handledCPCountPlusOne = handledCPCount + 1;
  				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  					error('overflow');
  				}

  				delta += (m - n) * handledCPCountPlusOne;
  				n = m;

  				for (j = 0; j < inputLength; ++j) {
  					currentValue = input[j];

  					if (currentValue < n && ++delta > maxInt) {
  						error('overflow');
  					}

  					if (currentValue == n) {
  						// Represent delta as a generalized variable-length integer
  						for (q = delta, k = base; /* no condition */; k += base) {
  							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  							if (q < t) {
  								break;
  							}
  							qMinusT = q - t;
  							baseMinusT = base - t;
  							output.push(
  								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  							);
  							q = floor(qMinusT / baseMinusT);
  						}

  						output.push(stringFromCharCode(digitToBasic(q, 0)));
  						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  						delta = 0;
  						++handledCPCount;
  					}
  				}

  				++delta;
  				++n;

  			}
  			return output.join('');
  		}

  		/**
  		 * Converts a Punycode string representing a domain name or an email address
  		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  		 * it doesn't matter if you call it on a string that has already been
  		 * converted to Unicode.
  		 * @memberOf punycode
  		 * @param {String} input The Punycoded domain name or email address to
  		 * convert to Unicode.
  		 * @returns {String} The Unicode representation of the given Punycode
  		 * string.
  		 */
  		function toUnicode(input) {
  			return mapDomain(input, function(string) {
  				return regexPunycode.test(string)
  					? decode(string.slice(4).toLowerCase())
  					: string;
  			});
  		}

  		/**
  		 * Converts a Unicode string representing a domain name or an email address to
  		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
  		 * i.e. it doesn't matter if you call it with a domain that's already in
  		 * ASCII.
  		 * @memberOf punycode
  		 * @param {String} input The domain name or email address to convert, as a
  		 * Unicode string.
  		 * @returns {String} The Punycode representation of the given domain name or
  		 * email address.
  		 */
  		function toASCII(input) {
  			return mapDomain(input, function(string) {
  				return regexNonASCII.test(string)
  					? 'xn--' + encode(string)
  					: string;
  			});
  		}

  		/*--------------------------------------------------------------------------*/

  		/** Define the public API */
  		punycode = {
  			/**
  			 * A string representing the current Punycode.js version number.
  			 * @memberOf punycode
  			 * @type String
  			 */
  			'version': '1.4.1',
  			/**
  			 * An object of methods to convert from JavaScript's internal character
  			 * representation (UCS-2) to Unicode code points, and back.
  			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  			 * @memberOf punycode
  			 * @type Object
  			 */
  			'ucs2': {
  				'decode': ucs2decode,
  				'encode': ucs2encode
  			},
  			'decode': decode,
  			'encode': encode,
  			'toASCII': toASCII,
  			'toUnicode': toUnicode
  		};

  		/** Expose `punycode` */
  		// Some AMD build optimizers, like r.js, check for specific condition patterns
  		// like the following:
  		if (freeExports && freeModule) {
  			if (module.exports == freeExports) {
  				// in Node.js, io.js, or RingoJS v0.8.0+
  				freeModule.exports = punycode;
  			} else {
  				// in Narwhal or RingoJS v0.7.0-
  				for (key in punycode) {
  					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
  				}
  			}
  		} else {
  			// in Rhino or a web browser
  			root.punycode = punycode;
  		}

  	}(this));

  	}).call(this,typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{}],101:[function(require,module,exports){

  	// If obj.hasOwnProperty has been overridden, then calling
  	// obj.hasOwnProperty(prop) will break.
  	// See: https://github.com/joyent/node/issues/1707
  	function hasOwnProperty(obj, prop) {
  	  return Object.prototype.hasOwnProperty.call(obj, prop);
  	}

  	module.exports = function(qs, sep, eq, options) {
  	  sep = sep || '&';
  	  eq = eq || '=';
  	  var obj = {};

  	  if (typeof qs !== 'string' || qs.length === 0) {
  	    return obj;
  	  }

  	  var regexp = /\+/g;
  	  qs = qs.split(sep);

  	  var maxKeys = 1000;
  	  if (options && typeof options.maxKeys === 'number') {
  	    maxKeys = options.maxKeys;
  	  }

  	  var len = qs.length;
  	  // maxKeys <= 0 means that we should not limit keys count
  	  if (maxKeys > 0 && len > maxKeys) {
  	    len = maxKeys;
  	  }

  	  for (var i = 0; i < len; ++i) {
  	    var x = qs[i].replace(regexp, '%20'),
  	        idx = x.indexOf(eq),
  	        kstr, vstr, k, v;

  	    if (idx >= 0) {
  	      kstr = x.substr(0, idx);
  	      vstr = x.substr(idx + 1);
  	    } else {
  	      kstr = x;
  	      vstr = '';
  	    }

  	    k = decodeURIComponent(kstr);
  	    v = decodeURIComponent(vstr);

  	    if (!hasOwnProperty(obj, k)) {
  	      obj[k] = v;
  	    } else if (isArray(obj[k])) {
  	      obj[k].push(v);
  	    } else {
  	      obj[k] = [obj[k], v];
  	    }
  	  }

  	  return obj;
  	};

  	var isArray = Array.isArray || function (xs) {
  	  return Object.prototype.toString.call(xs) === '[object Array]';
  	};

  	},{}],102:[function(require,module,exports){

  	var stringifyPrimitive = function(v) {
  	  switch (typeof v) {
  	    case 'string':
  	      return v;

  	    case 'boolean':
  	      return v ? 'true' : 'false';

  	    case 'number':
  	      return isFinite(v) ? v : '';

  	    default:
  	      return '';
  	  }
  	};

  	module.exports = function(obj, sep, eq, name) {
  	  sep = sep || '&';
  	  eq = eq || '=';
  	  if (obj === null) {
  	    obj = undefined;
  	  }

  	  if (typeof obj === 'object') {
  	    return map(objectKeys(obj), function(k) {
  	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
  	      if (isArray(obj[k])) {
  	        return map(obj[k], function(v) {
  	          return ks + encodeURIComponent(stringifyPrimitive(v));
  	        }).join(sep);
  	      } else {
  	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
  	      }
  	    }).join(sep);

  	  }

  	  if (!name) { return ''; }
  	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
  	         encodeURIComponent(stringifyPrimitive(obj));
  	};

  	var isArray = Array.isArray || function (xs) {
  	  return Object.prototype.toString.call(xs) === '[object Array]';
  	};

  	function map (xs, f) {
  	  if (xs.map) { return xs.map(f); }
  	  var res = [];
  	  for (var i = 0; i < xs.length; i++) {
  	    res.push(f(xs[i], i));
  	  }
  	  return res;
  	}

  	var objectKeys = Object.keys || function (obj) {
  	  var res = [];
  	  for (var key in obj) {
  	    if (Object.prototype.hasOwnProperty.call(obj, key)) { res.push(key); }
  	  }
  	  return res;
  	};

  	},{}],103:[function(require,module,exports){

  	exports.decode = exports.parse = require('./decode');
  	exports.encode = exports.stringify = require('./encode');

  	},{"./decode":101,"./encode":102}],104:[function(require,module,exports){

  	/*<replacement>*/

  	var pna = require('process-nextick-args');
  	/*</replacement>*/

  	/*<replacement>*/
  	var objectKeys = Object.keys || function (obj) {
  	  var keys = [];
  	  for (var key in obj) {
  	    keys.push(key);
  	  }return keys;
  	};
  	/*</replacement>*/

  	module.exports = Duplex;

  	/*<replacement>*/
  	var util = require('core-util-is');
  	util.inherits = require('inherits');
  	/*</replacement>*/

  	var Readable = require('./_stream_readable');
  	var Writable = require('./_stream_writable');

  	util.inherits(Duplex, Readable);

  	{
  	  // avoid scope creep, the keys array can then be collected
  	  var keys = objectKeys(Writable.prototype);
  	  for (var v = 0; v < keys.length; v++) {
  	    var method = keys[v];
  	    if (!Duplex.prototype[method]) { Duplex.prototype[method] = Writable.prototype[method]; }
  	  }
  	}

  	function Duplex(options) {
  	  if (!(this instanceof Duplex)) { return new Duplex(options); }

  	  Readable.call(this, options);
  	  Writable.call(this, options);

  	  if (options && options.readable === false) { this.readable = false; }

  	  if (options && options.writable === false) { this.writable = false; }

  	  this.allowHalfOpen = true;
  	  if (options && options.allowHalfOpen === false) { this.allowHalfOpen = false; }

  	  this.once('end', onend);
  	}

  	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function () {
  	    return this._writableState.highWaterMark;
  	  }
  	});

  	// the no-half-open enforcer
  	function onend() {
  	  // if we allow half-open state, or if the writable side ended,
  	  // then we're ok.
  	  if (this.allowHalfOpen || this._writableState.ended) { return; }

  	  // no more data can be written.
  	  // But allow more writes to happen in this tick.
  	  pna.nextTick(onEndNT, this);
  	}

  	function onEndNT(self) {
  	  self.end();
  	}

  	Object.defineProperty(Duplex.prototype, 'destroyed', {
  	  get: function () {
  	    if (this._readableState === undefined || this._writableState === undefined) {
  	      return false;
  	    }
  	    return this._readableState.destroyed && this._writableState.destroyed;
  	  },
  	  set: function (value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (this._readableState === undefined || this._writableState === undefined) {
  	      return;
  	    }

  	    // backward compatibility, the user is explicitly
  	    // managing destroyed
  	    this._readableState.destroyed = value;
  	    this._writableState.destroyed = value;
  	  }
  	});

  	Duplex.prototype._destroy = function (err, cb) {
  	  this.push(null);
  	  this.end();

  	  pna.nextTick(cb, err);
  	};
  	},{"./_stream_readable":106,"./_stream_writable":108,"core-util-is":56,"inherits":94,"process-nextick-args":98}],105:[function(require,module,exports){

  	module.exports = PassThrough;

  	var Transform = require('./_stream_transform');

  	/*<replacement>*/
  	var util = require('core-util-is');
  	util.inherits = require('inherits');
  	/*</replacement>*/

  	util.inherits(PassThrough, Transform);

  	function PassThrough(options) {
  	  if (!(this instanceof PassThrough)) { return new PassThrough(options); }

  	  Transform.call(this, options);
  	}

  	PassThrough.prototype._transform = function (chunk, encoding, cb) {
  	  cb(null, chunk);
  	};
  	},{"./_stream_transform":107,"core-util-is":56,"inherits":94}],106:[function(require,module,exports){
  	(function (process,global){

  	/*<replacement>*/

  	var pna = require('process-nextick-args');
  	/*</replacement>*/

  	module.exports = Readable;

  	/*<replacement>*/
  	var isArray = require('isarray');
  	/*</replacement>*/

  	/*<replacement>*/
  	var Duplex;
  	/*</replacement>*/

  	Readable.ReadableState = ReadableState;

  	/*<replacement>*/
  	var EE = require('events').EventEmitter;

  	var EElistenerCount = function (emitter, type) {
  	  return emitter.listeners(type).length;
  	};
  	/*</replacement>*/

  	/*<replacement>*/
  	var Stream = require('./internal/streams/stream');
  	/*</replacement>*/

  	/*<replacement>*/

  	var Buffer = require('safe-buffer').Buffer;
  	var OurUint8Array = global.Uint8Array || function () {};
  	function _uint8ArrayToBuffer(chunk) {
  	  return Buffer.from(chunk);
  	}
  	function _isUint8Array(obj) {
  	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  	}

  	/*</replacement>*/

  	/*<replacement>*/
  	var util = require('core-util-is');
  	util.inherits = require('inherits');
  	/*</replacement>*/

  	/*<replacement>*/
  	var debugUtil = require('util');
  	var debug = void 0;
  	if (debugUtil && debugUtil.debuglog) {
  	  debug = debugUtil.debuglog('stream');
  	} else {
  	  debug = function () {};
  	}
  	/*</replacement>*/

  	var BufferList = require('./internal/streams/BufferList');
  	var destroyImpl = require('./internal/streams/destroy');
  	var StringDecoder;

  	util.inherits(Readable, Stream);

  	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

  	function prependListener(emitter, event, fn) {
  	  // Sadly this is not cacheable as some libraries bundle their own
  	  // event emitter implementation with them.
  	  if (typeof emitter.prependListener === 'function') { return emitter.prependListener(event, fn); }

  	  // This is a hack to make sure that our error handler is attached before any
  	  // userland ones.  NEVER DO THIS. This is here only because this code needs
  	  // to continue to work with older versions of Node.js that do not include
  	  // the prependListener() method. The goal is to eventually remove this hack.
  	  if (!emitter._events || !emitter._events[event]) { emitter.on(event, fn); }else if (isArray(emitter._events[event])) { emitter._events[event].unshift(fn); }else { emitter._events[event] = [fn, emitter._events[event]]; }
  	}

  	function ReadableState(options, stream) {
  	  Duplex = Duplex || require('./_stream_duplex');

  	  options = options || {};

  	  // Duplex streams are both readable and writable, but share
  	  // the same options object.
  	  // However, some cases require setting options to different
  	  // values for the readable and the writable sides of the duplex stream.
  	  // These options can be provided separately as readableXXX and writableXXX.
  	  var isDuplex = stream instanceof Duplex;

  	  // object stream flag. Used to make read(n) ignore n and to
  	  // make all the buffer merging and length checks go away
  	  this.objectMode = !!options.objectMode;

  	  if (isDuplex) { this.objectMode = this.objectMode || !!options.readableObjectMode; }

  	  // the point at which it stops calling _read() to fill the buffer
  	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  	  var hwm = options.highWaterMark;
  	  var readableHwm = options.readableHighWaterMark;
  	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  	  if (hwm || hwm === 0) { this.highWaterMark = hwm; }else if (isDuplex && (readableHwm || readableHwm === 0)) { this.highWaterMark = readableHwm; }else { this.highWaterMark = defaultHwm; }

  	  // cast to ints.
  	  this.highWaterMark = Math.floor(this.highWaterMark);

  	  // A linked list is used to store data chunks instead of an array because the
  	  // linked list can remove elements from the beginning faster than
  	  // array.shift()
  	  this.buffer = new BufferList();
  	  this.length = 0;
  	  this.pipes = null;
  	  this.pipesCount = 0;
  	  this.flowing = null;
  	  this.ended = false;
  	  this.endEmitted = false;
  	  this.reading = false;

  	  // a flag to be able to tell if the event 'readable'/'data' is emitted
  	  // immediately, or on a later tick.  We set this to true at first, because
  	  // any actions that shouldn't happen until "later" should generally also
  	  // not happen before the first read call.
  	  this.sync = true;

  	  // whenever we return null, then we set a flag to say
  	  // that we're awaiting a 'readable' event emission.
  	  this.needReadable = false;
  	  this.emittedReadable = false;
  	  this.readableListening = false;
  	  this.resumeScheduled = false;

  	  // has it been destroyed
  	  this.destroyed = false;

  	  // Crypto is kind of old and crusty.  Historically, its default string
  	  // encoding is 'binary' so we have to make this configurable.
  	  // Everything else in the universe uses 'utf8', though.
  	  this.defaultEncoding = options.defaultEncoding || 'utf8';

  	  // the number of writers that are awaiting a drain event in .pipe()s
  	  this.awaitDrain = 0;

  	  // if true, a maybeReadMore has been scheduled
  	  this.readingMore = false;

  	  this.decoder = null;
  	  this.encoding = null;
  	  if (options.encoding) {
  	    if (!StringDecoder) { StringDecoder = require('string_decoder/').StringDecoder; }
  	    this.decoder = new StringDecoder(options.encoding);
  	    this.encoding = options.encoding;
  	  }
  	}

  	function Readable(options) {
  	  Duplex = Duplex || require('./_stream_duplex');

  	  if (!(this instanceof Readable)) { return new Readable(options); }

  	  this._readableState = new ReadableState(options, this);

  	  // legacy
  	  this.readable = true;

  	  if (options) {
  	    if (typeof options.read === 'function') { this._read = options.read; }

  	    if (typeof options.destroy === 'function') { this._destroy = options.destroy; }
  	  }

  	  Stream.call(this);
  	}

  	Object.defineProperty(Readable.prototype, 'destroyed', {
  	  get: function () {
  	    if (this._readableState === undefined) {
  	      return false;
  	    }
  	    return this._readableState.destroyed;
  	  },
  	  set: function (value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (!this._readableState) {
  	      return;
  	    }

  	    // backward compatibility, the user is explicitly
  	    // managing destroyed
  	    this._readableState.destroyed = value;
  	  }
  	});

  	Readable.prototype.destroy = destroyImpl.destroy;
  	Readable.prototype._undestroy = destroyImpl.undestroy;
  	Readable.prototype._destroy = function (err, cb) {
  	  this.push(null);
  	  cb(err);
  	};

  	// Manually shove something into the read() buffer.
  	// This returns true if the highWaterMark has not been hit yet,
  	// similar to how Writable.write() returns true if you should
  	// write() some more.
  	Readable.prototype.push = function (chunk, encoding) {
  	  var state = this._readableState;
  	  var skipChunkCheck;

  	  if (!state.objectMode) {
  	    if (typeof chunk === 'string') {
  	      encoding = encoding || state.defaultEncoding;
  	      if (encoding !== state.encoding) {
  	        chunk = Buffer.from(chunk, encoding);
  	        encoding = '';
  	      }
  	      skipChunkCheck = true;
  	    }
  	  } else {
  	    skipChunkCheck = true;
  	  }

  	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  	};

  	// Unshift should *always* be something directly out of read()
  	Readable.prototype.unshift = function (chunk) {
  	  return readableAddChunk(this, chunk, null, true, false);
  	};

  	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  	  var state = stream._readableState;
  	  if (chunk === null) {
  	    state.reading = false;
  	    onEofChunk(stream, state);
  	  } else {
  	    var er;
  	    if (!skipChunkCheck) { er = chunkInvalid(state, chunk); }
  	    if (er) {
  	      stream.emit('error', er);
  	    } else if (state.objectMode || chunk && chunk.length > 0) {
  	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
  	        chunk = _uint8ArrayToBuffer(chunk);
  	      }

  	      if (addToFront) {
  	        if (state.endEmitted) { stream.emit('error', new Error('stream.unshift() after end event')); }else { addChunk(stream, state, chunk, true); }
  	      } else if (state.ended) {
  	        stream.emit('error', new Error('stream.push() after EOF'));
  	      } else {
  	        state.reading = false;
  	        if (state.decoder && !encoding) {
  	          chunk = state.decoder.write(chunk);
  	          if (state.objectMode || chunk.length !== 0) { addChunk(stream, state, chunk, false); }else { maybeReadMore(stream, state); }
  	        } else {
  	          addChunk(stream, state, chunk, false);
  	        }
  	      }
  	    } else if (!addToFront) {
  	      state.reading = false;
  	    }
  	  }

  	  return needMoreData(state);
  	}

  	function addChunk(stream, state, chunk, addToFront) {
  	  if (state.flowing && state.length === 0 && !state.sync) {
  	    stream.emit('data', chunk);
  	    stream.read(0);
  	  } else {
  	    // update the buffer info.
  	    state.length += state.objectMode ? 1 : chunk.length;
  	    if (addToFront) { state.buffer.unshift(chunk); }else { state.buffer.push(chunk); }

  	    if (state.needReadable) { emitReadable(stream); }
  	  }
  	  maybeReadMore(stream, state);
  	}

  	function chunkInvalid(state, chunk) {
  	  var er;
  	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
  	    er = new TypeError('Invalid non-string/buffer chunk');
  	  }
  	  return er;
  	}

  	// if it's past the high water mark, we can push in some more.
  	// Also, if we have no data yet, we can stand some
  	// more bytes.  This is to work around cases where hwm=0,
  	// such as the repl.  Also, if the push() triggered a
  	// readable event, and the user called read(largeNumber) such that
  	// needReadable was set, then we ought to push more, so that another
  	// 'readable' event will be triggered.
  	function needMoreData(state) {
  	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  	}

  	Readable.prototype.isPaused = function () {
  	  return this._readableState.flowing === false;
  	};

  	// backwards compatibility.
  	Readable.prototype.setEncoding = function (enc) {
  	  if (!StringDecoder) { StringDecoder = require('string_decoder/').StringDecoder; }
  	  this._readableState.decoder = new StringDecoder(enc);
  	  this._readableState.encoding = enc;
  	  return this;
  	};

  	// Don't raise the hwm > 8MB
  	var MAX_HWM = 0x800000;
  	function computeNewHighWaterMark(n) {
  	  if (n >= MAX_HWM) {
  	    n = MAX_HWM;
  	  } else {
  	    // Get the next highest power of 2 to prevent increasing hwm excessively in
  	    // tiny amounts
  	    n--;
  	    n |= n >>> 1;
  	    n |= n >>> 2;
  	    n |= n >>> 4;
  	    n |= n >>> 8;
  	    n |= n >>> 16;
  	    n++;
  	  }
  	  return n;
  	}

  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.
  	function howMuchToRead(n, state) {
  	  if (n <= 0 || state.length === 0 && state.ended) { return 0; }
  	  if (state.objectMode) { return 1; }
  	  if (n !== n) {
  	    // Only flow one buffer at a time
  	    if (state.flowing && state.length) { return state.buffer.head.data.length; }else { return state.length; }
  	  }
  	  // If we're asking for more than the current hwm, then raise the hwm.
  	  if (n > state.highWaterMark) { state.highWaterMark = computeNewHighWaterMark(n); }
  	  if (n <= state.length) { return n; }
  	  // Don't have enough
  	  if (!state.ended) {
  	    state.needReadable = true;
  	    return 0;
  	  }
  	  return state.length;
  	}

  	// you can override either this method, or the async _read(n) below.
  	Readable.prototype.read = function (n) {
  	  debug('read', n);
  	  n = parseInt(n, 10);
  	  var state = this._readableState;
  	  var nOrig = n;

  	  if (n !== 0) { state.emittedReadable = false; }

  	  // if we're doing read(0) to trigger a readable event, but we
  	  // already have a bunch of data in the buffer, then just trigger
  	  // the 'readable' event and move on.
  	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
  	    debug('read: emitReadable', state.length, state.ended);
  	    if (state.length === 0 && state.ended) { endReadable(this); }else { emitReadable(this); }
  	    return null;
  	  }

  	  n = howMuchToRead(n, state);

  	  // if we've ended, and we're now clear, then finish it up.
  	  if (n === 0 && state.ended) {
  	    if (state.length === 0) { endReadable(this); }
  	    return null;
  	  }

  	  // All the actual chunk generation logic needs to be
  	  // *below* the call to _read.  The reason is that in certain
  	  // synthetic stream cases, such as passthrough streams, _read
  	  // may be a completely synchronous operation which may change
  	  // the state of the read buffer, providing enough data when
  	  // before there was *not* enough.
  	  //
  	  // So, the steps are:
  	  // 1. Figure out what the state of things will be after we do
  	  // a read from the buffer.
  	  //
  	  // 2. If that resulting state will trigger a _read, then call _read.
  	  // Note that this may be asynchronous, or synchronous.  Yes, it is
  	  // deeply ugly to write APIs this way, but that still doesn't mean
  	  // that the Readable class should behave improperly, as streams are
  	  // designed to be sync/async agnostic.
  	  // Take note if the _read call is sync or async (ie, if the read call
  	  // has returned yet), so that we know whether or not it's safe to emit
  	  // 'readable' etc.
  	  //
  	  // 3. Actually pull the requested chunks out of the buffer and return.

  	  // if we need a readable event, then we need to do some reading.
  	  var doRead = state.needReadable;
  	  debug('need readable', doRead);

  	  // if we currently have less than the highWaterMark, then also read some
  	  if (state.length === 0 || state.length - n < state.highWaterMark) {
  	    doRead = true;
  	    debug('length less than watermark', doRead);
  	  }

  	  // however, if we've ended, then there's no point, and if we're already
  	  // reading, then it's unnecessary.
  	  if (state.ended || state.reading) {
  	    doRead = false;
  	    debug('reading or ended', doRead);
  	  } else if (doRead) {
  	    debug('do read');
  	    state.reading = true;
  	    state.sync = true;
  	    // if the length is currently zero, then we *need* a readable event.
  	    if (state.length === 0) { state.needReadable = true; }
  	    // call internal read method
  	    this._read(state.highWaterMark);
  	    state.sync = false;
  	    // If _read pushed data synchronously, then `reading` will be false,
  	    // and we need to re-evaluate how much data we can return to the user.
  	    if (!state.reading) { n = howMuchToRead(nOrig, state); }
  	  }

  	  var ret;
  	  if (n > 0) { ret = fromList(n, state); }else { ret = null; }

  	  if (ret === null) {
  	    state.needReadable = true;
  	    n = 0;
  	  } else {
  	    state.length -= n;
  	  }

  	  if (state.length === 0) {
  	    // If we have nothing in the buffer, then we want to know
  	    // as soon as we *do* get something into the buffer.
  	    if (!state.ended) { state.needReadable = true; }

  	    // If we tried to read() past the EOF, then emit end on the next tick.
  	    if (nOrig !== n && state.ended) { endReadable(this); }
  	  }

  	  if (ret !== null) { this.emit('data', ret); }

  	  return ret;
  	};

  	function onEofChunk(stream, state) {
  	  if (state.ended) { return; }
  	  if (state.decoder) {
  	    var chunk = state.decoder.end();
  	    if (chunk && chunk.length) {
  	      state.buffer.push(chunk);
  	      state.length += state.objectMode ? 1 : chunk.length;
  	    }
  	  }
  	  state.ended = true;

  	  // emit 'readable' now to make sure it gets picked up.
  	  emitReadable(stream);
  	}

  	// Don't emit readable right away in sync mode, because this can trigger
  	// another read() call => stack overflow.  This way, it might trigger
  	// a nextTick recursion warning, but that's not so bad.
  	function emitReadable(stream) {
  	  var state = stream._readableState;
  	  state.needReadable = false;
  	  if (!state.emittedReadable) {
  	    debug('emitReadable', state.flowing);
  	    state.emittedReadable = true;
  	    if (state.sync) { pna.nextTick(emitReadable_, stream); }else { emitReadable_(stream); }
  	  }
  	}

  	function emitReadable_(stream) {
  	  debug('emit readable');
  	  stream.emit('readable');
  	  flow(stream);
  	}

  	// at this point, the user has presumably seen the 'readable' event,
  	// and called read() to consume some data.  that may have triggered
  	// in turn another _read(n) call, in which case reading = true if
  	// it's in progress.
  	// However, if we're not ended, or reading, and the length < hwm,
  	// then go ahead and try to read some more preemptively.
  	function maybeReadMore(stream, state) {
  	  if (!state.readingMore) {
  	    state.readingMore = true;
  	    pna.nextTick(maybeReadMore_, stream, state);
  	  }
  	}

  	function maybeReadMore_(stream, state) {
  	  var len = state.length;
  	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
  	    debug('maybeReadMore read 0');
  	    stream.read(0);
  	    if (len === state.length)
  	      // didn't get any data, stop spinning.
  	      { break; }else { len = state.length; }
  	  }
  	  state.readingMore = false;
  	}

  	// abstract method.  to be overridden in specific implementation classes.
  	// call cb(er, data) where data is <= n in length.
  	// for virtual (non-string, non-buffer) streams, "length" is somewhat
  	// arbitrary, and perhaps not very meaningful.
  	Readable.prototype._read = function (n) {
  	  this.emit('error', new Error('_read() is not implemented'));
  	};

  	Readable.prototype.pipe = function (dest, pipeOpts) {
  	  var src = this;
  	  var state = this._readableState;

  	  switch (state.pipesCount) {
  	    case 0:
  	      state.pipes = dest;
  	      break;
  	    case 1:
  	      state.pipes = [state.pipes, dest];
  	      break;
  	    default:
  	      state.pipes.push(dest);
  	      break;
  	  }
  	  state.pipesCount += 1;
  	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  	  var endFn = doEnd ? onend : unpipe;
  	  if (state.endEmitted) { pna.nextTick(endFn); }else { src.once('end', endFn); }

  	  dest.on('unpipe', onunpipe);
  	  function onunpipe(readable, unpipeInfo) {
  	    debug('onunpipe');
  	    if (readable === src) {
  	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
  	        unpipeInfo.hasUnpiped = true;
  	        cleanup();
  	      }
  	    }
  	  }

  	  function onend() {
  	    debug('onend');
  	    dest.end();
  	  }

  	  // when the dest drains, it reduces the awaitDrain counter
  	  // on the source.  This would be more elegant with a .once()
  	  // handler in flow(), but adding and removing repeatedly is
  	  // too slow.
  	  var ondrain = pipeOnDrain(src);
  	  dest.on('drain', ondrain);

  	  var cleanedUp = false;
  	  function cleanup() {
  	    debug('cleanup');
  	    // cleanup event handlers once the pipe is broken
  	    dest.removeListener('close', onclose);
  	    dest.removeListener('finish', onfinish);
  	    dest.removeListener('drain', ondrain);
  	    dest.removeListener('error', onerror);
  	    dest.removeListener('unpipe', onunpipe);
  	    src.removeListener('end', onend);
  	    src.removeListener('end', unpipe);
  	    src.removeListener('data', ondata);

  	    cleanedUp = true;

  	    // if the reader is waiting for a drain event from this
  	    // specific writer, then it would cause it to never start
  	    // flowing again.
  	    // So, if this is awaiting a drain, then we just call it now.
  	    // If we don't know, then assume that we are waiting for one.
  	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) { ondrain(); }
  	  }

  	  // If the user pushes more data while we're writing to dest then we'll end up
  	  // in ondata again. However, we only want to increase awaitDrain once because
  	  // dest will only emit one 'drain' event for the multiple writes.
  	  // => Introduce a guard on increasing awaitDrain.
  	  var increasedAwaitDrain = false;
  	  src.on('data', ondata);
  	  function ondata(chunk) {
  	    debug('ondata');
  	    increasedAwaitDrain = false;
  	    var ret = dest.write(chunk);
  	    if (false === ret && !increasedAwaitDrain) {
  	      // If the user unpiped during `dest.write()`, it is possible
  	      // to get stuck in a permanently paused state if that write
  	      // also returned false.
  	      // => Check whether `dest` is still a piping destination.
  	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
  	        debug('false write response, pause', src._readableState.awaitDrain);
  	        src._readableState.awaitDrain++;
  	        increasedAwaitDrain = true;
  	      }
  	      src.pause();
  	    }
  	  }

  	  // if the dest has an error, then stop piping into it.
  	  // however, don't suppress the throwing behavior for this.
  	  function onerror(er) {
  	    debug('onerror', er);
  	    unpipe();
  	    dest.removeListener('error', onerror);
  	    if (EElistenerCount(dest, 'error') === 0) { dest.emit('error', er); }
  	  }

  	  // Make sure our error handler is attached before userland ones.
  	  prependListener(dest, 'error', onerror);

  	  // Both close and finish should trigger unpipe, but only once.
  	  function onclose() {
  	    dest.removeListener('finish', onfinish);
  	    unpipe();
  	  }
  	  dest.once('close', onclose);
  	  function onfinish() {
  	    debug('onfinish');
  	    dest.removeListener('close', onclose);
  	    unpipe();
  	  }
  	  dest.once('finish', onfinish);

  	  function unpipe() {
  	    debug('unpipe');
  	    src.unpipe(dest);
  	  }

  	  // tell the dest that it's being piped to
  	  dest.emit('pipe', src);

  	  // start the flow if it hasn't been started already.
  	  if (!state.flowing) {
  	    debug('pipe resume');
  	    src.resume();
  	  }

  	  return dest;
  	};

  	function pipeOnDrain(src) {
  	  return function () {
  	    var state = src._readableState;
  	    debug('pipeOnDrain', state.awaitDrain);
  	    if (state.awaitDrain) { state.awaitDrain--; }
  	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
  	      state.flowing = true;
  	      flow(src);
  	    }
  	  };
  	}

  	Readable.prototype.unpipe = function (dest) {
  	  var state = this._readableState;
  	  var unpipeInfo = { hasUnpiped: false };

  	  // if we're not piping anywhere, then do nothing.
  	  if (state.pipesCount === 0) { return this; }

  	  // just one destination.  most common case.
  	  if (state.pipesCount === 1) {
  	    // passed in one, but it's not the right one.
  	    if (dest && dest !== state.pipes) { return this; }

  	    if (!dest) { dest = state.pipes; }

  	    // got a match.
  	    state.pipes = null;
  	    state.pipesCount = 0;
  	    state.flowing = false;
  	    if (dest) { dest.emit('unpipe', this, unpipeInfo); }
  	    return this;
  	  }

  	  // slow case. multiple pipe destinations.

  	  if (!dest) {
  	    // remove all.
  	    var dests = state.pipes;
  	    var len = state.pipesCount;
  	    state.pipes = null;
  	    state.pipesCount = 0;
  	    state.flowing = false;

  	    for (var i = 0; i < len; i++) {
  	      dests[i].emit('unpipe', this, unpipeInfo);
  	    }return this;
  	  }

  	  // try to find the right one.
  	  var index = indexOf(state.pipes, dest);
  	  if (index === -1) { return this; }

  	  state.pipes.splice(index, 1);
  	  state.pipesCount -= 1;
  	  if (state.pipesCount === 1) { state.pipes = state.pipes[0]; }

  	  dest.emit('unpipe', this, unpipeInfo);

  	  return this;
  	};

  	// set up data events if they are asked for
  	// Ensure readable listeners eventually get something
  	Readable.prototype.on = function (ev, fn) {
  	  var res = Stream.prototype.on.call(this, ev, fn);

  	  if (ev === 'data') {
  	    // Start flowing on next tick if stream isn't explicitly paused
  	    if (this._readableState.flowing !== false) { this.resume(); }
  	  } else if (ev === 'readable') {
  	    var state = this._readableState;
  	    if (!state.endEmitted && !state.readableListening) {
  	      state.readableListening = state.needReadable = true;
  	      state.emittedReadable = false;
  	      if (!state.reading) {
  	        pna.nextTick(nReadingNextTick, this);
  	      } else if (state.length) {
  	        emitReadable(this);
  	      }
  	    }
  	  }

  	  return res;
  	};
  	Readable.prototype.addListener = Readable.prototype.on;

  	function nReadingNextTick(self) {
  	  debug('readable nexttick read 0');
  	  self.read(0);
  	}

  	// pause() and resume() are remnants of the legacy readable stream API
  	// If the user uses them, then switch into old mode.
  	Readable.prototype.resume = function () {
  	  var state = this._readableState;
  	  if (!state.flowing) {
  	    debug('resume');
  	    state.flowing = true;
  	    resume(this, state);
  	  }
  	  return this;
  	};

  	function resume(stream, state) {
  	  if (!state.resumeScheduled) {
  	    state.resumeScheduled = true;
  	    pna.nextTick(resume_, stream, state);
  	  }
  	}

  	function resume_(stream, state) {
  	  if (!state.reading) {
  	    debug('resume read 0');
  	    stream.read(0);
  	  }

  	  state.resumeScheduled = false;
  	  state.awaitDrain = 0;
  	  stream.emit('resume');
  	  flow(stream);
  	  if (state.flowing && !state.reading) { stream.read(0); }
  	}

  	Readable.prototype.pause = function () {
  	  debug('call pause flowing=%j', this._readableState.flowing);
  	  if (false !== this._readableState.flowing) {
  	    debug('pause');
  	    this._readableState.flowing = false;
  	    this.emit('pause');
  	  }
  	  return this;
  	};

  	function flow(stream) {
  	  var state = stream._readableState;
  	  debug('flow', state.flowing);
  	  while (state.flowing && stream.read() !== null) {}
  	}

  	// wrap an old-style stream as the async data source.
  	// This is *not* part of the readable stream interface.
  	// It is an ugly unfortunate mess of history.
  	Readable.prototype.wrap = function (stream) {
  	  var _this = this;

  	  var state = this._readableState;
  	  var paused = false;

  	  stream.on('end', function () {
  	    debug('wrapped end');
  	    if (state.decoder && !state.ended) {
  	      var chunk = state.decoder.end();
  	      if (chunk && chunk.length) { _this.push(chunk); }
  	    }

  	    _this.push(null);
  	  });

  	  stream.on('data', function (chunk) {
  	    debug('wrapped data');
  	    if (state.decoder) { chunk = state.decoder.write(chunk); }

  	    // don't skip over falsy values in objectMode
  	    if (state.objectMode && (chunk === null || chunk === undefined)) { return; }else if (!state.objectMode && (!chunk || !chunk.length)) { return; }

  	    var ret = _this.push(chunk);
  	    if (!ret) {
  	      paused = true;
  	      stream.pause();
  	    }
  	  });

  	  // proxy all the other methods.
  	  // important when wrapping filters and duplexes.
  	  for (var i in stream) {
  	    if (this[i] === undefined && typeof stream[i] === 'function') {
  	      this[i] = function (method) {
  	        return function () {
  	          return stream[method].apply(stream, arguments);
  	        };
  	      }(i);
  	    }
  	  }

  	  // proxy certain important events.
  	  for (var n = 0; n < kProxyEvents.length; n++) {
  	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  	  }

  	  // when we try to consume some more bytes, simply unpause the
  	  // underlying stream.
  	  this._read = function (n) {
  	    debug('wrapped _read', n);
  	    if (paused) {
  	      paused = false;
  	      stream.resume();
  	    }
  	  };

  	  return this;
  	};

  	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function () {
  	    return this._readableState.highWaterMark;
  	  }
  	});

  	// exposed for testing purposes only.
  	Readable._fromList = fromList;

  	// Pluck off n bytes from an array of buffers.
  	// Length is the combined lengths of all the buffers in the list.
  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.
  	function fromList(n, state) {
  	  // nothing buffered
  	  if (state.length === 0) { return null; }

  	  var ret;
  	  if (state.objectMode) { ret = state.buffer.shift(); }else if (!n || n >= state.length) {
  	    // read it all, truncate the list
  	    if (state.decoder) { ret = state.buffer.join(''); }else if (state.buffer.length === 1) { ret = state.buffer.head.data; }else { ret = state.buffer.concat(state.length); }
  	    state.buffer.clear();
  	  } else {
  	    // read part of list
  	    ret = fromListPartial(n, state.buffer, state.decoder);
  	  }

  	  return ret;
  	}

  	// Extracts only enough buffered data to satisfy the amount requested.
  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.
  	function fromListPartial(n, list, hasStrings) {
  	  var ret;
  	  if (n < list.head.data.length) {
  	    // slice is the same for buffers and strings
  	    ret = list.head.data.slice(0, n);
  	    list.head.data = list.head.data.slice(n);
  	  } else if (n === list.head.data.length) {
  	    // first chunk is a perfect match
  	    ret = list.shift();
  	  } else {
  	    // result spans more than one buffer
  	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  	  }
  	  return ret;
  	}

  	// Copies a specified amount of characters from the list of buffered data
  	// chunks.
  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.
  	function copyFromBufferString(n, list) {
  	  var p = list.head;
  	  var c = 1;
  	  var ret = p.data;
  	  n -= ret.length;
  	  while (p = p.next) {
  	    var str = p.data;
  	    var nb = n > str.length ? str.length : n;
  	    if (nb === str.length) { ret += str; }else { ret += str.slice(0, n); }
  	    n -= nb;
  	    if (n === 0) {
  	      if (nb === str.length) {
  	        ++c;
  	        if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
  	      } else {
  	        list.head = p;
  	        p.data = str.slice(nb);
  	      }
  	      break;
  	    }
  	    ++c;
  	  }
  	  list.length -= c;
  	  return ret;
  	}

  	// Copies a specified amount of bytes from the list of buffered data chunks.
  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.
  	function copyFromBuffer(n, list) {
  	  var ret = Buffer.allocUnsafe(n);
  	  var p = list.head;
  	  var c = 1;
  	  p.data.copy(ret);
  	  n -= p.data.length;
  	  while (p = p.next) {
  	    var buf = p.data;
  	    var nb = n > buf.length ? buf.length : n;
  	    buf.copy(ret, ret.length - n, 0, nb);
  	    n -= nb;
  	    if (n === 0) {
  	      if (nb === buf.length) {
  	        ++c;
  	        if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
  	      } else {
  	        list.head = p;
  	        p.data = buf.slice(nb);
  	      }
  	      break;
  	    }
  	    ++c;
  	  }
  	  list.length -= c;
  	  return ret;
  	}

  	function endReadable(stream) {
  	  var state = stream._readableState;

  	  // If we get here before consuming all the bytes, then that is a
  	  // bug in node.  Should never happen.
  	  if (state.length > 0) { throw new Error('"endReadable()" called on non-empty stream'); }

  	  if (!state.endEmitted) {
  	    state.ended = true;
  	    pna.nextTick(endReadableNT, state, stream);
  	  }
  	}

  	function endReadableNT(state, stream) {
  	  // Check that we didn't get one last unshift.
  	  if (!state.endEmitted && state.length === 0) {
  	    state.endEmitted = true;
  	    stream.readable = false;
  	    stream.emit('end');
  	  }
  	}

  	function indexOf(xs, x) {
  	  for (var i = 0, l = xs.length; i < l; i++) {
  	    if (xs[i] === x) { return i; }
  	  }
  	  return -1;
  	}
  	}).call(this,require('_process'),typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{"./_stream_duplex":104,"./internal/streams/BufferList":109,"./internal/streams/destroy":110,"./internal/streams/stream":111,"_process":99,"core-util-is":56,"events":91,"inherits":94,"isarray":96,"process-nextick-args":98,"safe-buffer":113,"string_decoder/":118,"util":51}],107:[function(require,module,exports){

  	module.exports = Transform;

  	var Duplex = require('./_stream_duplex');

  	/*<replacement>*/
  	var util = require('core-util-is');
  	util.inherits = require('inherits');
  	/*</replacement>*/

  	util.inherits(Transform, Duplex);

  	function afterTransform(er, data) {
  	  var ts = this._transformState;
  	  ts.transforming = false;

  	  var cb = ts.writecb;

  	  if (!cb) {
  	    return this.emit('error', new Error('write callback called multiple times'));
  	  }

  	  ts.writechunk = null;
  	  ts.writecb = null;

  	  if (data != null) // single equals check for both `null` and `undefined`
  	    { this.push(data); }

  	  cb(er);

  	  var rs = this._readableState;
  	  rs.reading = false;
  	  if (rs.needReadable || rs.length < rs.highWaterMark) {
  	    this._read(rs.highWaterMark);
  	  }
  	}

  	function Transform(options) {
  	  if (!(this instanceof Transform)) { return new Transform(options); }

  	  Duplex.call(this, options);

  	  this._transformState = {
  	    afterTransform: afterTransform.bind(this),
  	    needTransform: false,
  	    transforming: false,
  	    writecb: null,
  	    writechunk: null,
  	    writeencoding: null
  	  };

  	  // start out asking for a readable event once data is transformed.
  	  this._readableState.needReadable = true;

  	  // we have implemented the _read method, and done the other things
  	  // that Readable wants before the first _read call, so unset the
  	  // sync guard flag.
  	  this._readableState.sync = false;

  	  if (options) {
  	    if (typeof options.transform === 'function') { this._transform = options.transform; }

  	    if (typeof options.flush === 'function') { this._flush = options.flush; }
  	  }

  	  // When the writable side finishes, then flush out anything remaining.
  	  this.on('prefinish', prefinish);
  	}

  	function prefinish() {
  	  var _this = this;

  	  if (typeof this._flush === 'function') {
  	    this._flush(function (er, data) {
  	      done(_this, er, data);
  	    });
  	  } else {
  	    done(this, null, null);
  	  }
  	}

  	Transform.prototype.push = function (chunk, encoding) {
  	  this._transformState.needTransform = false;
  	  return Duplex.prototype.push.call(this, chunk, encoding);
  	};

  	// This is the part where you do stuff!
  	// override this function in implementation classes.
  	// 'chunk' is an input chunk.
  	//
  	// Call `push(newChunk)` to pass along transformed output
  	// to the readable side.  You may call 'push' zero or more times.
  	//
  	// Call `cb(err)` when you are done with this chunk.  If you pass
  	// an error, then that'll put the hurt on the whole operation.  If you
  	// never call cb(), then you'll never get another chunk.
  	Transform.prototype._transform = function (chunk, encoding, cb) {
  	  throw new Error('_transform() is not implemented');
  	};

  	Transform.prototype._write = function (chunk, encoding, cb) {
  	  var ts = this._transformState;
  	  ts.writecb = cb;
  	  ts.writechunk = chunk;
  	  ts.writeencoding = encoding;
  	  if (!ts.transforming) {
  	    var rs = this._readableState;
  	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) { this._read(rs.highWaterMark); }
  	  }
  	};

  	// Doesn't matter what the args are here.
  	// _transform does all the work.
  	// That we got here means that the readable side wants more data.
  	Transform.prototype._read = function (n) {
  	  var ts = this._transformState;

  	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
  	    ts.transforming = true;
  	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  	  } else {
  	    // mark that we need a transform, so that any data that comes in
  	    // will get processed, now that we've asked for it.
  	    ts.needTransform = true;
  	  }
  	};

  	Transform.prototype._destroy = function (err, cb) {
  	  var _this2 = this;

  	  Duplex.prototype._destroy.call(this, err, function (err2) {
  	    cb(err2);
  	    _this2.emit('close');
  	  });
  	};

  	function done(stream, er, data) {
  	  if (er) { return stream.emit('error', er); }

  	  if (data != null) // single equals check for both `null` and `undefined`
  	    { stream.push(data); }

  	  // if there's nothing in the write buffer, then that means
  	  // that nothing more will ever be provided
  	  if (stream._writableState.length) { throw new Error('Calling transform done when ws.length != 0'); }

  	  if (stream._transformState.transforming) { throw new Error('Calling transform done when still transforming'); }

  	  return stream.push(null);
  	}
  	},{"./_stream_duplex":104,"core-util-is":56,"inherits":94}],108:[function(require,module,exports){
  	(function (process,global,setImmediate){

  	/*<replacement>*/

  	var pna = require('process-nextick-args');
  	/*</replacement>*/

  	module.exports = Writable;

  	// It seems a linked list but it is not
  	// there will be only 2 of these for each stream
  	function CorkedRequest(state) {
  	  var _this = this;

  	  this.next = null;
  	  this.entry = null;
  	  this.finish = function () {
  	    onCorkedFinish(_this, state);
  	  };
  	}
  	/* </replacement> */

  	/*<replacement>*/
  	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
  	/*</replacement>*/

  	/*<replacement>*/
  	var Duplex;
  	/*</replacement>*/

  	Writable.WritableState = WritableState;

  	/*<replacement>*/
  	var util = require('core-util-is');
  	util.inherits = require('inherits');
  	/*</replacement>*/

  	/*<replacement>*/
  	var internalUtil = {
  	  deprecate: require('util-deprecate')
  	};
  	/*</replacement>*/

  	/*<replacement>*/
  	var Stream = require('./internal/streams/stream');
  	/*</replacement>*/

  	/*<replacement>*/

  	var Buffer = require('safe-buffer').Buffer;
  	var OurUint8Array = global.Uint8Array || function () {};
  	function _uint8ArrayToBuffer(chunk) {
  	  return Buffer.from(chunk);
  	}
  	function _isUint8Array(obj) {
  	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  	}

  	/*</replacement>*/

  	var destroyImpl = require('./internal/streams/destroy');

  	util.inherits(Writable, Stream);

  	function nop() {}

  	function WritableState(options, stream) {
  	  Duplex = Duplex || require('./_stream_duplex');

  	  options = options || {};

  	  // Duplex streams are both readable and writable, but share
  	  // the same options object.
  	  // However, some cases require setting options to different
  	  // values for the readable and the writable sides of the duplex stream.
  	  // These options can be provided separately as readableXXX and writableXXX.
  	  var isDuplex = stream instanceof Duplex;

  	  // object stream flag to indicate whether or not this stream
  	  // contains buffers or objects.
  	  this.objectMode = !!options.objectMode;

  	  if (isDuplex) { this.objectMode = this.objectMode || !!options.writableObjectMode; }

  	  // the point at which write() starts returning false
  	  // Note: 0 is a valid value, means that we always return false if
  	  // the entire buffer is not flushed immediately on write()
  	  var hwm = options.highWaterMark;
  	  var writableHwm = options.writableHighWaterMark;
  	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  	  if (hwm || hwm === 0) { this.highWaterMark = hwm; }else if (isDuplex && (writableHwm || writableHwm === 0)) { this.highWaterMark = writableHwm; }else { this.highWaterMark = defaultHwm; }

  	  // cast to ints.
  	  this.highWaterMark = Math.floor(this.highWaterMark);

  	  // if _final has been called
  	  this.finalCalled = false;

  	  // drain event flag.
  	  this.needDrain = false;
  	  // at the start of calling end()
  	  this.ending = false;
  	  // when end() has been called, and returned
  	  this.ended = false;
  	  // when 'finish' is emitted
  	  this.finished = false;

  	  // has it been destroyed
  	  this.destroyed = false;

  	  // should we decode strings into buffers before passing to _write?
  	  // this is here so that some node-core streams can optimize string
  	  // handling at a lower level.
  	  var noDecode = options.decodeStrings === false;
  	  this.decodeStrings = !noDecode;

  	  // Crypto is kind of old and crusty.  Historically, its default string
  	  // encoding is 'binary' so we have to make this configurable.
  	  // Everything else in the universe uses 'utf8', though.
  	  this.defaultEncoding = options.defaultEncoding || 'utf8';

  	  // not an actual buffer we keep track of, but a measurement
  	  // of how much we're waiting to get pushed to some underlying
  	  // socket or file.
  	  this.length = 0;

  	  // a flag to see when we're in the middle of a write.
  	  this.writing = false;

  	  // when true all writes will be buffered until .uncork() call
  	  this.corked = 0;

  	  // a flag to be able to tell if the onwrite cb is called immediately,
  	  // or on a later tick.  We set this to true at first, because any
  	  // actions that shouldn't happen until "later" should generally also
  	  // not happen before the first write call.
  	  this.sync = true;

  	  // a flag to know if we're processing previously buffered items, which
  	  // may call the _write() callback in the same tick, so that we don't
  	  // end up in an overlapped onwrite situation.
  	  this.bufferProcessing = false;

  	  // the callback that's passed to _write(chunk,cb)
  	  this.onwrite = function (er) {
  	    onwrite(stream, er);
  	  };

  	  // the callback that the user supplies to write(chunk,encoding,cb)
  	  this.writecb = null;

  	  // the amount that is being written when _write is called.
  	  this.writelen = 0;

  	  this.bufferedRequest = null;
  	  this.lastBufferedRequest = null;

  	  // number of pending user-supplied write callbacks
  	  // this must be 0 before 'finish' can be emitted
  	  this.pendingcb = 0;

  	  // emit prefinish if the only thing we're waiting for is _write cbs
  	  // This is relevant for synchronous Transform streams
  	  this.prefinished = false;

  	  // True if the error was already emitted and should not be thrown again
  	  this.errorEmitted = false;

  	  // count buffered requests
  	  this.bufferedRequestCount = 0;

  	  // allocate the first CorkedRequest, there is always
  	  // one allocated and free to use, and we maintain at most two
  	  this.corkedRequestsFree = new CorkedRequest(this);
  	}

  	WritableState.prototype.getBuffer = function getBuffer() {
  	  var current = this.bufferedRequest;
  	  var out = [];
  	  while (current) {
  	    out.push(current);
  	    current = current.next;
  	  }
  	  return out;
  	};

  	(function () {
  	  try {
  	    Object.defineProperty(WritableState.prototype, 'buffer', {
  	      get: internalUtil.deprecate(function () {
  	        return this.getBuffer();
  	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
  	    });
  	  } catch (_) {}
  	})();

  	// Test _writableState for inheritance to account for Duplex streams,
  	// whose prototype chain only points to Readable.
  	var realHasInstance;
  	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  	  realHasInstance = Function.prototype[Symbol.hasInstance];
  	  Object.defineProperty(Writable, Symbol.hasInstance, {
  	    value: function (object) {
  	      if (realHasInstance.call(this, object)) { return true; }
  	      if (this !== Writable) { return false; }

  	      return object && object._writableState instanceof WritableState;
  	    }
  	  });
  	} else {
  	  realHasInstance = function (object) {
  	    return object instanceof this;
  	  };
  	}

  	function Writable(options) {
  	  Duplex = Duplex || require('./_stream_duplex');

  	  // Writable ctor is applied to Duplexes, too.
  	  // `realHasInstance` is necessary because using plain `instanceof`
  	  // would return false, as no `_writableState` property is attached.

  	  // Trying to use the custom `instanceof` for Writable here will also break the
  	  // Node.js LazyTransform implementation, which has a non-trivial getter for
  	  // `_writableState` that would lead to infinite recursion.
  	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
  	    return new Writable(options);
  	  }

  	  this._writableState = new WritableState(options, this);

  	  // legacy.
  	  this.writable = true;

  	  if (options) {
  	    if (typeof options.write === 'function') { this._write = options.write; }

  	    if (typeof options.writev === 'function') { this._writev = options.writev; }

  	    if (typeof options.destroy === 'function') { this._destroy = options.destroy; }

  	    if (typeof options.final === 'function') { this._final = options.final; }
  	  }

  	  Stream.call(this);
  	}

  	// Otherwise people can pipe Writable streams, which is just wrong.
  	Writable.prototype.pipe = function () {
  	  this.emit('error', new Error('Cannot pipe, not readable'));
  	};

  	function writeAfterEnd(stream, cb) {
  	  var er = new Error('write after end');
  	  // TODO: defer error events consistently everywhere, not just the cb
  	  stream.emit('error', er);
  	  pna.nextTick(cb, er);
  	}

  	// Checks that a user-supplied chunk is valid, especially for the particular
  	// mode the stream is in. Currently this means that `null` is never accepted
  	// and undefined/non-string values are only allowed in object mode.
  	function validChunk(stream, state, chunk, cb) {
  	  var valid = true;
  	  var er = false;

  	  if (chunk === null) {
  	    er = new TypeError('May not write null values to stream');
  	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
  	    er = new TypeError('Invalid non-string/buffer chunk');
  	  }
  	  if (er) {
  	    stream.emit('error', er);
  	    pna.nextTick(cb, er);
  	    valid = false;
  	  }
  	  return valid;
  	}

  	Writable.prototype.write = function (chunk, encoding, cb) {
  	  var state = this._writableState;
  	  var ret = false;
  	  var isBuf = !state.objectMode && _isUint8Array(chunk);

  	  if (isBuf && !Buffer.isBuffer(chunk)) {
  	    chunk = _uint8ArrayToBuffer(chunk);
  	  }

  	  if (typeof encoding === 'function') {
  	    cb = encoding;
  	    encoding = null;
  	  }

  	  if (isBuf) { encoding = 'buffer'; }else if (!encoding) { encoding = state.defaultEncoding; }

  	  if (typeof cb !== 'function') { cb = nop; }

  	  if (state.ended) { writeAfterEnd(this, cb); }else if (isBuf || validChunk(this, state, chunk, cb)) {
  	    state.pendingcb++;
  	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  	  }

  	  return ret;
  	};

  	Writable.prototype.cork = function () {
  	  var state = this._writableState;

  	  state.corked++;
  	};

  	Writable.prototype.uncork = function () {
  	  var state = this._writableState;

  	  if (state.corked) {
  	    state.corked--;

  	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) { clearBuffer(this, state); }
  	  }
  	};

  	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  	  // node::ParseEncoding() requires lower case.
  	  if (typeof encoding === 'string') { encoding = encoding.toLowerCase(); }
  	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) { throw new TypeError('Unknown encoding: ' + encoding); }
  	  this._writableState.defaultEncoding = encoding;
  	  return this;
  	};

  	function decodeChunk(state, chunk, encoding) {
  	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
  	    chunk = Buffer.from(chunk, encoding);
  	  }
  	  return chunk;
  	}

  	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function () {
  	    return this._writableState.highWaterMark;
  	  }
  	});

  	// if we're already writing something, then just put this
  	// in the queue, and wait our turn.  Otherwise, call _write
  	// If we return false, then we need a drain event, so set that flag.
  	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  	  if (!isBuf) {
  	    var newChunk = decodeChunk(state, chunk, encoding);
  	    if (chunk !== newChunk) {
  	      isBuf = true;
  	      encoding = 'buffer';
  	      chunk = newChunk;
  	    }
  	  }
  	  var len = state.objectMode ? 1 : chunk.length;

  	  state.length += len;

  	  var ret = state.length < state.highWaterMark;
  	  // we must ensure that previous needDrain will not be reset to false.
  	  if (!ret) { state.needDrain = true; }

  	  if (state.writing || state.corked) {
  	    var last = state.lastBufferedRequest;
  	    state.lastBufferedRequest = {
  	      chunk: chunk,
  	      encoding: encoding,
  	      isBuf: isBuf,
  	      callback: cb,
  	      next: null
  	    };
  	    if (last) {
  	      last.next = state.lastBufferedRequest;
  	    } else {
  	      state.bufferedRequest = state.lastBufferedRequest;
  	    }
  	    state.bufferedRequestCount += 1;
  	  } else {
  	    doWrite(stream, state, false, len, chunk, encoding, cb);
  	  }

  	  return ret;
  	}

  	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  	  state.writelen = len;
  	  state.writecb = cb;
  	  state.writing = true;
  	  state.sync = true;
  	  if (writev) { stream._writev(chunk, state.onwrite); }else { stream._write(chunk, encoding, state.onwrite); }
  	  state.sync = false;
  	}

  	function onwriteError(stream, state, sync, er, cb) {
  	  --state.pendingcb;

  	  if (sync) {
  	    // defer the callback if we are being called synchronously
  	    // to avoid piling up things on the stack
  	    pna.nextTick(cb, er);
  	    // this can emit finish, and it will always happen
  	    // after error
  	    pna.nextTick(finishMaybe, stream, state);
  	    stream._writableState.errorEmitted = true;
  	    stream.emit('error', er);
  	  } else {
  	    // the caller expect this to happen before if
  	    // it is async
  	    cb(er);
  	    stream._writableState.errorEmitted = true;
  	    stream.emit('error', er);
  	    // this can emit finish, but finish must
  	    // always follow error
  	    finishMaybe(stream, state);
  	  }
  	}

  	function onwriteStateUpdate(state) {
  	  state.writing = false;
  	  state.writecb = null;
  	  state.length -= state.writelen;
  	  state.writelen = 0;
  	}

  	function onwrite(stream, er) {
  	  var state = stream._writableState;
  	  var sync = state.sync;
  	  var cb = state.writecb;

  	  onwriteStateUpdate(state);

  	  if (er) { onwriteError(stream, state, sync, er, cb); }else {
  	    // Check if we're actually ready to finish, but don't emit yet
  	    var finished = needFinish(state);

  	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
  	      clearBuffer(stream, state);
  	    }

  	    if (sync) {
  	      /*<replacement>*/
  	      asyncWrite(afterWrite, stream, state, finished, cb);
  	      /*</replacement>*/
  	    } else {
  	      afterWrite(stream, state, finished, cb);
  	    }
  	  }
  	}

  	function afterWrite(stream, state, finished, cb) {
  	  if (!finished) { onwriteDrain(stream, state); }
  	  state.pendingcb--;
  	  cb();
  	  finishMaybe(stream, state);
  	}

  	// Must force callback to be called on nextTick, so that we don't
  	// emit 'drain' before the write() consumer gets the 'false' return
  	// value, and has a chance to attach a 'drain' listener.
  	function onwriteDrain(stream, state) {
  	  if (state.length === 0 && state.needDrain) {
  	    state.needDrain = false;
  	    stream.emit('drain');
  	  }
  	}

  	// if there's something in the buffer waiting, then process it
  	function clearBuffer(stream, state) {
  	  state.bufferProcessing = true;
  	  var entry = state.bufferedRequest;

  	  if (stream._writev && entry && entry.next) {
  	    // Fast case, write everything using _writev()
  	    var l = state.bufferedRequestCount;
  	    var buffer = new Array(l);
  	    var holder = state.corkedRequestsFree;
  	    holder.entry = entry;

  	    var count = 0;
  	    var allBuffers = true;
  	    while (entry) {
  	      buffer[count] = entry;
  	      if (!entry.isBuf) { allBuffers = false; }
  	      entry = entry.next;
  	      count += 1;
  	    }
  	    buffer.allBuffers = allBuffers;

  	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

  	    // doWrite is almost always async, defer these to save a bit of time
  	    // as the hot path ends with doWrite
  	    state.pendingcb++;
  	    state.lastBufferedRequest = null;
  	    if (holder.next) {
  	      state.corkedRequestsFree = holder.next;
  	      holder.next = null;
  	    } else {
  	      state.corkedRequestsFree = new CorkedRequest(state);
  	    }
  	    state.bufferedRequestCount = 0;
  	  } else {
  	    // Slow case, write chunks one-by-one
  	    while (entry) {
  	      var chunk = entry.chunk;
  	      var encoding = entry.encoding;
  	      var cb = entry.callback;
  	      var len = state.objectMode ? 1 : chunk.length;

  	      doWrite(stream, state, false, len, chunk, encoding, cb);
  	      entry = entry.next;
  	      state.bufferedRequestCount--;
  	      // if we didn't call the onwrite immediately, then
  	      // it means that we need to wait until it does.
  	      // also, that means that the chunk and cb are currently
  	      // being processed, so move the buffer counter past them.
  	      if (state.writing) {
  	        break;
  	      }
  	    }

  	    if (entry === null) { state.lastBufferedRequest = null; }
  	  }

  	  state.bufferedRequest = entry;
  	  state.bufferProcessing = false;
  	}

  	Writable.prototype._write = function (chunk, encoding, cb) {
  	  cb(new Error('_write() is not implemented'));
  	};

  	Writable.prototype._writev = null;

  	Writable.prototype.end = function (chunk, encoding, cb) {
  	  var state = this._writableState;

  	  if (typeof chunk === 'function') {
  	    cb = chunk;
  	    chunk = null;
  	    encoding = null;
  	  } else if (typeof encoding === 'function') {
  	    cb = encoding;
  	    encoding = null;
  	  }

  	  if (chunk !== null && chunk !== undefined) { this.write(chunk, encoding); }

  	  // .end() fully uncorks
  	  if (state.corked) {
  	    state.corked = 1;
  	    this.uncork();
  	  }

  	  // ignore unnecessary end() calls.
  	  if (!state.ending && !state.finished) { endWritable(this, state, cb); }
  	};

  	function needFinish(state) {
  	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  	}
  	function callFinal(stream, state) {
  	  stream._final(function (err) {
  	    state.pendingcb--;
  	    if (err) {
  	      stream.emit('error', err);
  	    }
  	    state.prefinished = true;
  	    stream.emit('prefinish');
  	    finishMaybe(stream, state);
  	  });
  	}
  	function prefinish(stream, state) {
  	  if (!state.prefinished && !state.finalCalled) {
  	    if (typeof stream._final === 'function') {
  	      state.pendingcb++;
  	      state.finalCalled = true;
  	      pna.nextTick(callFinal, stream, state);
  	    } else {
  	      state.prefinished = true;
  	      stream.emit('prefinish');
  	    }
  	  }
  	}

  	function finishMaybe(stream, state) {
  	  var need = needFinish(state);
  	  if (need) {
  	    prefinish(stream, state);
  	    if (state.pendingcb === 0) {
  	      state.finished = true;
  	      stream.emit('finish');
  	    }
  	  }
  	  return need;
  	}

  	function endWritable(stream, state, cb) {
  	  state.ending = true;
  	  finishMaybe(stream, state);
  	  if (cb) {
  	    if (state.finished) { pna.nextTick(cb); }else { stream.once('finish', cb); }
  	  }
  	  state.ended = true;
  	  stream.writable = false;
  	}

  	function onCorkedFinish(corkReq, state, err) {
  	  var entry = corkReq.entry;
  	  corkReq.entry = null;
  	  while (entry) {
  	    var cb = entry.callback;
  	    state.pendingcb--;
  	    cb(err);
  	    entry = entry.next;
  	  }
  	  if (state.corkedRequestsFree) {
  	    state.corkedRequestsFree.next = corkReq;
  	  } else {
  	    state.corkedRequestsFree = corkReq;
  	  }
  	}

  	Object.defineProperty(Writable.prototype, 'destroyed', {
  	  get: function () {
  	    if (this._writableState === undefined) {
  	      return false;
  	    }
  	    return this._writableState.destroyed;
  	  },
  	  set: function (value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (!this._writableState) {
  	      return;
  	    }

  	    // backward compatibility, the user is explicitly
  	    // managing destroyed
  	    this._writableState.destroyed = value;
  	  }
  	});

  	Writable.prototype.destroy = destroyImpl.destroy;
  	Writable.prototype._undestroy = destroyImpl.undestroy;
  	Writable.prototype._destroy = function (err, cb) {
  	  this.end();
  	  cb(err);
  	};
  	}).call(this,require('_process'),typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate);

  	},{"./_stream_duplex":104,"./internal/streams/destroy":110,"./internal/streams/stream":111,"_process":99,"core-util-is":56,"inherits":94,"process-nextick-args":98,"safe-buffer":113,"timers":119,"util-deprecate":124}],109:[function(require,module,exports){

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var Buffer = require('safe-buffer').Buffer;
  	var util = require('util');

  	function copyBuffer(src, target, offset) {
  	  src.copy(target, offset);
  	}

  	module.exports = function () {
  	  function BufferList() {
  	    _classCallCheck(this, BufferList);

  	    this.head = null;
  	    this.tail = null;
  	    this.length = 0;
  	  }

  	  BufferList.prototype.push = function push(v) {
  	    var entry = { data: v, next: null };
  	    if (this.length > 0) { this.tail.next = entry; }else { this.head = entry; }
  	    this.tail = entry;
  	    ++this.length;
  	  };

  	  BufferList.prototype.unshift = function unshift(v) {
  	    var entry = { data: v, next: this.head };
  	    if (this.length === 0) { this.tail = entry; }
  	    this.head = entry;
  	    ++this.length;
  	  };

  	  BufferList.prototype.shift = function shift() {
  	    if (this.length === 0) { return; }
  	    var ret = this.head.data;
  	    if (this.length === 1) { this.head = this.tail = null; }else { this.head = this.head.next; }
  	    --this.length;
  	    return ret;
  	  };

  	  BufferList.prototype.clear = function clear() {
  	    this.head = this.tail = null;
  	    this.length = 0;
  	  };

  	  BufferList.prototype.join = function join(s) {
  	    if (this.length === 0) { return ''; }
  	    var p = this.head;
  	    var ret = '' + p.data;
  	    while (p = p.next) {
  	      ret += s + p.data;
  	    }return ret;
  	  };

  	  BufferList.prototype.concat = function concat(n) {
  	    if (this.length === 0) { return Buffer.alloc(0); }
  	    if (this.length === 1) { return this.head.data; }
  	    var ret = Buffer.allocUnsafe(n >>> 0);
  	    var p = this.head;
  	    var i = 0;
  	    while (p) {
  	      copyBuffer(p.data, ret, i);
  	      i += p.data.length;
  	      p = p.next;
  	    }
  	    return ret;
  	  };

  	  return BufferList;
  	}();

  	if (util && util.inspect && util.inspect.custom) {
  	  module.exports.prototype[util.inspect.custom] = function () {
  	    var obj = util.inspect({ length: this.length });
  	    return this.constructor.name + ' ' + obj;
  	  };
  	}
  	},{"safe-buffer":113,"util":51}],110:[function(require,module,exports){

  	/*<replacement>*/

  	var pna = require('process-nextick-args');
  	/*</replacement>*/

  	// undocumented cb() API, needed for core, not for public API
  	function destroy(err, cb) {
  	  var _this = this;

  	  var readableDestroyed = this._readableState && this._readableState.destroyed;
  	  var writableDestroyed = this._writableState && this._writableState.destroyed;

  	  if (readableDestroyed || writableDestroyed) {
  	    if (cb) {
  	      cb(err);
  	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
  	      pna.nextTick(emitErrorNT, this, err);
  	    }
  	    return this;
  	  }

  	  // we set destroyed to true before firing error callbacks in order
  	  // to make it re-entrance safe in case destroy() is called within callbacks

  	  if (this._readableState) {
  	    this._readableState.destroyed = true;
  	  }

  	  // if this is a duplex stream mark the writable part as destroyed as well
  	  if (this._writableState) {
  	    this._writableState.destroyed = true;
  	  }

  	  this._destroy(err || null, function (err) {
  	    if (!cb && err) {
  	      pna.nextTick(emitErrorNT, _this, err);
  	      if (_this._writableState) {
  	        _this._writableState.errorEmitted = true;
  	      }
  	    } else if (cb) {
  	      cb(err);
  	    }
  	  });

  	  return this;
  	}

  	function undestroy() {
  	  if (this._readableState) {
  	    this._readableState.destroyed = false;
  	    this._readableState.reading = false;
  	    this._readableState.ended = false;
  	    this._readableState.endEmitted = false;
  	  }

  	  if (this._writableState) {
  	    this._writableState.destroyed = false;
  	    this._writableState.ended = false;
  	    this._writableState.ending = false;
  	    this._writableState.finished = false;
  	    this._writableState.errorEmitted = false;
  	  }
  	}

  	function emitErrorNT(self, err) {
  	  self.emit('error', err);
  	}

  	module.exports = {
  	  destroy: destroy,
  	  undestroy: undestroy
  	};
  	},{"process-nextick-args":98}],111:[function(require,module,exports){
  	module.exports = require('events').EventEmitter;

  	},{"events":91}],112:[function(require,module,exports){
  	exports = module.exports = require('./lib/_stream_readable.js');
  	exports.Stream = exports;
  	exports.Readable = exports;
  	exports.Writable = require('./lib/_stream_writable.js');
  	exports.Duplex = require('./lib/_stream_duplex.js');
  	exports.Transform = require('./lib/_stream_transform.js');
  	exports.PassThrough = require('./lib/_stream_passthrough.js');

  	},{"./lib/_stream_duplex.js":104,"./lib/_stream_passthrough.js":105,"./lib/_stream_readable.js":106,"./lib/_stream_transform.js":107,"./lib/_stream_writable.js":108}],113:[function(require,module,exports){
  	/* eslint-disable node/no-deprecated-api */
  	var buffer = require('buffer');
  	var Buffer = buffer.Buffer;

  	// alternative to using Object.keys for old browsers
  	function copyProps (src, dst) {
  	  for (var key in src) {
  	    dst[key] = src[key];
  	  }
  	}
  	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  	  module.exports = buffer;
  	} else {
  	  // Copy properties from require('buffer')
  	  copyProps(buffer, exports);
  	  exports.Buffer = SafeBuffer;
  	}

  	function SafeBuffer (arg, encodingOrOffset, length) {
  	  return Buffer(arg, encodingOrOffset, length)
  	}

  	// Copy static methods from Buffer
  	copyProps(Buffer, SafeBuffer);

  	SafeBuffer.from = function (arg, encodingOrOffset, length) {
  	  if (typeof arg === 'number') {
  	    throw new TypeError('Argument must not be a number')
  	  }
  	  return Buffer(arg, encodingOrOffset, length)
  	};

  	SafeBuffer.alloc = function (size, fill, encoding) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  var buf = Buffer(size);
  	  if (fill !== undefined) {
  	    if (typeof encoding === 'string') {
  	      buf.fill(fill, encoding);
  	    } else {
  	      buf.fill(fill);
  	    }
  	  } else {
  	    buf.fill(0);
  	  }
  	  return buf
  	};

  	SafeBuffer.allocUnsafe = function (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  return Buffer(size)
  	};

  	SafeBuffer.allocUnsafeSlow = function (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  return buffer.SlowBuffer(size)
  	};

  	},{"buffer":53}],114:[function(require,module,exports){
  	(function (global){
  	var ClientRequest = require('./lib/request');
  	var response = require('./lib/response');
  	var extend = require('xtend');
  	var statusCodes = require('builtin-status-codes');
  	var url = require('url');

  	var http = exports;

  	http.request = function (opts, cb) {
  		if (typeof opts === 'string')
  			{ opts = url.parse(opts); }
  		else
  			{ opts = extend(opts); }

  		// Normally, the page is loaded from http or https, so not specifying a protocol
  		// will result in a (valid) protocol-relative url. However, this won't work if
  		// the protocol is something else, like 'file:'
  		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

  		var protocol = opts.protocol || defaultProtocol;
  		var host = opts.hostname || opts.host;
  		var port = opts.port;
  		var path = opts.path || '/';

  		// Necessary for IPv6 addresses
  		if (host && host.indexOf(':') !== -1)
  			{ host = '[' + host + ']'; }

  		// This may be a relative url. The browser should always be able to interpret it correctly.
  		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
  		opts.method = (opts.method || 'GET').toUpperCase();
  		opts.headers = opts.headers || {};

  		// Also valid opts.auth, opts.mode

  		var req = new ClientRequest(opts);
  		if (cb)
  			{ req.on('response', cb); }
  		return req
  	};

  	http.get = function get (opts, cb) {
  		var req = http.request(opts, cb);
  		req.end();
  		return req
  	};

  	http.ClientRequest = ClientRequest;
  	http.IncomingMessage = response.IncomingMessage;

  	http.Agent = function () {};
  	http.Agent.defaultMaxSockets = 4;

  	http.globalAgent = new http.Agent();

  	http.STATUS_CODES = statusCodes;

  	http.METHODS = [
  		'CHECKOUT',
  		'CONNECT',
  		'COPY',
  		'DELETE',
  		'GET',
  		'HEAD',
  		'LOCK',
  		'M-SEARCH',
  		'MERGE',
  		'MKACTIVITY',
  		'MKCOL',
  		'MOVE',
  		'NOTIFY',
  		'OPTIONS',
  		'PATCH',
  		'POST',
  		'PROPFIND',
  		'PROPPATCH',
  		'PURGE',
  		'PUT',
  		'REPORT',
  		'SEARCH',
  		'SUBSCRIBE',
  		'TRACE',
  		'UNLOCK',
  		'UNSUBSCRIBE'
  	];
  	}).call(this,typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{"./lib/request":116,"./lib/response":117,"builtin-status-codes":54,"url":121,"xtend":131}],115:[function(require,module,exports){
  	(function (global){
  	exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);

  	exports.writableStream = isFunction(global.WritableStream);

  	exports.abortController = isFunction(global.AbortController);

  	exports.blobConstructor = false;
  	try {
  		new Blob([new ArrayBuffer(1)]);
  		exports.blobConstructor = true;
  	} catch (e) {}

  	// The xhr request to example.com may violate some restrictive CSP configurations,
  	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
  	// and assume support for certain features below.
  	var xhr;
  	function getXHR () {
  		// Cache the xhr value
  		if (xhr !== undefined) { return xhr }

  		if (global.XMLHttpRequest) {
  			xhr = new global.XMLHttpRequest();
  			// If XDomainRequest is available (ie only, where xhr might not work
  			// cross domain), use the page location. Otherwise use example.com
  			// Note: this doesn't actually make an http request.
  			try {
  				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
  			} catch(e) {
  				xhr = null;
  			}
  		} else {
  			// Service workers don't have XHR
  			xhr = null;
  		}
  		return xhr
  	}

  	function checkTypeSupport (type) {
  		var xhr = getXHR();
  		if (!xhr) { return false }
  		try {
  			xhr.responseType = type;
  			return xhr.responseType === type
  		} catch (e) {}
  		return false
  	}

  	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
  	// Safari 7.1 appears to have fixed this bug.
  	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
  	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);

  	// If fetch is supported, then arraybuffer will be supported too. Skip calling
  	// checkTypeSupport(), since that calls getXHR().
  	exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'));

  	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
  	// be used if it's available, just return false for these to avoid the warnings.
  	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
  	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
  		checkTypeSupport('moz-chunked-arraybuffer');

  	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
  	// getXHR().
  	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

  	exports.vbArray = isFunction(global.VBArray);

  	function isFunction (value) {
  		return typeof value === 'function'
  	}

  	xhr = null; // Help gc

  	}).call(this,typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{}],116:[function(require,module,exports){
  	(function (process,global,Buffer){
  	var capability = require('./capability');
  	var inherits = require('inherits');
  	var response = require('./response');
  	var stream = require('readable-stream');
  	var toArrayBuffer = require('to-arraybuffer');

  	var IncomingMessage = response.IncomingMessage;
  	var rStates = response.readyStates;

  	function decideMode (preferBinary, useFetch) {
  		if (capability.fetch && useFetch) {
  			return 'fetch'
  		} else if (capability.mozchunkedarraybuffer) {
  			return 'moz-chunked-arraybuffer'
  		} else if (capability.msstream) {
  			return 'ms-stream'
  		} else if (capability.arraybuffer && preferBinary) {
  			return 'arraybuffer'
  		} else if (capability.vbArray && preferBinary) {
  			return 'text:vbarray'
  		} else {
  			return 'text'
  		}
  	}

  	var ClientRequest = module.exports = function (opts) {
  		var self = this;
  		stream.Writable.call(self);

  		self._opts = opts;
  		self._body = [];
  		self._headers = {};
  		if (opts.auth)
  			{ self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64')); }
  		Object.keys(opts.headers).forEach(function (name) {
  			self.setHeader(name, opts.headers[name]);
  		});

  		var preferBinary;
  		var useFetch = true;
  		if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
  			// If the use of XHR should be preferred. Not typically needed.
  			useFetch = false;
  			preferBinary = true;
  		} else if (opts.mode === 'prefer-streaming') {
  			// If streaming is a high priority but binary compatibility and
  			// the accuracy of the 'content-type' header aren't
  			preferBinary = false;
  		} else if (opts.mode === 'allow-wrong-content-type') {
  			// If streaming is more important than preserving the 'content-type' header
  			preferBinary = !capability.overrideMimeType;
  		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
  			// Use binary if text streaming may corrupt data or the content-type header, or for speed
  			preferBinary = true;
  		} else {
  			throw new Error('Invalid value for opts.mode')
  		}
  		self._mode = decideMode(preferBinary, useFetch);
  		self._fetchTimer = null;

  		self.on('finish', function () {
  			self._onFinish();
  		});
  	};

  	inherits(ClientRequest, stream.Writable);

  	ClientRequest.prototype.setHeader = function (name, value) {
  		var self = this;
  		var lowerName = name.toLowerCase();
  		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
  		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
  		// http-browserify did it, so I will too.
  		if (unsafeHeaders.indexOf(lowerName) !== -1)
  			{ return }

  		self._headers[lowerName] = {
  			name: name,
  			value: value
  		};
  	};

  	ClientRequest.prototype.getHeader = function (name) {
  		var header = this._headers[name.toLowerCase()];
  		if (header)
  			{ return header.value }
  		return null
  	};

  	ClientRequest.prototype.removeHeader = function (name) {
  		var self = this;
  		delete self._headers[name.toLowerCase()];
  	};

  	ClientRequest.prototype._onFinish = function () {
  		var self = this;

  		if (self._destroyed)
  			{ return }
  		var opts = self._opts;

  		var headersObj = self._headers;
  		var body = null;
  		if (opts.method !== 'GET' && opts.method !== 'HEAD') {
  			if (capability.arraybuffer) {
  				body = toArrayBuffer(Buffer.concat(self._body));
  			} else if (capability.blobConstructor) {
  				body = new global.Blob(self._body.map(function (buffer) {
  					return toArrayBuffer(buffer)
  				}), {
  					type: (headersObj['content-type'] || {}).value || ''
  				});
  			} else {
  				// get utf8 string
  				body = Buffer.concat(self._body).toString();
  			}
  		}

  		// create flattened list of headers
  		var headersList = [];
  		Object.keys(headersObj).forEach(function (keyName) {
  			var name = headersObj[keyName].name;
  			var value = headersObj[keyName].value;
  			if (Array.isArray(value)) {
  				value.forEach(function (v) {
  					headersList.push([name, v]);
  				});
  			} else {
  				headersList.push([name, value]);
  			}
  		});

  		if (self._mode === 'fetch') {
  			var signal = null;
  			if (capability.abortController) {
  				var controller = new AbortController();
  				signal = controller.signal;
  				self._fetchAbortController = controller;

  				if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
  					self._fetchTimer = global.setTimeout(function () {
  						self.emit('requestTimeout');
  						if (self._fetchAbortController)
  							{ self._fetchAbortController.abort(); }
  					}, opts.requestTimeout);
  				}
  			}

  			global.fetch(self._opts.url, {
  				method: self._opts.method,
  				headers: headersList,
  				body: body || undefined,
  				mode: 'cors',
  				credentials: opts.withCredentials ? 'include' : 'same-origin',
  				signal: signal
  			}).then(function (response) {
  				self._fetchResponse = response;
  				self._connect();
  			}, function (reason) {
  				global.clearTimeout(self._fetchTimer);
  				if (!self._destroyed)
  					{ self.emit('error', reason); }
  			});
  		} else {
  			var xhr = self._xhr = new global.XMLHttpRequest();
  			try {
  				xhr.open(self._opts.method, self._opts.url, true);
  			} catch (err) {
  				process.nextTick(function () {
  					self.emit('error', err);
  				});
  				return
  			}

  			// Can't set responseType on really old browsers
  			if ('responseType' in xhr)
  				{ xhr.responseType = self._mode.split(':')[0]; }

  			if ('withCredentials' in xhr)
  				{ xhr.withCredentials = !!opts.withCredentials; }

  			if (self._mode === 'text' && 'overrideMimeType' in xhr)
  				{ xhr.overrideMimeType('text/plain; charset=x-user-defined'); }

  			if ('requestTimeout' in opts) {
  				xhr.timeout = opts.requestTimeout;
  				xhr.ontimeout = function () {
  					self.emit('requestTimeout');
  				};
  			}

  			headersList.forEach(function (header) {
  				xhr.setRequestHeader(header[0], header[1]);
  			});

  			self._response = null;
  			xhr.onreadystatechange = function () {
  				switch (xhr.readyState) {
  					case rStates.LOADING:
  					case rStates.DONE:
  						self._onXHRProgress();
  						break
  				}
  			};
  			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
  			// in onprogress, not in onreadystatechange with xhr.readyState = 3
  			if (self._mode === 'moz-chunked-arraybuffer') {
  				xhr.onprogress = function () {
  					self._onXHRProgress();
  				};
  			}

  			xhr.onerror = function () {
  				if (self._destroyed)
  					{ return }
  				self.emit('error', new Error('XHR error'));
  			};

  			try {
  				xhr.send(body);
  			} catch (err) {
  				process.nextTick(function () {
  					self.emit('error', err);
  				});
  				return
  			}
  		}
  	};

  	/**
  	 * Checks if xhr.status is readable and non-zero, indicating no error.
  	 * Even though the spec says it should be available in readyState 3,
  	 * accessing it throws an exception in IE8
  	 */
  	function statusValid (xhr) {
  		try {
  			var status = xhr.status;
  			return (status !== null && status !== 0)
  		} catch (e) {
  			return false
  		}
  	}

  	ClientRequest.prototype._onXHRProgress = function () {
  		var self = this;

  		if (!statusValid(self._xhr) || self._destroyed)
  			{ return }

  		if (!self._response)
  			{ self._connect(); }

  		self._response._onXHRProgress();
  	};

  	ClientRequest.prototype._connect = function () {
  		var self = this;

  		if (self._destroyed)
  			{ return }

  		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer);
  		self._response.on('error', function(err) {
  			self.emit('error', err);
  		});

  		self.emit('response', self._response);
  	};

  	ClientRequest.prototype._write = function (chunk, encoding, cb) {
  		var self = this;

  		self._body.push(chunk);
  		cb();
  	};

  	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
  		var self = this;
  		self._destroyed = true;
  		global.clearTimeout(self._fetchTimer);
  		if (self._response)
  			{ self._response._destroyed = true; }
  		if (self._xhr)
  			{ self._xhr.abort(); }
  		else if (self._fetchAbortController)
  			{ self._fetchAbortController.abort(); }
  	};

  	ClientRequest.prototype.end = function (data, encoding, cb) {
  		var self = this;
  		if (typeof data === 'function') {
  			cb = data;
  			data = undefined;
  		}

  		stream.Writable.prototype.end.call(self, data, encoding, cb);
  	};

  	ClientRequest.prototype.flushHeaders = function () {};
  	ClientRequest.prototype.setTimeout = function () {};
  	ClientRequest.prototype.setNoDelay = function () {};
  	ClientRequest.prototype.setSocketKeepAlive = function () {};

  	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
  	var unsafeHeaders = [
  		'accept-charset',
  		'accept-encoding',
  		'access-control-request-headers',
  		'access-control-request-method',
  		'connection',
  		'content-length',
  		'cookie',
  		'cookie2',
  		'date',
  		'dnt',
  		'expect',
  		'host',
  		'keep-alive',
  		'origin',
  		'referer',
  		'te',
  		'trailer',
  		'transfer-encoding',
  		'upgrade',
  		'via'
  	];

  	}).call(this,require('_process'),typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer);

  	},{"./capability":115,"./response":117,"_process":99,"buffer":53,"inherits":94,"readable-stream":112,"to-arraybuffer":120}],117:[function(require,module,exports){
  	(function (process,global,Buffer){
  	var capability = require('./capability');
  	var inherits = require('inherits');
  	var stream = require('readable-stream');

  	var rStates = exports.readyStates = {
  		UNSENT: 0,
  		OPENED: 1,
  		HEADERS_RECEIVED: 2,
  		LOADING: 3,
  		DONE: 4
  	};

  	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
  		var self = this;
  		stream.Readable.call(self);

  		self._mode = mode;
  		self.headers = {};
  		self.rawHeaders = [];
  		self.trailers = {};
  		self.rawTrailers = [];

  		// Fake the 'close' event, but only once 'end' fires
  		self.on('end', function () {
  			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
  			process.nextTick(function () {
  				self.emit('close');
  			});
  		});

  		if (mode === 'fetch') {
  			self._fetchResponse = response;

  			self.url = response.url;
  			self.statusCode = response.status;
  			self.statusMessage = response.statusText;
  			
  			response.headers.forEach(function (header, key){
  				self.headers[key.toLowerCase()] = header;
  				self.rawHeaders.push(key, header);
  			});

  			if (capability.writableStream) {
  				var writable = new WritableStream({
  					write: function (chunk) {
  						return new Promise(function (resolve, reject) {
  							if (self._destroyed) {
  								reject();
  							} else if(self.push(new Buffer(chunk))) {
  								resolve();
  							} else {
  								self._resumeFetch = resolve;
  							}
  						})
  					},
  					close: function () {
  						global.clearTimeout(fetchTimer);
  						if (!self._destroyed)
  							{ self.push(null); }
  					},
  					abort: function (err) {
  						if (!self._destroyed)
  							{ self.emit('error', err); }
  					}
  				});

  				try {
  					response.body.pipeTo(writable).catch(function (err) {
  						global.clearTimeout(fetchTimer);
  						if (!self._destroyed)
  							{ self.emit('error', err); }
  					});
  					return
  				} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
  			}
  			// fallback for when writableStream or pipeTo aren't available
  			var reader = response.body.getReader();
  			function read () {
  				reader.read().then(function (result) {
  					if (self._destroyed)
  						{ return }
  					if (result.done) {
  						global.clearTimeout(fetchTimer);
  						self.push(null);
  						return
  					}
  					self.push(new Buffer(result.value));
  					read();
  				}).catch(function (err) {
  					global.clearTimeout(fetchTimer);
  					if (!self._destroyed)
  						{ self.emit('error', err); }
  				});
  			}
  			read();
  		} else {
  			self._xhr = xhr;
  			self._pos = 0;

  			self.url = xhr.responseURL;
  			self.statusCode = xhr.status;
  			self.statusMessage = xhr.statusText;
  			var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
  			headers.forEach(function (header) {
  				var matches = header.match(/^([^:]+):\s*(.*)/);
  				if (matches) {
  					var key = matches[1].toLowerCase();
  					if (key === 'set-cookie') {
  						if (self.headers[key] === undefined) {
  							self.headers[key] = [];
  						}
  						self.headers[key].push(matches[2]);
  					} else if (self.headers[key] !== undefined) {
  						self.headers[key] += ', ' + matches[2];
  					} else {
  						self.headers[key] = matches[2];
  					}
  					self.rawHeaders.push(matches[1], matches[2]);
  				}
  			});

  			self._charset = 'x-user-defined';
  			if (!capability.overrideMimeType) {
  				var mimeType = self.rawHeaders['mime-type'];
  				if (mimeType) {
  					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
  					if (charsetMatch) {
  						self._charset = charsetMatch[1].toLowerCase();
  					}
  				}
  				if (!self._charset)
  					{ self._charset = 'utf-8'; } // best guess
  			}
  		}
  	};

  	inherits(IncomingMessage, stream.Readable);

  	IncomingMessage.prototype._read = function () {
  		var self = this;

  		var resolve = self._resumeFetch;
  		if (resolve) {
  			self._resumeFetch = null;
  			resolve();
  		}
  	};

  	IncomingMessage.prototype._onXHRProgress = function () {
  		var self = this;

  		var xhr = self._xhr;

  		var response = null;
  		switch (self._mode) {
  			case 'text:vbarray': // For IE9
  				if (xhr.readyState !== rStates.DONE)
  					{ break }
  				try {
  					// This fails in IE8
  					response = new global.VBArray(xhr.responseBody).toArray();
  				} catch (e) {}
  				if (response !== null) {
  					self.push(new Buffer(response));
  					break
  				}
  				// Falls through in IE8	
  			case 'text':
  				try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
  					response = xhr.responseText;
  				} catch (e) {
  					self._mode = 'text:vbarray';
  					break
  				}
  				if (response.length > self._pos) {
  					var newData = response.substr(self._pos);
  					if (self._charset === 'x-user-defined') {
  						var buffer = new Buffer(newData.length);
  						for (var i = 0; i < newData.length; i++)
  							{ buffer[i] = newData.charCodeAt(i) & 0xff; }

  						self.push(buffer);
  					} else {
  						self.push(newData, self._charset);
  					}
  					self._pos = response.length;
  				}
  				break
  			case 'arraybuffer':
  				if (xhr.readyState !== rStates.DONE || !xhr.response)
  					{ break }
  				response = xhr.response;
  				self.push(new Buffer(new Uint8Array(response)));
  				break
  			case 'moz-chunked-arraybuffer': // take whole
  				response = xhr.response;
  				if (xhr.readyState !== rStates.LOADING || !response)
  					{ break }
  				self.push(new Buffer(new Uint8Array(response)));
  				break
  			case 'ms-stream':
  				response = xhr.response;
  				if (xhr.readyState !== rStates.LOADING)
  					{ break }
  				var reader = new global.MSStreamReader();
  				reader.onprogress = function () {
  					if (reader.result.byteLength > self._pos) {
  						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
  						self._pos = reader.result.byteLength;
  					}
  				};
  				reader.onload = function () {
  					self.push(null);
  				};
  				// reader.onerror = ??? // TODO: this
  				reader.readAsArrayBuffer(response);
  				break
  		}

  		// The ms-stream case handles end separately in reader.onload()
  		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
  			self.push(null);
  		}
  	};

  	}).call(this,require('_process'),typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer);

  	},{"./capability":115,"_process":99,"buffer":53,"inherits":94,"readable-stream":112}],118:[function(require,module,exports){

  	/*<replacement>*/

  	var Buffer = require('safe-buffer').Buffer;
  	/*</replacement>*/

  	var isEncoding = Buffer.isEncoding || function (encoding) {
  	  encoding = '' + encoding;
  	  switch (encoding && encoding.toLowerCase()) {
  	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
  	      return true;
  	    default:
  	      return false;
  	  }
  	};

  	function _normalizeEncoding(enc) {
  	  if (!enc) { return 'utf8'; }
  	  var retried;
  	  while (true) {
  	    switch (enc) {
  	      case 'utf8':
  	      case 'utf-8':
  	        return 'utf8';
  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return 'utf16le';
  	      case 'latin1':
  	      case 'binary':
  	        return 'latin1';
  	      case 'base64':
  	      case 'ascii':
  	      case 'hex':
  	        return enc;
  	      default:
  	        if (retried) { return; } // undefined
  	        enc = ('' + enc).toLowerCase();
  	        retried = true;
  	    }
  	  }
  	}
  	// Do not cache `Buffer.isEncoding` when checking encoding names as some
  	// modules monkey-patch it to support additional encodings
  	function normalizeEncoding(enc) {
  	  var nenc = _normalizeEncoding(enc);
  	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) { throw new Error('Unknown encoding: ' + enc); }
  	  return nenc || enc;
  	}

  	// StringDecoder provides an interface for efficiently splitting a series of
  	// buffers into a series of JS strings without breaking apart multi-byte
  	// characters.
  	exports.StringDecoder = StringDecoder;
  	function StringDecoder(encoding) {
  	  this.encoding = normalizeEncoding(encoding);
  	  var nb;
  	  switch (this.encoding) {
  	    case 'utf16le':
  	      this.text = utf16Text;
  	      this.end = utf16End;
  	      nb = 4;
  	      break;
  	    case 'utf8':
  	      this.fillLast = utf8FillLast;
  	      nb = 4;
  	      break;
  	    case 'base64':
  	      this.text = base64Text;
  	      this.end = base64End;
  	      nb = 3;
  	      break;
  	    default:
  	      this.write = simpleWrite;
  	      this.end = simpleEnd;
  	      return;
  	  }
  	  this.lastNeed = 0;
  	  this.lastTotal = 0;
  	  this.lastChar = Buffer.allocUnsafe(nb);
  	}

  	StringDecoder.prototype.write = function (buf) {
  	  if (buf.length === 0) { return ''; }
  	  var r;
  	  var i;
  	  if (this.lastNeed) {
  	    r = this.fillLast(buf);
  	    if (r === undefined) { return ''; }
  	    i = this.lastNeed;
  	    this.lastNeed = 0;
  	  } else {
  	    i = 0;
  	  }
  	  if (i < buf.length) { return r ? r + this.text(buf, i) : this.text(buf, i); }
  	  return r || '';
  	};

  	StringDecoder.prototype.end = utf8End;

  	// Returns only complete characters in a Buffer
  	StringDecoder.prototype.text = utf8Text;

  	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  	StringDecoder.prototype.fillLast = function (buf) {
  	  if (this.lastNeed <= buf.length) {
  	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
  	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  	  }
  	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  	  this.lastNeed -= buf.length;
  	};

  	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  	// continuation byte. If an invalid byte is detected, -2 is returned.
  	function utf8CheckByte(byte) {
  	  if (byte <= 0x7F) { return 0; }else if (byte >> 5 === 0x06) { return 2; }else if (byte >> 4 === 0x0E) { return 3; }else if (byte >> 3 === 0x1E) { return 4; }
  	  return byte >> 6 === 0x02 ? -1 : -2;
  	}

  	// Checks at most 3 bytes at the end of a Buffer in order to detect an
  	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  	// needed to complete the UTF-8 character (if applicable) are returned.
  	function utf8CheckIncomplete(self, buf, i) {
  	  var j = buf.length - 1;
  	  if (j < i) { return 0; }
  	  var nb = utf8CheckByte(buf[j]);
  	  if (nb >= 0) {
  	    if (nb > 0) { self.lastNeed = nb - 1; }
  	    return nb;
  	  }
  	  if (--j < i || nb === -2) { return 0; }
  	  nb = utf8CheckByte(buf[j]);
  	  if (nb >= 0) {
  	    if (nb > 0) { self.lastNeed = nb - 2; }
  	    return nb;
  	  }
  	  if (--j < i || nb === -2) { return 0; }
  	  nb = utf8CheckByte(buf[j]);
  	  if (nb >= 0) {
  	    if (nb > 0) {
  	      if (nb === 2) { nb = 0; }else { self.lastNeed = nb - 3; }
  	    }
  	    return nb;
  	  }
  	  return 0;
  	}

  	// Validates as many continuation bytes for a multi-byte UTF-8 character as
  	// needed or are available. If we see a non-continuation byte where we expect
  	// one, we "replace" the validated continuation bytes we've seen so far with
  	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  	// behavior. The continuation byte check is included three times in the case
  	// where all of the continuation bytes for a character exist in the same buffer.
  	// It is also done this way as a slight performance increase instead of using a
  	// loop.
  	function utf8CheckExtraBytes(self, buf, p) {
  	  if ((buf[0] & 0xC0) !== 0x80) {
  	    self.lastNeed = 0;
  	    return '\ufffd';
  	  }
  	  if (self.lastNeed > 1 && buf.length > 1) {
  	    if ((buf[1] & 0xC0) !== 0x80) {
  	      self.lastNeed = 1;
  	      return '\ufffd';
  	    }
  	    if (self.lastNeed > 2 && buf.length > 2) {
  	      if ((buf[2] & 0xC0) !== 0x80) {
  	        self.lastNeed = 2;
  	        return '\ufffd';
  	      }
  	    }
  	  }
  	}

  	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  	function utf8FillLast(buf) {
  	  var p = this.lastTotal - this.lastNeed;
  	  var r = utf8CheckExtraBytes(this, buf);
  	  if (r !== undefined) { return r; }
  	  if (this.lastNeed <= buf.length) {
  	    buf.copy(this.lastChar, p, 0, this.lastNeed);
  	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  	  }
  	  buf.copy(this.lastChar, p, 0, buf.length);
  	  this.lastNeed -= buf.length;
  	}

  	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  	// partial character, the character's bytes are buffered until the required
  	// number of bytes are available.
  	function utf8Text(buf, i) {
  	  var total = utf8CheckIncomplete(this, buf, i);
  	  if (!this.lastNeed) { return buf.toString('utf8', i); }
  	  this.lastTotal = total;
  	  var end = buf.length - (total - this.lastNeed);
  	  buf.copy(this.lastChar, 0, end);
  	  return buf.toString('utf8', i, end);
  	}

  	// For UTF-8, a replacement character is added when ending on a partial
  	// character.
  	function utf8End(buf) {
  	  var r = buf && buf.length ? this.write(buf) : '';
  	  if (this.lastNeed) { return r + '\ufffd'; }
  	  return r;
  	}

  	// UTF-16LE typically needs two bytes per character, but even if we have an even
  	// number of bytes available, we need to check if we end on a leading/high
  	// surrogate. In that case, we need to wait for the next two bytes in order to
  	// decode the last character properly.
  	function utf16Text(buf, i) {
  	  if ((buf.length - i) % 2 === 0) {
  	    var r = buf.toString('utf16le', i);
  	    if (r) {
  	      var c = r.charCodeAt(r.length - 1);
  	      if (c >= 0xD800 && c <= 0xDBFF) {
  	        this.lastNeed = 2;
  	        this.lastTotal = 4;
  	        this.lastChar[0] = buf[buf.length - 2];
  	        this.lastChar[1] = buf[buf.length - 1];
  	        return r.slice(0, -1);
  	      }
  	    }
  	    return r;
  	  }
  	  this.lastNeed = 1;
  	  this.lastTotal = 2;
  	  this.lastChar[0] = buf[buf.length - 1];
  	  return buf.toString('utf16le', i, buf.length - 1);
  	}

  	// For UTF-16LE we do not explicitly append special replacement characters if we
  	// end on a partial character, we simply let v8 handle that.
  	function utf16End(buf) {
  	  var r = buf && buf.length ? this.write(buf) : '';
  	  if (this.lastNeed) {
  	    var end = this.lastTotal - this.lastNeed;
  	    return r + this.lastChar.toString('utf16le', 0, end);
  	  }
  	  return r;
  	}

  	function base64Text(buf, i) {
  	  var n = (buf.length - i) % 3;
  	  if (n === 0) { return buf.toString('base64', i); }
  	  this.lastNeed = 3 - n;
  	  this.lastTotal = 3;
  	  if (n === 1) {
  	    this.lastChar[0] = buf[buf.length - 1];
  	  } else {
  	    this.lastChar[0] = buf[buf.length - 2];
  	    this.lastChar[1] = buf[buf.length - 1];
  	  }
  	  return buf.toString('base64', i, buf.length - n);
  	}

  	function base64End(buf) {
  	  var r = buf && buf.length ? this.write(buf) : '';
  	  if (this.lastNeed) { return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed); }
  	  return r;
  	}

  	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  	function simpleWrite(buf) {
  	  return buf.toString(this.encoding);
  	}

  	function simpleEnd(buf) {
  	  return buf && buf.length ? this.write(buf) : '';
  	}
  	},{"safe-buffer":113}],119:[function(require,module,exports){
  	(function (setImmediate,clearImmediate){
  	var nextTick = require('process/browser.js').nextTick;
  	var apply = Function.prototype.apply;
  	var slice = Array.prototype.slice;
  	var immediateIds = {};
  	var nextImmediateId = 0;

  	// DOM APIs, for completeness

  	exports.setTimeout = function() {
  	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
  	};
  	exports.setInterval = function() {
  	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
  	};
  	exports.clearTimeout =
  	exports.clearInterval = function(timeout) { timeout.close(); };

  	function Timeout(id, clearFn) {
  	  this._id = id;
  	  this._clearFn = clearFn;
  	}
  	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
  	Timeout.prototype.close = function() {
  	  this._clearFn.call(window, this._id);
  	};

  	// Does not start the time, just sets up the members needed.
  	exports.enroll = function(item, msecs) {
  	  clearTimeout(item._idleTimeoutId);
  	  item._idleTimeout = msecs;
  	};

  	exports.unenroll = function(item) {
  	  clearTimeout(item._idleTimeoutId);
  	  item._idleTimeout = -1;
  	};

  	exports._unrefActive = exports.active = function(item) {
  	  clearTimeout(item._idleTimeoutId);

  	  var msecs = item._idleTimeout;
  	  if (msecs >= 0) {
  	    item._idleTimeoutId = setTimeout(function onTimeout() {
  	      if (item._onTimeout)
  	        { item._onTimeout(); }
  	    }, msecs);
  	  }
  	};

  	// That's not how node.js implements it but the exposed api is the same.
  	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  	  var id = nextImmediateId++;
  	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  	  immediateIds[id] = true;

  	  nextTick(function onNextTick() {
  	    if (immediateIds[id]) {
  	      // fn.call() is faster so we optimize for the common use-case
  	      // @see http://jsperf.com/call-apply-segu
  	      if (args) {
  	        fn.apply(null, args);
  	      } else {
  	        fn.call(null);
  	      }
  	      // Prevent ids from leaking
  	      exports.clearImmediate(id);
  	    }
  	  });

  	  return id;
  	};

  	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  	  delete immediateIds[id];
  	};
  	}).call(this,require("timers").setImmediate,require("timers").clearImmediate);

  	},{"process/browser.js":99,"timers":119}],120:[function(require,module,exports){
  	var Buffer = require('buffer').Buffer;

  	module.exports = function (buf) {
  		// If the buffer is backed by a Uint8Array, a faster version will work
  		if (buf instanceof Uint8Array) {
  			// If the buffer isn't a subarray, return the underlying ArrayBuffer
  			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
  				return buf.buffer
  			} else if (typeof buf.buffer.slice === 'function') {
  				// Otherwise we need to get a proper copy
  				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
  			}
  		}

  		if (Buffer.isBuffer(buf)) {
  			// This is the slow version that will work with any Buffer
  			// implementation (even in old browsers)
  			var arrayCopy = new Uint8Array(buf.length);
  			var len = buf.length;
  			for (var i = 0; i < len; i++) {
  				arrayCopy[i] = buf[i];
  			}
  			return arrayCopy.buffer
  		} else {
  			throw new Error('Argument must be a Buffer')
  		}
  	};

  	},{"buffer":53}],121:[function(require,module,exports){

  	var punycode = require('punycode');
  	var util = require('./util');

  	exports.parse = urlParse;
  	exports.resolve = urlResolve;
  	exports.resolveObject = urlResolveObject;
  	exports.format = urlFormat;

  	exports.Url = Url;

  	function Url() {
  	  this.protocol = null;
  	  this.slashes = null;
  	  this.auth = null;
  	  this.host = null;
  	  this.port = null;
  	  this.hostname = null;
  	  this.hash = null;
  	  this.search = null;
  	  this.query = null;
  	  this.pathname = null;
  	  this.path = null;
  	  this.href = null;
  	}

  	// Reference: RFC 3986, RFC 1808, RFC 2396

  	// define these here so at least they only have to be
  	// compiled once on the first module load.
  	var protocolPattern = /^([a-z0-9.+-]+:)/i,
  	    portPattern = /:[0-9]*$/,

  	    // Special case for a simple path URL
  	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

  	    // RFC 2396: characters reserved for delimiting URLs.
  	    // We actually just auto-escape these.
  	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

  	    // RFC 2396: characters not allowed for various reasons.
  	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

  	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  	    autoEscape = ['\''].concat(unwise),
  	    // Characters that are never ever allowed in a hostname.
  	    // Note that any invalid chars are also handled, but these
  	    // are the ones that are *expected* to be seen, so we fast-path
  	    // them.
  	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
  	    hostEndingChars = ['/', '?', '#'],
  	    hostnameMaxLen = 255,
  	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
  	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
  	    // protocols that can allow "unsafe" and "unwise" chars.
  	    unsafeProtocol = {
  	      'javascript': true,
  	      'javascript:': true
  	    },
  	    // protocols that never have a hostname.
  	    hostlessProtocol = {
  	      'javascript': true,
  	      'javascript:': true
  	    },
  	    // protocols that always contain a // bit.
  	    slashedProtocol = {
  	      'http': true,
  	      'https': true,
  	      'ftp': true,
  	      'gopher': true,
  	      'file': true,
  	      'http:': true,
  	      'https:': true,
  	      'ftp:': true,
  	      'gopher:': true,
  	      'file:': true
  	    },
  	    querystring = require('querystring');

  	function urlParse(url, parseQueryString, slashesDenoteHost) {
  	  if (url && util.isObject(url) && url instanceof Url) { return url; }

  	  var u = new Url;
  	  u.parse(url, parseQueryString, slashesDenoteHost);
  	  return u;
  	}

  	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  	  if (!util.isString(url)) {
  	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  	  }

  	  // Copy chrome, IE, opera backslash-handling behavior.
  	  // Back slashes before the query string get converted to forward slashes
  	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  	  var queryIndex = url.indexOf('?'),
  	      splitter =
  	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
  	      uSplit = url.split(splitter),
  	      slashRegex = /\\/g;
  	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  	  url = uSplit.join(splitter);

  	  var rest = url;

  	  // trim before proceeding.
  	  // This is to support parse stuff like "  http://foo.com  \n"
  	  rest = rest.trim();

  	  if (!slashesDenoteHost && url.split('#').length === 1) {
  	    // Try fast path regexp
  	    var simplePath = simplePathPattern.exec(rest);
  	    if (simplePath) {
  	      this.path = rest;
  	      this.href = rest;
  	      this.pathname = simplePath[1];
  	      if (simplePath[2]) {
  	        this.search = simplePath[2];
  	        if (parseQueryString) {
  	          this.query = querystring.parse(this.search.substr(1));
  	        } else {
  	          this.query = this.search.substr(1);
  	        }
  	      } else if (parseQueryString) {
  	        this.search = '';
  	        this.query = {};
  	      }
  	      return this;
  	    }
  	  }

  	  var proto = protocolPattern.exec(rest);
  	  if (proto) {
  	    proto = proto[0];
  	    var lowerProto = proto.toLowerCase();
  	    this.protocol = lowerProto;
  	    rest = rest.substr(proto.length);
  	  }

  	  // figure out if it's got a host
  	  // user@server is *always* interpreted as a hostname, and url
  	  // resolution will treat //foo/bar as host=foo,path=bar because that's
  	  // how the browser resolves relative URLs.
  	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
  	    var slashes = rest.substr(0, 2) === '//';
  	    if (slashes && !(proto && hostlessProtocol[proto])) {
  	      rest = rest.substr(2);
  	      this.slashes = true;
  	    }
  	  }

  	  if (!hostlessProtocol[proto] &&
  	      (slashes || (proto && !slashedProtocol[proto]))) {

  	    // there's a hostname.
  	    // the first instance of /, ?, ;, or # ends the host.
  	    //
  	    // If there is an @ in the hostname, then non-host chars *are* allowed
  	    // to the left of the last @ sign, unless some host-ending character
  	    // comes *before* the @-sign.
  	    // URLs are obnoxious.
  	    //
  	    // ex:
  	    // http://a@b@c/ => user:a@b host:c
  	    // http://a@b?@c => user:a host:c path:/?@c

  	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
  	    // Review our test case against browsers more comprehensively.

  	    // find the first instance of any hostEndingChars
  	    var hostEnd = -1;
  	    for (var i = 0; i < hostEndingChars.length; i++) {
  	      var hec = rest.indexOf(hostEndingChars[i]);
  	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
  	        { hostEnd = hec; }
  	    }

  	    // at this point, either we have an explicit point where the
  	    // auth portion cannot go past, or the last @ char is the decider.
  	    var auth, atSign;
  	    if (hostEnd === -1) {
  	      // atSign can be anywhere.
  	      atSign = rest.lastIndexOf('@');
  	    } else {
  	      // atSign must be in auth portion.
  	      // http://a@b/c@d => host:b auth:a path:/c@d
  	      atSign = rest.lastIndexOf('@', hostEnd);
  	    }

  	    // Now we have a portion which is definitely the auth.
  	    // Pull that off.
  	    if (atSign !== -1) {
  	      auth = rest.slice(0, atSign);
  	      rest = rest.slice(atSign + 1);
  	      this.auth = decodeURIComponent(auth);
  	    }

  	    // the host is the remaining to the left of the first non-host char
  	    hostEnd = -1;
  	    for (var i = 0; i < nonHostChars.length; i++) {
  	      var hec = rest.indexOf(nonHostChars[i]);
  	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
  	        { hostEnd = hec; }
  	    }
  	    // if we still have not hit it, then the entire thing is a host.
  	    if (hostEnd === -1)
  	      { hostEnd = rest.length; }

  	    this.host = rest.slice(0, hostEnd);
  	    rest = rest.slice(hostEnd);

  	    // pull out port.
  	    this.parseHost();

  	    // we've indicated that there is a hostname,
  	    // so even if it's empty, it has to be present.
  	    this.hostname = this.hostname || '';

  	    // if hostname begins with [ and ends with ]
  	    // assume that it's an IPv6 address.
  	    var ipv6Hostname = this.hostname[0] === '[' &&
  	        this.hostname[this.hostname.length - 1] === ']';

  	    // validate a little.
  	    if (!ipv6Hostname) {
  	      var hostparts = this.hostname.split(/\./);
  	      for (var i = 0, l = hostparts.length; i < l; i++) {
  	        var part = hostparts[i];
  	        if (!part) { continue; }
  	        if (!part.match(hostnamePartPattern)) {
  	          var newpart = '';
  	          for (var j = 0, k = part.length; j < k; j++) {
  	            if (part.charCodeAt(j) > 127) {
  	              // we replace non-ASCII char with a temporary placeholder
  	              // we need this to make sure size of hostname is not
  	              // broken by replacing non-ASCII by nothing
  	              newpart += 'x';
  	            } else {
  	              newpart += part[j];
  	            }
  	          }
  	          // we test again with ASCII char only
  	          if (!newpart.match(hostnamePartPattern)) {
  	            var validParts = hostparts.slice(0, i);
  	            var notHost = hostparts.slice(i + 1);
  	            var bit = part.match(hostnamePartStart);
  	            if (bit) {
  	              validParts.push(bit[1]);
  	              notHost.unshift(bit[2]);
  	            }
  	            if (notHost.length) {
  	              rest = '/' + notHost.join('.') + rest;
  	            }
  	            this.hostname = validParts.join('.');
  	            break;
  	          }
  	        }
  	      }
  	    }

  	    if (this.hostname.length > hostnameMaxLen) {
  	      this.hostname = '';
  	    } else {
  	      // hostnames are always lower case.
  	      this.hostname = this.hostname.toLowerCase();
  	    }

  	    if (!ipv6Hostname) {
  	      // IDNA Support: Returns a punycoded representation of "domain".
  	      // It only converts parts of the domain name that
  	      // have non-ASCII characters, i.e. it doesn't matter if
  	      // you call it with a domain that already is ASCII-only.
  	      this.hostname = punycode.toASCII(this.hostname);
  	    }

  	    var p = this.port ? ':' + this.port : '';
  	    var h = this.hostname || '';
  	    this.host = h + p;
  	    this.href += this.host;

  	    // strip [ and ] from the hostname
  	    // the host field still retains them, though
  	    if (ipv6Hostname) {
  	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
  	      if (rest[0] !== '/') {
  	        rest = '/' + rest;
  	      }
  	    }
  	  }

  	  // now rest is set to the post-host stuff.
  	  // chop off any delim chars.
  	  if (!unsafeProtocol[lowerProto]) {

  	    // First, make 100% sure that any "autoEscape" chars get
  	    // escaped, even if encodeURIComponent doesn't think they
  	    // need to be.
  	    for (var i = 0, l = autoEscape.length; i < l; i++) {
  	      var ae = autoEscape[i];
  	      if (rest.indexOf(ae) === -1)
  	        { continue; }
  	      var esc = encodeURIComponent(ae);
  	      if (esc === ae) {
  	        esc = escape(ae);
  	      }
  	      rest = rest.split(ae).join(esc);
  	    }
  	  }


  	  // chop off from the tail first.
  	  var hash = rest.indexOf('#');
  	  if (hash !== -1) {
  	    // got a fragment string.
  	    this.hash = rest.substr(hash);
  	    rest = rest.slice(0, hash);
  	  }
  	  var qm = rest.indexOf('?');
  	  if (qm !== -1) {
  	    this.search = rest.substr(qm);
  	    this.query = rest.substr(qm + 1);
  	    if (parseQueryString) {
  	      this.query = querystring.parse(this.query);
  	    }
  	    rest = rest.slice(0, qm);
  	  } else if (parseQueryString) {
  	    // no query string, but parseQueryString still requested
  	    this.search = '';
  	    this.query = {};
  	  }
  	  if (rest) { this.pathname = rest; }
  	  if (slashedProtocol[lowerProto] &&
  	      this.hostname && !this.pathname) {
  	    this.pathname = '/';
  	  }

  	  //to support http.request
  	  if (this.pathname || this.search) {
  	    var p = this.pathname || '';
  	    var s = this.search || '';
  	    this.path = p + s;
  	  }

  	  // finally, reconstruct the href based on what has been validated.
  	  this.href = this.format();
  	  return this;
  	};

  	// format a parsed object into a url string
  	function urlFormat(obj) {
  	  // ensure it's an object, and not a string url.
  	  // If it's an obj, this is a no-op.
  	  // this way, you can call url_format() on strings
  	  // to clean up potentially wonky urls.
  	  if (util.isString(obj)) { obj = urlParse(obj); }
  	  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }
  	  return obj.format();
  	}

  	Url.prototype.format = function() {
  	  var auth = this.auth || '';
  	  if (auth) {
  	    auth = encodeURIComponent(auth);
  	    auth = auth.replace(/%3A/i, ':');
  	    auth += '@';
  	  }

  	  var protocol = this.protocol || '',
  	      pathname = this.pathname || '',
  	      hash = this.hash || '',
  	      host = false,
  	      query = '';

  	  if (this.host) {
  	    host = auth + this.host;
  	  } else if (this.hostname) {
  	    host = auth + (this.hostname.indexOf(':') === -1 ?
  	        this.hostname :
  	        '[' + this.hostname + ']');
  	    if (this.port) {
  	      host += ':' + this.port;
  	    }
  	  }

  	  if (this.query &&
  	      util.isObject(this.query) &&
  	      Object.keys(this.query).length) {
  	    query = querystring.stringify(this.query);
  	  }

  	  var search = this.search || (query && ('?' + query)) || '';

  	  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }

  	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  	  // unless they had them to begin with.
  	  if (this.slashes ||
  	      (!protocol || slashedProtocol[protocol]) && host !== false) {
  	    host = '//' + (host || '');
  	    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }
  	  } else if (!host) {
  	    host = '';
  	  }

  	  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }
  	  if (search && search.charAt(0) !== '?') { search = '?' + search; }

  	  pathname = pathname.replace(/[?#]/g, function(match) {
  	    return encodeURIComponent(match);
  	  });
  	  search = search.replace('#', '%23');

  	  return protocol + host + pathname + search + hash;
  	};

  	function urlResolve(source, relative) {
  	  return urlParse(source, false, true).resolve(relative);
  	}

  	Url.prototype.resolve = function(relative) {
  	  return this.resolveObject(urlParse(relative, false, true)).format();
  	};

  	function urlResolveObject(source, relative) {
  	  if (!source) { return relative; }
  	  return urlParse(source, false, true).resolveObject(relative);
  	}

  	Url.prototype.resolveObject = function(relative) {
  	  if (util.isString(relative)) {
  	    var rel = new Url();
  	    rel.parse(relative, false, true);
  	    relative = rel;
  	  }

  	  var result = new Url();
  	  var tkeys = Object.keys(this);
  	  for (var tk = 0; tk < tkeys.length; tk++) {
  	    var tkey = tkeys[tk];
  	    result[tkey] = this[tkey];
  	  }

  	  // hash is always overridden, no matter what.
  	  // even href="" will remove it.
  	  result.hash = relative.hash;

  	  // if the relative url is empty, then there's nothing left to do here.
  	  if (relative.href === '') {
  	    result.href = result.format();
  	    return result;
  	  }

  	  // hrefs like //foo/bar always cut to the protocol.
  	  if (relative.slashes && !relative.protocol) {
  	    // take everything except the protocol from relative
  	    var rkeys = Object.keys(relative);
  	    for (var rk = 0; rk < rkeys.length; rk++) {
  	      var rkey = rkeys[rk];
  	      if (rkey !== 'protocol')
  	        { result[rkey] = relative[rkey]; }
  	    }

  	    //urlParse appends trailing / to urls like http://www.example.com
  	    if (slashedProtocol[result.protocol] &&
  	        result.hostname && !result.pathname) {
  	      result.path = result.pathname = '/';
  	    }

  	    result.href = result.format();
  	    return result;
  	  }

  	  if (relative.protocol && relative.protocol !== result.protocol) {
  	    // if it's a known url protocol, then changing
  	    // the protocol does weird things
  	    // first, if it's not file:, then we MUST have a host,
  	    // and if there was a path
  	    // to begin with, then we MUST have a path.
  	    // if it is file:, then the host is dropped,
  	    // because that's known to be hostless.
  	    // anything else is assumed to be absolute.
  	    if (!slashedProtocol[relative.protocol]) {
  	      var keys = Object.keys(relative);
  	      for (var v = 0; v < keys.length; v++) {
  	        var k = keys[v];
  	        result[k] = relative[k];
  	      }
  	      result.href = result.format();
  	      return result;
  	    }

  	    result.protocol = relative.protocol;
  	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
  	      var relPath = (relative.pathname || '').split('/');
  	      while (relPath.length && !(relative.host = relPath.shift())){ }
  	      if (!relative.host) { relative.host = ''; }
  	      if (!relative.hostname) { relative.hostname = ''; }
  	      if (relPath[0] !== '') { relPath.unshift(''); }
  	      if (relPath.length < 2) { relPath.unshift(''); }
  	      result.pathname = relPath.join('/');
  	    } else {
  	      result.pathname = relative.pathname;
  	    }
  	    result.search = relative.search;
  	    result.query = relative.query;
  	    result.host = relative.host || '';
  	    result.auth = relative.auth;
  	    result.hostname = relative.hostname || relative.host;
  	    result.port = relative.port;
  	    // to support http.request
  	    if (result.pathname || result.search) {
  	      var p = result.pathname || '';
  	      var s = result.search || '';
  	      result.path = p + s;
  	    }
  	    result.slashes = result.slashes || relative.slashes;
  	    result.href = result.format();
  	    return result;
  	  }

  	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
  	      isRelAbs = (
  	          relative.host ||
  	          relative.pathname && relative.pathname.charAt(0) === '/'
  	      ),
  	      mustEndAbs = (isRelAbs || isSourceAbs ||
  	                    (result.host && relative.pathname)),
  	      removeAllDots = mustEndAbs,
  	      srcPath = result.pathname && result.pathname.split('/') || [],
  	      relPath = relative.pathname && relative.pathname.split('/') || [],
  	      psychotic = result.protocol && !slashedProtocol[result.protocol];

  	  // if the url is a non-slashed url, then relative
  	  // links like ../.. should be able
  	  // to crawl up to the hostname, as well.  This is strange.
  	  // result.protocol has already been set by now.
  	  // Later on, put the first path part into the host field.
  	  if (psychotic) {
  	    result.hostname = '';
  	    result.port = null;
  	    if (result.host) {
  	      if (srcPath[0] === '') { srcPath[0] = result.host; }
  	      else { srcPath.unshift(result.host); }
  	    }
  	    result.host = '';
  	    if (relative.protocol) {
  	      relative.hostname = null;
  	      relative.port = null;
  	      if (relative.host) {
  	        if (relPath[0] === '') { relPath[0] = relative.host; }
  	        else { relPath.unshift(relative.host); }
  	      }
  	      relative.host = null;
  	    }
  	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  	  }

  	  if (isRelAbs) {
  	    // it's absolute.
  	    result.host = (relative.host || relative.host === '') ?
  	                  relative.host : result.host;
  	    result.hostname = (relative.hostname || relative.hostname === '') ?
  	                      relative.hostname : result.hostname;
  	    result.search = relative.search;
  	    result.query = relative.query;
  	    srcPath = relPath;
  	    // fall through to the dot-handling below.
  	  } else if (relPath.length) {
  	    // it's relative
  	    // throw away the existing file, and take the new path instead.
  	    if (!srcPath) { srcPath = []; }
  	    srcPath.pop();
  	    srcPath = srcPath.concat(relPath);
  	    result.search = relative.search;
  	    result.query = relative.query;
  	  } else if (!util.isNullOrUndefined(relative.search)) {
  	    // just pull out the search.
  	    // like href='?foo'.
  	    // Put this after the other two cases because it simplifies the booleans
  	    if (psychotic) {
  	      result.hostname = result.host = srcPath.shift();
  	      //occationaly the auth can get stuck only in host
  	      //this especially happens in cases like
  	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
  	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
  	                       result.host.split('@') : false;
  	      if (authInHost) {
  	        result.auth = authInHost.shift();
  	        result.host = result.hostname = authInHost.shift();
  	      }
  	    }
  	    result.search = relative.search;
  	    result.query = relative.query;
  	    //to support http.request
  	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
  	      result.path = (result.pathname ? result.pathname : '') +
  	                    (result.search ? result.search : '');
  	    }
  	    result.href = result.format();
  	    return result;
  	  }

  	  if (!srcPath.length) {
  	    // no path at all.  easy.
  	    // we've already handled the other stuff above.
  	    result.pathname = null;
  	    //to support http.request
  	    if (result.search) {
  	      result.path = '/' + result.search;
  	    } else {
  	      result.path = null;
  	    }
  	    result.href = result.format();
  	    return result;
  	  }

  	  // if a url ENDs in . or .., then it must get a trailing slash.
  	  // however, if it ends in anything else non-slashy,
  	  // then it must NOT get a trailing slash.
  	  var last = srcPath.slice(-1)[0];
  	  var hasTrailingSlash = (
  	      (result.host || relative.host || srcPath.length > 1) &&
  	      (last === '.' || last === '..') || last === '');

  	  // strip single dots, resolve double dots to parent dir
  	  // if the path tries to go above the root, `up` ends up > 0
  	  var up = 0;
  	  for (var i = srcPath.length; i >= 0; i--) {
  	    last = srcPath[i];
  	    if (last === '.') {
  	      srcPath.splice(i, 1);
  	    } else if (last === '..') {
  	      srcPath.splice(i, 1);
  	      up++;
  	    } else if (up) {
  	      srcPath.splice(i, 1);
  	      up--;
  	    }
  	  }

  	  // if the path is allowed to go above the root, restore leading ..s
  	  if (!mustEndAbs && !removeAllDots) {
  	    for (; up--; up) {
  	      srcPath.unshift('..');
  	    }
  	  }

  	  if (mustEndAbs && srcPath[0] !== '' &&
  	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
  	    srcPath.unshift('');
  	  }

  	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
  	    srcPath.push('');
  	  }

  	  var isAbsolute = srcPath[0] === '' ||
  	      (srcPath[0] && srcPath[0].charAt(0) === '/');

  	  // put the host back
  	  if (psychotic) {
  	    result.hostname = result.host = isAbsolute ? '' :
  	                                    srcPath.length ? srcPath.shift() : '';
  	    //occationaly the auth can get stuck only in host
  	    //this especially happens in cases like
  	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
  	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
  	                     result.host.split('@') : false;
  	    if (authInHost) {
  	      result.auth = authInHost.shift();
  	      result.host = result.hostname = authInHost.shift();
  	    }
  	  }

  	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  	  if (mustEndAbs && !isAbsolute) {
  	    srcPath.unshift('');
  	  }

  	  if (!srcPath.length) {
  	    result.pathname = null;
  	    result.path = null;
  	  } else {
  	    result.pathname = srcPath.join('/');
  	  }

  	  //to support request.http
  	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
  	    result.path = (result.pathname ? result.pathname : '') +
  	                  (result.search ? result.search : '');
  	  }
  	  result.auth = relative.auth || result.auth;
  	  result.slashes = result.slashes || relative.slashes;
  	  result.href = result.format();
  	  return result;
  	};

  	Url.prototype.parseHost = function() {
  	  var host = this.host;
  	  var port = portPattern.exec(host);
  	  if (port) {
  	    port = port[0];
  	    if (port !== ':') {
  	      this.port = port.substr(1);
  	    }
  	    host = host.substr(0, host.length - port.length);
  	  }
  	  if (host) { this.hostname = host; }
  	};

  	},{"./util":122,"punycode":100,"querystring":103}],122:[function(require,module,exports){

  	module.exports = {
  	  isString: function(arg) {
  	    return typeof(arg) === 'string';
  	  },
  	  isObject: function(arg) {
  	    return typeof(arg) === 'object' && arg !== null;
  	  },
  	  isNull: function(arg) {
  	    return arg === null;
  	  },
  	  isNullOrUndefined: function(arg) {
  	    return arg == null;
  	  }
  	};

  	},{}],123:[function(require,module,exports){
  	(function (global){
  	(function(root) {

  		// Detect free variables `exports`
  		var freeExports = typeof exports == 'object' && exports;

  		// Detect free variable `module`
  		var freeModule = typeof module == 'object' && module &&
  			module.exports == freeExports && module;

  		// Detect free variable `global`, from Node.js or Browserified code,
  		// and use it as `root`
  		var freeGlobal = typeof global == 'object' && global;
  		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
  			root = freeGlobal;
  		}

  		/*--------------------------------------------------------------------------*/

  		var stringFromCharCode = String.fromCharCode;

  		// Taken from https://mths.be/punycode
  		function ucs2decode(string) {
  			var output = [];
  			var counter = 0;
  			var length = string.length;
  			var value;
  			var extra;
  			while (counter < length) {
  				value = string.charCodeAt(counter++);
  				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  					// high surrogate, and there is a next character
  					extra = string.charCodeAt(counter++);
  					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  					} else {
  						// unmatched surrogate; only append this code unit, in case the next
  						// code unit is the high surrogate of a surrogate pair
  						output.push(value);
  						counter--;
  					}
  				} else {
  					output.push(value);
  				}
  			}
  			return output;
  		}

  		// Taken from https://mths.be/punycode
  		function ucs2encode(array) {
  			var length = array.length;
  			var index = -1;
  			var value;
  			var output = '';
  			while (++index < length) {
  				value = array[index];
  				if (value > 0xFFFF) {
  					value -= 0x10000;
  					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  					value = 0xDC00 | value & 0x3FF;
  				}
  				output += stringFromCharCode(value);
  			}
  			return output;
  		}

  		function checkScalarValue(codePoint) {
  			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  				throw Error(
  					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  					' is not a scalar value'
  				);
  			}
  		}
  		/*--------------------------------------------------------------------------*/

  		function createByte(codePoint, shift) {
  			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  		}

  		function encodeCodePoint(codePoint) {
  			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  				return stringFromCharCode(codePoint);
  			}
  			var symbol = '';
  			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  			}
  			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  				checkScalarValue(codePoint);
  				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  				symbol += createByte(codePoint, 6);
  			}
  			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  				symbol += createByte(codePoint, 12);
  				symbol += createByte(codePoint, 6);
  			}
  			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  			return symbol;
  		}

  		function utf8encode(string) {
  			var codePoints = ucs2decode(string);
  			var length = codePoints.length;
  			var index = -1;
  			var codePoint;
  			var byteString = '';
  			while (++index < length) {
  				codePoint = codePoints[index];
  				byteString += encodeCodePoint(codePoint);
  			}
  			return byteString;
  		}

  		/*--------------------------------------------------------------------------*/

  		function readContinuationByte() {
  			if (byteIndex >= byteCount) {
  				throw Error('Invalid byte index');
  			}

  			var continuationByte = byteArray[byteIndex] & 0xFF;
  			byteIndex++;

  			if ((continuationByte & 0xC0) == 0x80) {
  				return continuationByte & 0x3F;
  			}

  			// If we end up here, it’s not a continuation byte
  			throw Error('Invalid continuation byte');
  		}

  		function decodeSymbol() {
  			var byte1;
  			var byte2;
  			var byte3;
  			var byte4;
  			var codePoint;

  			if (byteIndex > byteCount) {
  				throw Error('Invalid byte index');
  			}

  			if (byteIndex == byteCount) {
  				return false;
  			}

  			// Read first byte
  			byte1 = byteArray[byteIndex] & 0xFF;
  			byteIndex++;

  			// 1-byte sequence (no continuation bytes)
  			if ((byte1 & 0x80) == 0) {
  				return byte1;
  			}

  			// 2-byte sequence
  			if ((byte1 & 0xE0) == 0xC0) {
  				byte2 = readContinuationByte();
  				codePoint = ((byte1 & 0x1F) << 6) | byte2;
  				if (codePoint >= 0x80) {
  					return codePoint;
  				} else {
  					throw Error('Invalid continuation byte');
  				}
  			}

  			// 3-byte sequence (may include unpaired surrogates)
  			if ((byte1 & 0xF0) == 0xE0) {
  				byte2 = readContinuationByte();
  				byte3 = readContinuationByte();
  				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  				if (codePoint >= 0x0800) {
  					checkScalarValue(codePoint);
  					return codePoint;
  				} else {
  					throw Error('Invalid continuation byte');
  				}
  			}

  			// 4-byte sequence
  			if ((byte1 & 0xF8) == 0xF0) {
  				byte2 = readContinuationByte();
  				byte3 = readContinuationByte();
  				byte4 = readContinuationByte();
  				codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
  					(byte3 << 0x06) | byte4;
  				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  					return codePoint;
  				}
  			}

  			throw Error('Invalid UTF-8 detected');
  		}

  		var byteArray;
  		var byteCount;
  		var byteIndex;
  		function utf8decode(byteString) {
  			byteArray = ucs2decode(byteString);
  			byteCount = byteArray.length;
  			byteIndex = 0;
  			var codePoints = [];
  			var tmp;
  			while ((tmp = decodeSymbol()) !== false) {
  				codePoints.push(tmp);
  			}
  			return ucs2encode(codePoints);
  		}

  		/*--------------------------------------------------------------------------*/

  		var utf8 = {
  			'version': '2.1.2',
  			'encode': utf8encode,
  			'decode': utf8decode
  		};

  		// Some AMD build optimizers, like r.js, check for specific condition patterns
  		// like the following:
  		if (freeExports && !freeExports.nodeType) {
  			if (freeModule) { // in Node.js or RingoJS v0.8.0+
  				freeModule.exports = utf8;
  			} else { // in Narwhal or RingoJS v0.7.0-
  				var object = {};
  				var hasOwnProperty = object.hasOwnProperty;
  				for (var key in utf8) {
  					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
  				}
  			}
  		} else { // in Rhino or a web browser
  			root.utf8 = utf8;
  		}

  	}(this));

  	}).call(this,typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{}],124:[function(require,module,exports){
  	(function (global){

  	/**
  	 * Module exports.
  	 */

  	module.exports = deprecate;

  	/**
  	 * Mark that a method should not be used.
  	 * Returns a modified function which warns once by default.
  	 *
  	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
  	 *
  	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
  	 * will throw an Error when invoked.
  	 *
  	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
  	 * will invoke `console.trace()` instead of `console.error()`.
  	 *
  	 * @param {Function} fn - the function to deprecate
  	 * @param {String} msg - the string to print to the console when `fn` is invoked
  	 * @returns {Function} a new "deprecated" version of `fn`
  	 * @api public
  	 */

  	function deprecate (fn, msg) {
  	  if (config('noDeprecation')) {
  	    return fn;
  	  }

  	  var warned = false;
  	  function deprecated() {
  	    if (!warned) {
  	      if (config('throwDeprecation')) {
  	        throw new Error(msg);
  	      } else if (config('traceDeprecation')) {
  	        console.trace(msg);
  	      } else {
  	        console.warn(msg);
  	      }
  	      warned = true;
  	    }
  	    return fn.apply(this, arguments);
  	  }

  	  return deprecated;
  	}

  	/**
  	 * Checks `localStorage` for boolean values for the given `name`.
  	 *
  	 * @param {String} name
  	 * @returns {Boolean}
  	 * @api private
  	 */

  	function config (name) {
  	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  	  try {
  	    if (!global.localStorage) { return false; }
  	  } catch (_) {
  	    return false;
  	  }
  	  var val = global.localStorage[name];
  	  if (null == val) { return false; }
  	  return String(val).toLowerCase() === 'true';
  	}

  	}).call(this,typeof commonjsGlobal$$1 !== "undefined" ? commonjsGlobal$$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  	},{}],125:[function(require,module,exports){
  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var SecurityError = /** @class */ (function (_super) {
  	    __extends(SecurityError, _super);
  	    function SecurityError() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    return SecurityError;
  	}(Error));
  	exports.SecurityError = SecurityError;
  	var InvalidStateError = /** @class */ (function (_super) {
  	    __extends(InvalidStateError, _super);
  	    function InvalidStateError() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    return InvalidStateError;
  	}(Error));
  	exports.InvalidStateError = InvalidStateError;
  	var NetworkError = /** @class */ (function (_super) {
  	    __extends(NetworkError, _super);
  	    function NetworkError() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    return NetworkError;
  	}(Error));
  	exports.NetworkError = NetworkError;
  	var SyntaxError = /** @class */ (function (_super) {
  	    __extends(SyntaxError, _super);
  	    function SyntaxError() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    return SyntaxError;
  	}(Error));
  	exports.SyntaxError = SyntaxError;

  	},{}],126:[function(require,module,exports){
  	function __export(m) {
  	    for (var p in m) { if (!exports.hasOwnProperty(p)) { exports[p] = m[p]; } }
  	}
  	Object.defineProperty(exports, "__esModule", { value: true });
  	__export(require("./xml-http-request"));
  	var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  	exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;

  	},{"./xml-http-request":130,"./xml-http-request-event-target":128}],127:[function(require,module,exports){
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var ProgressEvent = /** @class */ (function () {
  	    function ProgressEvent(type) {
  	        this.type = type;
  	        this.bubbles = false;
  	        this.cancelable = false;
  	        this.loaded = 0;
  	        this.lengthComputable = false;
  	        this.total = 0;
  	    }
  	    return ProgressEvent;
  	}());
  	exports.ProgressEvent = ProgressEvent;

  	},{}],128:[function(require,module,exports){
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var XMLHttpRequestEventTarget = /** @class */ (function () {
  	    function XMLHttpRequestEventTarget() {
  	        this.listeners = {};
  	    }
  	    XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
  	        eventType = eventType.toLowerCase();
  	        this.listeners[eventType] = this.listeners[eventType] || [];
  	        this.listeners[eventType].push(listener.handleEvent || listener);
  	    };
  	    XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
  	        eventType = eventType.toLowerCase();
  	        if (!this.listeners[eventType]) {
  	            return;
  	        }
  	        var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
  	        if (index < 0) {
  	            return;
  	        }
  	        this.listeners[eventType].splice(index, 1);
  	    };
  	    XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
  	        var eventType = event.type.toLowerCase();
  	        event.target = this; // TODO: set event.currentTarget?
  	        if (this.listeners[eventType]) {
  	            for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
  	                var listener_1 = _a[_i];
  	                listener_1.call(this, event);
  	            }
  	        }
  	        var listener = this["on" + eventType];
  	        if (listener) {
  	            listener.call(this, event);
  	        }
  	        return true;
  	    };
  	    return XMLHttpRequestEventTarget;
  	}());
  	exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;

  	},{}],129:[function(require,module,exports){
  	(function (Buffer){
  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  	var XMLHttpRequestUpload = /** @class */ (function (_super) {
  	    __extends(XMLHttpRequestUpload, _super);
  	    function XMLHttpRequestUpload() {
  	        var _this = _super.call(this) || this;
  	        _this._contentType = null;
  	        _this._body = null;
  	        _this._reset();
  	        return _this;
  	    }
  	    XMLHttpRequestUpload.prototype._reset = function () {
  	        this._contentType = null;
  	        this._body = null;
  	    };
  	    XMLHttpRequestUpload.prototype._setData = function (data) {
  	        if (data == null) {
  	            return;
  	        }
  	        if (typeof data === 'string') {
  	            if (data.length !== 0) {
  	                this._contentType = 'text/plain;charset=UTF-8';
  	            }
  	            this._body = new Buffer(data, 'utf-8');
  	        }
  	        else if (Buffer.isBuffer(data)) {
  	            this._body = data;
  	        }
  	        else if (data instanceof ArrayBuffer) {
  	            var body = new Buffer(data.byteLength);
  	            var view = new Uint8Array(data);
  	            for (var i = 0; i < data.byteLength; i++) {
  	                body[i] = view[i];
  	            }
  	            this._body = body;
  	        }
  	        else if (data.buffer && data.buffer instanceof ArrayBuffer) {
  	            var body = new Buffer(data.byteLength);
  	            var offset = data.byteOffset;
  	            var view = new Uint8Array(data.buffer);
  	            for (var i = 0; i < data.byteLength; i++) {
  	                body[i] = view[i + offset];
  	            }
  	            this._body = body;
  	        }
  	        else {
  	            throw new Error("Unsupported send() data " + data);
  	        }
  	    };
  	    XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
  	        if (this._contentType && !loweredHeaders['content-type']) {
  	            headers['Content-Type'] = this._contentType;
  	        }
  	        if (this._body) {
  	            headers['Content-Length'] = this._body.length.toString();
  	        }
  	    };
  	    XMLHttpRequestUpload.prototype._startUpload = function (request) {
  	        if (this._body) {
  	            request.write(this._body);
  	        }
  	        request.end();
  	    };
  	    return XMLHttpRequestUpload;
  	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
  	exports.XMLHttpRequestUpload = XMLHttpRequestUpload;

  	}).call(this,require("buffer").Buffer);

  	},{"./xml-http-request-event-target":128,"buffer":53}],130:[function(require,module,exports){
  	(function (process,Buffer){
  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	var __assign = (this && this.__assign) || Object.assign || function(t) {
  	    var arguments$1 = arguments;

  	    for (var s, i = 1, n = arguments.length; i < n; i++) {
  	        s = arguments$1[i];
  	        for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p))
  	            { t[p] = s[p]; } }
  	    }
  	    return t;
  	};
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var http = require("http");
  	var https = require("https");
  	var os = require("os");
  	var url = require("url");
  	var progress_event_1 = require("./progress-event");
  	var errors_1 = require("./errors");
  	var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  	var xml_http_request_upload_1 = require("./xml-http-request-upload");
  	var Cookie = require("cookiejar");
  	var XMLHttpRequest = /** @class */ (function (_super) {
  	    __extends(XMLHttpRequest, _super);
  	    function XMLHttpRequest(options) {
  	        if (options === void 0) { options = {}; }
  	        var _this = _super.call(this) || this;
  	        _this.UNSENT = XMLHttpRequest.UNSENT;
  	        _this.OPENED = XMLHttpRequest.OPENED;
  	        _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
  	        _this.LOADING = XMLHttpRequest.LOADING;
  	        _this.DONE = XMLHttpRequest.DONE;
  	        _this.onreadystatechange = null;
  	        _this.readyState = XMLHttpRequest.UNSENT;
  	        _this.response = null;
  	        _this.responseText = '';
  	        _this.responseType = '';
  	        _this.status = 0; // TODO: UNSENT?
  	        _this.statusText = '';
  	        _this.timeout = 0;
  	        _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
  	        _this.responseUrl = '';
  	        _this.withCredentials = false;
  	        _this._method = null;
  	        _this._url = null;
  	        _this._sync = false;
  	        _this._headers = {};
  	        _this._loweredHeaders = {};
  	        _this._mimeOverride = null; // TODO: is type right?
  	        _this._request = null;
  	        _this._response = null;
  	        _this._responseParts = null;
  	        _this._responseHeaders = null;
  	        _this._aborting = null; // TODO: type?
  	        _this._error = null; // TODO: type?
  	        _this._loadedBytes = 0;
  	        _this._totalBytes = 0;
  	        _this._lengthComputable = false;
  	        _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
  	        _this._restrictedHeaders = {
  	            'accept-charset': true,
  	            'accept-encoding': true,
  	            'access-control-request-headers': true,
  	            'access-control-request-method': true,
  	            connection: true,
  	            'content-length': true,
  	            cookie: true,
  	            cookie2: true,
  	            date: true,
  	            dnt: true,
  	            expect: true,
  	            host: true,
  	            'keep-alive': true,
  	            origin: true,
  	            referer: true,
  	            te: true,
  	            trailer: true,
  	            'transfer-encoding': true,
  	            upgrade: true,
  	            'user-agent': true,
  	            via: true
  	        };
  	        _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
  	        _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
  	        _this._anonymous = options.anon || false;
  	        return _this;
  	    }
  	    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
  	        if (async === void 0) { async = true; }
  	        method = method.toUpperCase();
  	        if (this._restrictedMethods[method]) {
  	            throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
  	        }
  	        var xhrUrl = this._parseUrl(url, user, password);
  	        if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) ;
  	        this._method = method;
  	        this._url = xhrUrl;
  	        this._sync = !async;
  	        this._headers = {};
  	        this._loweredHeaders = {};
  	        this._mimeOverride = null;
  	        this._setReadyState(XMLHttpRequest.OPENED);
  	        this._request = null;
  	        this._response = null;
  	        this.status = 0;
  	        this.statusText = '';
  	        this._responseParts = [];
  	        this._responseHeaders = null;
  	        this._loadedBytes = 0;
  	        this._totalBytes = 0;
  	        this._lengthComputable = false;
  	    };
  	    XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
  	        if (this.readyState !== XMLHttpRequest.OPENED) {
  	            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
  	        }
  	        var loweredName = name.toLowerCase();
  	        if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
  	            console.warn("Refused to set unsafe header \"" + name + "\"");
  	            return;
  	        }
  	        value = value.toString();
  	        if (this._loweredHeaders[loweredName] != null) {
  	            name = this._loweredHeaders[loweredName];
  	            this._headers[name] = this._headers[name] + ", " + value;
  	        }
  	        else {
  	            this._loweredHeaders[loweredName] = name;
  	            this._headers[name] = value;
  	        }
  	    };
  	    XMLHttpRequest.prototype.send = function (data) {
  	        if (this.readyState !== XMLHttpRequest.OPENED) {
  	            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
  	        }
  	        if (this._request) {
  	            throw new XMLHttpRequest.InvalidStateError('send() already called');
  	        }
  	        switch (this._url.protocol) {
  	            case 'file:':
  	                return this._sendFile(data);
  	            case 'http:':
  	            case 'https:':
  	                return this._sendHttp(data);
  	            default:
  	                throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
  	        }
  	    };
  	    XMLHttpRequest.prototype.abort = function () {
  	        if (this._request == null) {
  	            return;
  	        }
  	        this._request.abort();
  	        this._setError();
  	        this._dispatchProgress('abort');
  	        this._dispatchProgress('loadend');
  	    };
  	    XMLHttpRequest.prototype.getResponseHeader = function (name) {
  	        if (this._responseHeaders == null || name == null) {
  	            return null;
  	        }
  	        var loweredName = name.toLowerCase();
  	        return this._responseHeaders.hasOwnProperty(loweredName)
  	            ? this._responseHeaders[name.toLowerCase()]
  	            : null;
  	    };
  	    XMLHttpRequest.prototype.getAllResponseHeaders = function () {
  	        var _this = this;
  	        if (this._responseHeaders == null) {
  	            return '';
  	        }
  	        return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
  	    };
  	    XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
  	        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
  	            throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
  	        }
  	        this._mimeOverride = mimeType.toLowerCase();
  	    };
  	    XMLHttpRequest.prototype.nodejsSet = function (options) {
  	        this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
  	        this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
  	        if (options.hasOwnProperty('baseUrl')) {
  	            if (options.baseUrl != null) {
  	                var parsedUrl = url.parse(options.baseUrl, false, true);
  	                if (!parsedUrl.protocol) {
  	                    throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
  	                }
  	            }
  	            this.nodejsBaseUrl = options.baseUrl;
  	        }
  	    };
  	    XMLHttpRequest.nodejsSet = function (options) {
  	        XMLHttpRequest.prototype.nodejsSet(options);
  	    };
  	    XMLHttpRequest.prototype._setReadyState = function (readyState) {
  	        this.readyState = readyState;
  	        this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
  	    };
  	    XMLHttpRequest.prototype._sendFile = function (data) {
  	        // TODO
  	        throw new Error('Protocol file: not implemented');
  	    };
  	    XMLHttpRequest.prototype._sendHttp = function (data) {
  	        if (this._sync) {
  	            throw new Error('Synchronous XHR processing not implemented');
  	        }
  	        if (data && (this._method === 'GET' || this._method === 'HEAD')) {
  	            console.warn("Discarding entity body for " + this._method + " requests");
  	            data = null;
  	        }
  	        else {
  	            data = data || '';
  	        }
  	        this.upload._setData(data);
  	        this._finalizeHeaders();
  	        this._sendHxxpRequest();
  	    };
  	    XMLHttpRequest.prototype._sendHxxpRequest = function () {
  	        var _this = this;
  	        if (this.withCredentials) {
  	            var cookie = XMLHttpRequest.cookieJar
  	                .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
  	            this._headers.cookie = this._headers.cookie2 = cookie;
  	        }
  	        var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
  	        var requestMethod = hxxp.request.bind(hxxp);
  	        var request = requestMethod({
  	            hostname: this._url.hostname,
  	            port: +this._url.port,
  	            path: this._url.path,
  	            auth: this._url.auth,
  	            method: this._method,
  	            headers: this._headers,
  	            agent: agent
  	        });
  	        this._request = request;
  	        if (this.timeout) {
  	            request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
  	        }
  	        request.on('response', function (response) { return _this._onHttpResponse(request, response); });
  	        request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
  	        this.upload._startUpload(request);
  	        if (this._request === request) {
  	            this._dispatchProgress('loadstart');
  	        }
  	    };
  	    XMLHttpRequest.prototype._finalizeHeaders = function () {
  	        this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
  	        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
  	    };
  	    XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
  	        var _this = this;
  	        if (this._request !== request) {
  	            return;
  	        }
  	        if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
  	            XMLHttpRequest.cookieJar
  	                .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
  	        }
  	        if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
  	            this._url = this._parseUrl(response.headers.location);
  	            this._method = 'GET';
  	            if (this._loweredHeaders['content-type']) {
  	                delete this._headers[this._loweredHeaders['content-type']];
  	                delete this._loweredHeaders['content-type'];
  	            }
  	            if (this._headers['Content-Type'] != null) {
  	                delete this._headers['Content-Type'];
  	            }
  	            delete this._headers['Content-Length'];
  	            this.upload._reset();
  	            this._finalizeHeaders();
  	            this._sendHxxpRequest();
  	            return;
  	        }
  	        this._response = response;
  	        this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
  	        this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
  	        this._response.on('close', function () { return _this._onHttpResponseClose(response); });
  	        this.responseUrl = this._url.href.split('#')[0];
  	        this.status = response.statusCode;
  	        this.statusText = http.STATUS_CODES[this.status];
  	        this._parseResponseHeaders(response);
  	        var lengthString = this._responseHeaders['content-length'] || '';
  	        this._totalBytes = +lengthString;
  	        this._lengthComputable = !!lengthString;
  	        this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
  	    };
  	    XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
  	        if (this._response !== response) {
  	            return;
  	        }
  	        this._responseParts.push(new Buffer(data));
  	        this._loadedBytes += data.length;
  	        if (this.readyState !== XMLHttpRequest.LOADING) {
  	            this._setReadyState(XMLHttpRequest.LOADING);
  	        }
  	        this._dispatchProgress('progress');
  	    };
  	    XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
  	        if (this._response !== response) {
  	            return;
  	        }
  	        this._parseResponse();
  	        this._request = null;
  	        this._response = null;
  	        this._setReadyState(XMLHttpRequest.DONE);
  	        this._dispatchProgress('load');
  	        this._dispatchProgress('loadend');
  	    };
  	    XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
  	        if (this._response !== response) {
  	            return;
  	        }
  	        var request = this._request;
  	        this._setError();
  	        request.abort();
  	        this._setReadyState(XMLHttpRequest.DONE);
  	        this._dispatchProgress('error');
  	        this._dispatchProgress('loadend');
  	    };
  	    XMLHttpRequest.prototype._onHttpTimeout = function (request) {
  	        if (this._request !== request) {
  	            return;
  	        }
  	        this._setError();
  	        request.abort();
  	        this._setReadyState(XMLHttpRequest.DONE);
  	        this._dispatchProgress('timeout');
  	        this._dispatchProgress('loadend');
  	    };
  	    XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
  	        if (this._request !== request) {
  	            return;
  	        }
  	        this._setError();
  	        request.abort();
  	        this._setReadyState(XMLHttpRequest.DONE);
  	        this._dispatchProgress('error');
  	        this._dispatchProgress('loadend');
  	    };
  	    XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
  	        var event = new XMLHttpRequest.ProgressEvent(eventType);
  	        event.lengthComputable = this._lengthComputable;
  	        event.loaded = this._loadedBytes;
  	        event.total = this._totalBytes;
  	        this.dispatchEvent(event);
  	    };
  	    XMLHttpRequest.prototype._setError = function () {
  	        this._request = null;
  	        this._response = null;
  	        this._responseHeaders = null;
  	        this._responseParts = null;
  	    };
  	    XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
  	        var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
  	        var xhrUrl = url.parse(absoluteUrl, false, true);
  	        xhrUrl.hash = null;
  	        var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
  	        if (xhrUser || xhrPassword || user || password) {
  	            xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
  	        }
  	        return xhrUrl;
  	    };
  	    XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
  	        this._responseHeaders = {};
  	        for (var name_1 in response.headers) {
  	            var loweredName = name_1.toLowerCase();
  	            if (this._privateHeaders[loweredName]) {
  	                continue;
  	            }
  	            this._responseHeaders[loweredName] = response.headers[name_1];
  	        }
  	        if (this._mimeOverride != null) {
  	            this._responseHeaders['content-type'] = this._mimeOverride;
  	        }
  	    };
  	    XMLHttpRequest.prototype._parseResponse = function () {
  	        var buffer = Buffer.concat(this._responseParts);
  	        this._responseParts = null;
  	        switch (this.responseType) {
  	            case 'json':
  	                this.responseText = null;
  	                try {
  	                    this.response = JSON.parse(buffer.toString('utf-8'));
  	                }
  	                catch (_a) {
  	                    this.response = null;
  	                }
  	                return;
  	            case 'buffer':
  	                this.responseText = null;
  	                this.response = buffer;
  	                return;
  	            case 'arraybuffer':
  	                this.responseText = null;
  	                var arrayBuffer = new ArrayBuffer(buffer.length);
  	                var view = new Uint8Array(arrayBuffer);
  	                for (var i = 0; i < buffer.length; i++) {
  	                    view[i] = buffer[i];
  	                }
  	                this.response = arrayBuffer;
  	                return;
  	            case 'text':
  	            default:
  	                try {
  	                    this.responseText = buffer.toString(this._parseResponseEncoding());
  	                }
  	                catch (_b) {
  	                    this.responseText = buffer.toString('binary');
  	                }
  	                this.response = this.responseText;
  	        }
  	    };
  	    XMLHttpRequest.prototype._parseResponseEncoding = function () {
  	        return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
  	    };
  	    XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
  	    XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
  	    XMLHttpRequest.NetworkError = errors_1.NetworkError;
  	    XMLHttpRequest.SecurityError = errors_1.SecurityError;
  	    XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
  	    XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
  	    XMLHttpRequest.UNSENT = 0;
  	    XMLHttpRequest.OPENED = 1;
  	    XMLHttpRequest.HEADERS_RECEIVED = 2;
  	    XMLHttpRequest.LOADING = 3;
  	    XMLHttpRequest.DONE = 4;
  	    XMLHttpRequest.cookieJar = Cookie.CookieJar();
  	    return XMLHttpRequest;
  	}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
  	exports.XMLHttpRequest = XMLHttpRequest;
  	XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
  	XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
  	XMLHttpRequest.prototype.nodejsBaseUrl = null;

  	}).call(this,require('_process'),require("buffer").Buffer);

  	},{"./errors":125,"./progress-event":127,"./xml-http-request-event-target":128,"./xml-http-request-upload":129,"_process":99,"buffer":53,"cookiejar":55,"http":114,"https":92,"os":97,"url":121}],131:[function(require,module,exports){
  	module.exports = extend;

  	var hasOwnProperty = Object.prototype.hasOwnProperty;

  	function extend() {
  	    var arguments$1 = arguments;

  	    var target = {};

  	    for (var i = 0; i < arguments.length; i++) {
  	        var source = arguments$1[i];

  	        for (var key in source) {
  	            if (hasOwnProperty.call(source, key)) {
  	                target[key] = source[key];
  	            }
  	        }
  	    }

  	    return target
  	}

  	},{}],"bignumber.js":[function(require,module,exports){
  	(function (global) {

  	    /*
  	      bignumber.js v2.0.7
  	      A JavaScript library for arbitrary-precision arithmetic.
  	      https://github.com/MikeMcl/bignumber.js
  	      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
  	      MIT Expat Licence
  	    */


  	    var BigNumber, crypto, parseNumeric,
  	        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
  	        mathceil = Math.ceil,
  	        mathfloor = Math.floor,
  	        notBool = ' not a boolean or binary digit',
  	        roundingMode = 'rounding mode',
  	        tooManyDigits = 'number type has more than 15 significant digits',
  	        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
  	        BASE = 1e14,
  	        LOG_BASE = 14,
  	        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
  	        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  	        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
  	        SQRT_BASE = 1e7,

  	        /*
  	         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  	         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
  	         * exception is thrown (if ERRORS is true).
  	         */
  	        MAX = 1E9;                                   // 0 to MAX_INT32


  	    /*
  	     * Create and return a BigNumber constructor.
  	     */
  	    function another(configObj) {
  	        var div,

  	            // id tracks the caller function, so its name can be included in error messages.
  	            id = 0,
  	            P = BigNumber.prototype,
  	            ONE = new BigNumber(1),


  	            /********************************* EDITABLE DEFAULTS **********************************/


  	            /*
  	             * The default values below must be integers within the inclusive ranges stated.
  	             * The values can also be changed at run-time using BigNumber.config.
  	             */

  	            // The maximum number of decimal places for operations involving division.
  	            DECIMAL_PLACES = 20,                     // 0 to MAX

  	            /*
  	             * The rounding mode used when rounding to the above decimal places, and when using
  	             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
  	             * UP         0 Away from zero.
  	             * DOWN       1 Towards zero.
  	             * CEIL       2 Towards +Infinity.
  	             * FLOOR      3 Towards -Infinity.
  	             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
  	             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
  	             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
  	             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
  	             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
  	             */
  	            ROUNDING_MODE = 4,                       // 0 to 8

  	            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

  	            // The exponent value at and beneath which toString returns exponential notation.
  	            // Number type: -7
  	            TO_EXP_NEG = -7,                         // 0 to -MAX

  	            // The exponent value at and above which toString returns exponential notation.
  	            // Number type: 21
  	            TO_EXP_POS = 21,                         // 0 to MAX

  	            // RANGE : [MIN_EXP, MAX_EXP]

  	            // The minimum exponent value, beneath which underflow to zero occurs.
  	            // Number type: -324  (5e-324)
  	            MIN_EXP = -1e7,                          // -1 to -MAX

  	            // The maximum exponent value, above which overflow to Infinity occurs.
  	            // Number type:  308  (1.7976931348623157e+308)
  	            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
  	            MAX_EXP = 1e7,                           // 1 to MAX

  	            // Whether BigNumber Errors are ever thrown.
  	            ERRORS = true,                           // true or false

  	            // Change to intValidatorNoErrors if ERRORS is false.
  	            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

  	            // Whether to use cryptographically-secure random number generation, if available.
  	            CRYPTO = false,                          // true or false

  	            /*
  	             * The modulo mode used when calculating the modulus: a mod n.
  	             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
  	             * The remainder (r) is calculated as: r = a - n * q.
  	             *
  	             * UP        0 The remainder is positive if the dividend is negative, else is negative.
  	             * DOWN      1 The remainder has the same sign as the dividend.
  	             *             This modulo mode is commonly known as 'truncated division' and is
  	             *             equivalent to (a % n) in JavaScript.
  	             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
  	             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
  	             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
  	             *             The remainder is always positive.
  	             *
  	             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
  	             * modes are commonly used for the modulus operation.
  	             * Although the other rounding modes can also be used, they may not give useful results.
  	             */
  	            MODULO_MODE = 1,                         // 0 to 9

  	            // The maximum number of significant digits of the result of the toPower operation.
  	            // If POW_PRECISION is 0, there will be unlimited significant digits.
  	            POW_PRECISION = 100,                     // 0 to MAX

  	            // The format specification used by the BigNumber.prototype.toFormat method.
  	            FORMAT = {
  	                decimalSeparator: '.',
  	                groupSeparator: ',',
  	                groupSize: 3,
  	                secondaryGroupSize: 0,
  	                fractionGroupSeparator: '\xA0',      // non-breaking space
  	                fractionGroupSize: 0
  	            };


  	        /******************************************************************************************/


  	        // CONSTRUCTOR


  	        /*
  	         * The BigNumber constructor and exported function.
  	         * Create and return a new instance of a BigNumber object.
  	         *
  	         * n {number|string|BigNumber} A numeric value.
  	         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
  	         */
  	        function BigNumber( n, b ) {
  	            var c, e, i, num, len, str,
  	                x = this;

  	            // Enable constructor usage without new.
  	            if ( !( x instanceof BigNumber ) ) {

  	                // 'BigNumber() constructor call without new: {n}'
  	                if (ERRORS) { raise( 26, 'constructor call without new', n ); }
  	                return new BigNumber( n, b );
  	            }

  	            // 'new BigNumber() base not an integer: {b}'
  	            // 'new BigNumber() base out of range: {b}'
  	            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

  	                // Duplicate.
  	                if ( n instanceof BigNumber ) {
  	                    x.s = n.s;
  	                    x.e = n.e;
  	                    x.c = ( n = n.c ) ? n.slice() : n;
  	                    id = 0;
  	                    return;
  	                }

  	                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
  	                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

  	                    // Fast path for integers.
  	                    if ( n === ~~n ) {
  	                        for ( e = 0, i = n; i >= 10; i /= 10, e++ ){ }
  	                        x.e = e;
  	                        x.c = [n];
  	                        id = 0;
  	                        return;
  	                    }

  	                    str = n + '';
  	                } else {
  	                    if ( !isNumeric.test( str = n + '' ) ) { return parseNumeric( x, str, num ); }
  	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
  	                }
  	            } else {
  	                b = b | 0;
  	                str = n + '';

  	                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
  	                // Allow exponential notation to be used with base 10 argument.
  	                if ( b == 10 ) {
  	                    x = new BigNumber( n instanceof BigNumber ? n : str );
  	                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
  	                }

  	                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
  	                // Any number in exponential form will fail due to the [Ee][+-].
  	                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
  	                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
  	                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
  	                    return parseNumeric( x, str, num, b );
  	                }

  	                if (num) {
  	                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

  	                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

  	                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
  	                        raise( id, tooManyDigits, n );
  	                    }

  	                    // Prevent later check for length on converted number.
  	                    num = false;
  	                } else {
  	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
  	                }

  	                str = convertBase( str, 10, b, x.s );
  	            }

  	            // Decimal point?
  	            if ( ( e = str.indexOf('.') ) > -1 ) { str = str.replace( '.', '' ); }

  	            // Exponential form?
  	            if ( ( i = str.search( /e/i ) ) > 0 ) {

  	                // Determine exponent.
  	                if ( e < 0 ) { e = i; }
  	                e += +str.slice( i + 1 );
  	                str = str.substring( 0, i );
  	            } else if ( e < 0 ) {

  	                // Integer.
  	                e = str.length;
  	            }

  	            // Determine leading zeros.
  	            for ( i = 0; str.charCodeAt(i) === 48; i++ ){ }

  	            // Determine trailing zeros.
  	            for ( len = str.length; str.charCodeAt(--len) === 48; ){ }
  	            str = str.slice( i, len + 1 );

  	            if (str) {
  	                len = str.length;

  	                // Disallow numbers with over 15 significant digits if number type.
  	                // 'new BigNumber() number type has more than 15 significant digits: {n}'
  	                if ( num && ERRORS && len > 15 ) { raise( id, tooManyDigits, x.s * n ); }

  	                e = e - i - 1;

  	                 // Overflow?
  	                if ( e > MAX_EXP ) {

  	                    // Infinity.
  	                    x.c = x.e = null;

  	                // Underflow?
  	                } else if ( e < MIN_EXP ) {

  	                    // Zero.
  	                    x.c = [ x.e = 0 ];
  	                } else {
  	                    x.e = e;
  	                    x.c = [];

  	                    // Transform base

  	                    // e is the base 10 exponent.
  	                    // i is where to slice str to get the first element of the coefficient array.
  	                    i = ( e + 1 ) % LOG_BASE;
  	                    if ( e < 0 ) { i += LOG_BASE; }

  	                    if ( i < len ) {
  	                        if (i) { x.c.push( +str.slice( 0, i ) ); }

  	                        for ( len -= LOG_BASE; i < len; ) {
  	                            x.c.push( +str.slice( i, i += LOG_BASE ) );
  	                        }

  	                        str = str.slice(i);
  	                        i = LOG_BASE - str.length;
  	                    } else {
  	                        i -= len;
  	                    }

  	                    for ( ; i--; str += '0' ){ }
  	                    x.c.push( +str );
  	                }
  	            } else {

  	                // Zero.
  	                x.c = [ x.e = 0 ];
  	            }

  	            id = 0;
  	        }


  	        // CONSTRUCTOR PROPERTIES


  	        BigNumber.another = another;

  	        BigNumber.ROUND_UP = 0;
  	        BigNumber.ROUND_DOWN = 1;
  	        BigNumber.ROUND_CEIL = 2;
  	        BigNumber.ROUND_FLOOR = 3;
  	        BigNumber.ROUND_HALF_UP = 4;
  	        BigNumber.ROUND_HALF_DOWN = 5;
  	        BigNumber.ROUND_HALF_EVEN = 6;
  	        BigNumber.ROUND_HALF_CEIL = 7;
  	        BigNumber.ROUND_HALF_FLOOR = 8;
  	        BigNumber.EUCLID = 9;


  	        /*
  	         * Configure infrequently-changing library-wide settings.
  	         *
  	         * Accept an object or an argument list, with one or many of the following properties or
  	         * parameters respectively:
  	         *
  	         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
  	         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
  	         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
  	         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
  	         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
  	         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
  	         *   ERRORS          {boolean|number}   true, false, 1 or 0
  	         *   CRYPTO          {boolean|number}   true, false, 1 or 0
  	         *   MODULO_MODE     {number}           0 to 9 inclusive
  	         *   POW_PRECISION   {number}           0 to MAX inclusive
  	         *   FORMAT          {object}           See BigNumber.prototype.toFormat
  	         *      decimalSeparator       {string}
  	         *      groupSeparator         {string}
  	         *      groupSize              {number}
  	         *      secondaryGroupSize     {number}
  	         *      fractionGroupSeparator {string}
  	         *      fractionGroupSize      {number}
  	         *
  	         * (The values assigned to the above FORMAT object properties are not checked for validity.)
  	         *
  	         * E.g.
  	         * BigNumber.config(20, 4) is equivalent to
  	         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
  	         *
  	         * Ignore properties/parameters set to null or undefined.
  	         * Return an object with the properties current values.
  	         */
  	        BigNumber.config = function () {
  	            var v, p,
  	                i = 0,
  	                r = {},
  	                a = arguments,
  	                o = a[0],
  	                has = o && typeof o == 'object'
  	                  ? function () { if ( o.hasOwnProperty(p) ) { return ( v = o[p] ) != null; } }
  	                  : function () { if ( a.length > i ) { return ( v = a[i++] ) != null; } };

  	            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
  	            // 'config() DECIMAL_PLACES not an integer: {v}'
  	            // 'config() DECIMAL_PLACES out of range: {v}'
  	            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
  	                DECIMAL_PLACES = v | 0;
  	            }
  	            r[p] = DECIMAL_PLACES;

  	            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
  	            // 'config() ROUNDING_MODE not an integer: {v}'
  	            // 'config() ROUNDING_MODE out of range: {v}'
  	            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
  	                ROUNDING_MODE = v | 0;
  	            }
  	            r[p] = ROUNDING_MODE;

  	            // EXPONENTIAL_AT {number|number[]}
  	            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
  	            // 'config() EXPONENTIAL_AT not an integer: {v}'
  	            // 'config() EXPONENTIAL_AT out of range: {v}'
  	            if ( has( p = 'EXPONENTIAL_AT' ) ) {

  	                if ( isArray(v) ) {
  	                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
  	                        TO_EXP_NEG = v[0] | 0;
  	                        TO_EXP_POS = v[1] | 0;
  	                    }
  	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
  	                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
  	                }
  	            }
  	            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

  	            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
  	            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
  	            // 'config() RANGE not an integer: {v}'
  	            // 'config() RANGE cannot be zero: {v}'
  	            // 'config() RANGE out of range: {v}'
  	            if ( has( p = 'RANGE' ) ) {

  	                if ( isArray(v) ) {
  	                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
  	                        MIN_EXP = v[0] | 0;
  	                        MAX_EXP = v[1] | 0;
  	                    }
  	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
  	                    if ( v | 0 ) { MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 ); }
  	                    else if (ERRORS) { raise( 2, p + ' cannot be zero', v ); }
  	                }
  	            }
  	            r[p] = [ MIN_EXP, MAX_EXP ];

  	            // ERRORS {boolean|number} true, false, 1 or 0.
  	            // 'config() ERRORS not a boolean or binary digit: {v}'
  	            if ( has( p = 'ERRORS' ) ) {

  	                if ( v === !!v || v === 1 || v === 0 ) {
  	                    id = 0;
  	                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
  	                } else if (ERRORS) {
  	                    raise( 2, p + notBool, v );
  	                }
  	            }
  	            r[p] = ERRORS;

  	            // CRYPTO {boolean|number} true, false, 1 or 0.
  	            // 'config() CRYPTO not a boolean or binary digit: {v}'
  	            // 'config() crypto unavailable: {crypto}'
  	            if ( has( p = 'CRYPTO' ) ) {

  	                if ( v === !!v || v === 1 || v === 0 ) {
  	                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );
  	                    if ( v && !CRYPTO && ERRORS ) { raise( 2, 'crypto unavailable', crypto ); }
  	                } else if (ERRORS) {
  	                    raise( 2, p + notBool, v );
  	                }
  	            }
  	            r[p] = CRYPTO;

  	            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
  	            // 'config() MODULO_MODE not an integer: {v}'
  	            // 'config() MODULO_MODE out of range: {v}'
  	            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
  	                MODULO_MODE = v | 0;
  	            }
  	            r[p] = MODULO_MODE;

  	            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
  	            // 'config() POW_PRECISION not an integer: {v}'
  	            // 'config() POW_PRECISION out of range: {v}'
  	            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
  	                POW_PRECISION = v | 0;
  	            }
  	            r[p] = POW_PRECISION;

  	            // FORMAT {object}
  	            // 'config() FORMAT not an object: {v}'
  	            if ( has( p = 'FORMAT' ) ) {

  	                if ( typeof v == 'object' ) {
  	                    FORMAT = v;
  	                } else if (ERRORS) {
  	                    raise( 2, p + ' not an object', v );
  	                }
  	            }
  	            r[p] = FORMAT;

  	            return r;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the maximum of the arguments.
  	         *
  	         * arguments {number|string|BigNumber}
  	         */
  	        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


  	        /*
  	         * Return a new BigNumber whose value is the minimum of the arguments.
  	         *
  	         * arguments {number|string|BigNumber}
  	         */
  	        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


  	        /*
  	         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
  	         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
  	         * zeros are produced).
  	         *
  	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
  	         *
  	         * 'random() decimal places not an integer: {dp}'
  	         * 'random() decimal places out of range: {dp}'
  	         * 'random() crypto unavailable: {crypto}'
  	         */
  	        BigNumber.random = (function () {
  	            var pow2_53 = 0x20000000000000;

  	            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
  	            // Check if Math.random() produces more than 32 bits of randomness.
  	            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
  	            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
  	            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
  	              ? function () { return mathfloor( Math.random() * pow2_53 ); }
  	              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
  	                  (Math.random() * 0x800000 | 0); };

  	            return function (dp) {
  	                var a, b, e, k, v,
  	                    i = 0,
  	                    c = [],
  	                    rand = new BigNumber(ONE);

  	                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
  	                k = mathceil( dp / LOG_BASE );

  	                if (CRYPTO) {

  	                    // Browsers supporting crypto.getRandomValues.
  	                    if ( crypto && crypto.getRandomValues ) {

  	                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

  	                        for ( ; i < k; ) {

  	                            // 53 bits:
  	                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
  	                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
  	                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
  	                            //                                     11111 11111111 11111111
  	                            // 0x20000 is 2^21.
  	                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

  	                            // Rejection sampling:
  	                            // 0 <= v < 9007199254740992
  	                            // Probability that v >= 9e15, is
  	                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
  	                            if ( v >= 9e15 ) {
  	                                b = crypto.getRandomValues( new Uint32Array(2) );
  	                                a[i] = b[0];
  	                                a[i + 1] = b[1];
  	                            } else {

  	                                // 0 <= v <= 8999999999999999
  	                                // 0 <= (v % 1e14) <= 99999999999999
  	                                c.push( v % 1e14 );
  	                                i += 2;
  	                            }
  	                        }
  	                        i = k / 2;

  	                    // Node.js supporting crypto.randomBytes.
  	                    } else if ( crypto && crypto.randomBytes ) {

  	                        // buffer
  	                        a = crypto.randomBytes( k *= 7 );

  	                        for ( ; i < k; ) {

  	                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
  	                            // 0x100000000 is 2^32, 0x1000000 is 2^24
  	                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
  	                            // 0 <= v < 9007199254740992
  	                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
  	                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
  	                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

  	                            if ( v >= 9e15 ) {
  	                                crypto.randomBytes(7).copy( a, i );
  	                            } else {

  	                                // 0 <= (v % 1e14) <= 99999999999999
  	                                c.push( v % 1e14 );
  	                                i += 7;
  	                            }
  	                        }
  	                        i = k / 7;
  	                    } else if (ERRORS) {
  	                        raise( 14, 'crypto unavailable', crypto );
  	                    }
  	                }

  	                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
  	                if (!i) {

  	                    for ( ; i < k; ) {
  	                        v = random53bitInt();
  	                        if ( v < 9e15 ) { c[i++] = v % 1e14; }
  	                    }
  	                }

  	                k = c[--i];
  	                dp %= LOG_BASE;

  	                // Convert trailing digits to zeros according to dp.
  	                if ( k && dp ) {
  	                    v = POWS_TEN[LOG_BASE - dp];
  	                    c[i] = mathfloor( k / v ) * v;
  	                }

  	                // Remove trailing elements which are zero.
  	                for ( ; c[i] === 0; c.pop(), i-- ){ }

  	                // Zero?
  	                if ( i < 0 ) {
  	                    c = [ e = 0 ];
  	                } else {

  	                    // Remove leading elements which are zero and adjust exponent accordingly.
  	                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE){ }

  	                    // Count the digits of the first element of c to determine leading zeros, and...
  	                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++){ }

  	                    // adjust the exponent accordingly.
  	                    if ( i < LOG_BASE ) { e -= LOG_BASE - i; }
  	                }

  	                rand.e = e;
  	                rand.c = c;
  	                return rand;
  	            };
  	        })();


  	        // PRIVATE FUNCTIONS


  	        // Convert a numeric string of baseIn to a numeric string of baseOut.
  	        function convertBase( str, baseOut, baseIn, sign ) {
  	            var d, e, k, r, x, xc, y,
  	                i = str.indexOf( '.' ),
  	                dp = DECIMAL_PLACES,
  	                rm = ROUNDING_MODE;

  	            if ( baseIn < 37 ) { str = str.toLowerCase(); }

  	            // Non-integer.
  	            if ( i >= 0 ) {
  	                k = POW_PRECISION;

  	                // Unlimited precision.
  	                POW_PRECISION = 0;
  	                str = str.replace( '.', '' );
  	                y = new BigNumber(baseIn);
  	                x = y.pow( str.length - i );
  	                POW_PRECISION = k;

  	                // Convert str as if an integer, then restore the fraction part by dividing the
  	                // result by its base raised to a power.
  	                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
  	                y.e = y.c.length;
  	            }

  	            // Convert the number as integer.
  	            xc = toBaseOut( str, baseIn, baseOut );
  	            e = k = xc.length;

  	            // Remove trailing zeros.
  	            for ( ; xc[--k] == 0; xc.pop() ){ }
  	            if ( !xc[0] ) { return '0'; }

  	            if ( i < 0 ) {
  	                --e;
  	            } else {
  	                x.c = xc;
  	                x.e = e;

  	                // sign is needed for correct rounding.
  	                x.s = sign;
  	                x = div( x, y, dp, rm, baseOut );
  	                xc = x.c;
  	                r = x.r;
  	                e = x.e;
  	            }

  	            d = e + dp + 1;

  	            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
  	            i = xc[d];
  	            k = baseOut / 2;
  	            r = r || d < 0 || xc[d + 1] != null;

  	            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
  	                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
  	                         rm == ( x.s < 0 ? 8 : 7 ) );

  	            if ( d < 1 || !xc[0] ) {

  	                // 1^-dp or 0.
  	                str = r ? toFixedPoint( '1', -dp ) : '0';
  	            } else {
  	                xc.length = d;

  	                if (r) {

  	                    // Rounding up may mean the previous digit has to be rounded up and so on.
  	                    for ( --baseOut; ++xc[--d] > baseOut; ) {
  	                        xc[d] = 0;

  	                        if ( !d ) {
  	                            ++e;
  	                            xc.unshift(1);
  	                        }
  	                    }
  	                }

  	                // Determine trailing zeros.
  	                for ( k = xc.length; !xc[--k]; ){ }

  	                // E.g. [4, 11, 15] becomes 4bf.
  	                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) ){ }
  	                str = toFixedPoint( str, e );
  	            }

  	            // The caller will add the sign.
  	            return str;
  	        }


  	        // Perform division in the specified base. Called by div and convertBase.
  	        div = (function () {

  	            // Assume non-zero x and k.
  	            function multiply( x, k, base ) {
  	                var m, temp, xlo, xhi,
  	                    carry = 0,
  	                    i = x.length,
  	                    klo = k % SQRT_BASE,
  	                    khi = k / SQRT_BASE | 0;

  	                for ( x = x.slice(); i--; ) {
  	                    xlo = x[i] % SQRT_BASE;
  	                    xhi = x[i] / SQRT_BASE | 0;
  	                    m = khi * xlo + xhi * klo;
  	                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
  	                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
  	                    x[i] = temp % base;
  	                }

  	                if (carry) { x.unshift(carry); }

  	                return x;
  	            }

  	            function compare( a, b, aL, bL ) {
  	                var i, cmp;

  	                if ( aL != bL ) {
  	                    cmp = aL > bL ? 1 : -1;
  	                } else {

  	                    for ( i = cmp = 0; i < aL; i++ ) {

  	                        if ( a[i] != b[i] ) {
  	                            cmp = a[i] > b[i] ? 1 : -1;
  	                            break;
  	                        }
  	                    }
  	                }
  	                return cmp;
  	            }

  	            function subtract( a, b, aL, base ) {
  	                var i = 0;

  	                // Subtract b from a.
  	                for ( ; aL--; ) {
  	                    a[aL] -= i;
  	                    i = a[aL] < b[aL] ? 1 : 0;
  	                    a[aL] = i * base + a[aL] - b[aL];
  	                }

  	                // Remove leading zeros.
  	                for ( ; !a[0] && a.length > 1; a.shift() ){ }
  	            }

  	            // x: dividend, y: divisor.
  	            return function ( x, y, dp, rm, base ) {
  	                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
  	                    yL, yz,
  	                    s = x.s == y.s ? 1 : -1,
  	                    xc = x.c,
  	                    yc = y.c;

  	                // Either NaN, Infinity or 0?
  	                if ( !xc || !xc[0] || !yc || !yc[0] ) {

  	                    return new BigNumber(

  	                      // Return NaN if either NaN, or both Infinity or 0.
  	                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

  	                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
  	                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
  	                    );
  	                }

  	                q = new BigNumber(s);
  	                qc = q.c = [];
  	                e = x.e - y.e;
  	                s = dp + e + 1;

  	                if ( !base ) {
  	                    base = BASE;
  	                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
  	                    s = s / LOG_BASE | 0;
  	                }

  	                // Result exponent may be one less then the current value of e.
  	                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
  	                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ ){ }
  	                if ( yc[i] > ( xc[i] || 0 ) ) { e--; }

  	                if ( s < 0 ) {
  	                    qc.push(1);
  	                    more = true;
  	                } else {
  	                    xL = xc.length;
  	                    yL = yc.length;
  	                    i = 0;
  	                    s += 2;

  	                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

  	                    n = mathfloor( base / ( yc[0] + 1 ) );

  	                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
  	                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
  	                    if ( n > 1 ) {
  	                        yc = multiply( yc, n, base );
  	                        xc = multiply( xc, n, base );
  	                        yL = yc.length;
  	                        xL = xc.length;
  	                    }

  	                    xi = yL;
  	                    rem = xc.slice( 0, yL );
  	                    remL = rem.length;

  	                    // Add zeros to make remainder as long as divisor.
  	                    for ( ; remL < yL; rem[remL++] = 0 ){ }
  	                    yz = yc.slice();
  	                    yz.unshift(0);
  	                    yc0 = yc[0];
  	                    if ( yc[1] >= base / 2 ) { yc0++; }
  	                    // Not necessary, but to prevent trial digit n > base, when using base 3.
  	                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

  	                    do {
  	                        n = 0;

  	                        // Compare divisor and remainder.
  	                        cmp = compare( yc, rem, yL, remL );

  	                        // If divisor < remainder.
  	                        if ( cmp < 0 ) {

  	                            // Calculate trial digit, n.

  	                            rem0 = rem[0];
  	                            if ( yL != remL ) { rem0 = rem0 * base + ( rem[1] || 0 ); }

  	                            // n is how many times the divisor goes into the current remainder.
  	                            n = mathfloor( rem0 / yc0 );

  	                            //  Algorithm:
  	                            //  1. product = divisor * trial digit (n)
  	                            //  2. if product > remainder: product -= divisor, n--
  	                            //  3. remainder -= product
  	                            //  4. if product was < remainder at 2:
  	                            //    5. compare new remainder and divisor
  	                            //    6. If remainder > divisor: remainder -= divisor, n++

  	                            if ( n > 1 ) {

  	                                // n may be > base only when base is 3.
  	                                if (n >= base) { n = base - 1; }

  	                                // product = divisor * trial digit.
  	                                prod = multiply( yc, n, base );
  	                                prodL = prod.length;
  	                                remL = rem.length;

  	                                // Compare product and remainder.
  	                                // If product > remainder.
  	                                // Trial digit n too high.
  	                                // n is 1 too high about 5% of the time, and is not known to have
  	                                // ever been more than 1 too high.
  	                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
  	                                    n--;

  	                                    // Subtract divisor from product.
  	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
  	                                    prodL = prod.length;
  	                                    cmp = 1;
  	                                }
  	                            } else {

  	                                // n is 0 or 1, cmp is -1.
  	                                // If n is 0, there is no need to compare yc and rem again below,
  	                                // so change cmp to 1 to avoid it.
  	                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
  	                                if ( n == 0 ) {

  	                                    // divisor < remainder, so n must be at least 1.
  	                                    cmp = n = 1;
  	                                }

  	                                // product = divisor
  	                                prod = yc.slice();
  	                                prodL = prod.length;
  	                            }

  	                            if ( prodL < remL ) { prod.unshift(0); }

  	                            // Subtract product from remainder.
  	                            subtract( rem, prod, remL, base );
  	                            remL = rem.length;

  	                             // If product was < remainder.
  	                            if ( cmp == -1 ) {

  	                                // Compare divisor and new remainder.
  	                                // If divisor < new remainder, subtract divisor from remainder.
  	                                // Trial digit n too low.
  	                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
  	                                while ( compare( yc, rem, yL, remL ) < 1 ) {
  	                                    n++;

  	                                    // Subtract divisor from remainder.
  	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
  	                                    remL = rem.length;
  	                                }
  	                            }
  	                        } else if ( cmp === 0 ) {
  	                            n++;
  	                            rem = [0];
  	                        } // else cmp === 1 and n will be 0

  	                        // Add the next digit, n, to the result array.
  	                        qc[i++] = n;

  	                        // Update the remainder.
  	                        if ( rem[0] ) {
  	                            rem[remL++] = xc[xi] || 0;
  	                        } else {
  	                            rem = [ xc[xi] ];
  	                            remL = 1;
  	                        }
  	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

  	                    more = rem[0] != null;

  	                    // Leading zero?
  	                    if ( !qc[0] ) { qc.shift(); }
  	                }

  	                if ( base == BASE ) {

  	                    // To calculate q.e, first get the number of digits of qc[0].
  	                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ ){ }
  	                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

  	                // Caller is convertBase.
  	                } else {
  	                    q.e = e;
  	                    q.r = +more;
  	                }

  	                return q;
  	            };
  	        })();


  	        /*
  	         * Return a string representing the value of BigNumber n in fixed-point or exponential
  	         * notation rounded to the specified decimal places or significant digits.
  	         *
  	         * n is a BigNumber.
  	         * i is the index of the last digit required (i.e. the digit that may be rounded up).
  	         * rm is the rounding mode.
  	         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
  	         */
  	        function format( n, i, rm, caller ) {
  	            var c0, e, ne, len, str;

  	            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
  	              ? rm | 0 : ROUNDING_MODE;

  	            if ( !n.c ) { return n.toString(); }
  	            c0 = n.c[0];
  	            ne = n.e;

  	            if ( i == null ) {
  	                str = coeffToString( n.c );
  	                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
  	                  ? toExponential( str, ne )
  	                  : toFixedPoint( str, ne );
  	            } else {
  	                n = round( new BigNumber(n), i, rm );

  	                // n.e may have changed if the value was rounded up.
  	                e = n.e;

  	                str = coeffToString( n.c );
  	                len = str.length;

  	                // toPrecision returns exponential notation if the number of significant digits
  	                // specified is less than the number of digits necessary to represent the integer
  	                // part of the value in fixed-point notation.

  	                // Exponential notation.
  	                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

  	                    // Append zeros?
  	                    for ( ; len < i; str += '0', len++ ){ }
  	                    str = toExponential( str, e );

  	                // Fixed-point notation.
  	                } else {
  	                    i -= ne;
  	                    str = toFixedPoint( str, e );

  	                    // Append zeros?
  	                    if ( e + 1 > len ) {
  	                        if ( --i > 0 ) { for ( str += '.'; i--; str += '0' ){ } }
  	                    } else {
  	                        i += e - len;
  	                        if ( i > 0 ) {
  	                            if ( e + 1 == len ) { str += '.'; }
  	                            for ( ; i--; str += '0' ){ }
  	                        }
  	                    }
  	                }
  	            }

  	            return n.s < 0 && c0 ? '-' + str : str;
  	        }


  	        // Handle BigNumber.max and BigNumber.min.
  	        function maxOrMin( args, method ) {
  	            var m, n,
  	                i = 0;

  	            if ( isArray( args[0] ) ) { args = args[0]; }
  	            m = new BigNumber( args[0] );

  	            for ( ; ++i < args.length; ) {
  	                n = new BigNumber( args[i] );

  	                // If any number is NaN, return NaN.
  	                if ( !n.s ) {
  	                    m = n;
  	                    break;
  	                } else if ( method.call( m, n ) ) {
  	                    m = n;
  	                }
  	            }

  	            return m;
  	        }


  	        /*
  	         * Return true if n is an integer in range, otherwise throw.
  	         * Use for argument validation when ERRORS is true.
  	         */
  	        function intValidatorWithErrors( n, min, max, caller, name ) {
  	            if ( n < min || n > max || n != truncate(n) ) {
  	                raise( caller, ( name || 'decimal places' ) +
  	                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
  	            }

  	            return true;
  	        }


  	        /*
  	         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
  	         * Called by minus, plus and times.
  	         */
  	        function normalise( n, c, e ) {
  	            var i = 1,
  	                j = c.length;

  	             // Remove trailing zeros.
  	            for ( ; !c[--j]; c.pop() ){ }

  	            // Calculate the base 10 exponent. First get the number of digits of c[0].
  	            for ( j = c[0]; j >= 10; j /= 10, i++ ){ }

  	            // Overflow?
  	            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

  	                // Infinity.
  	                n.c = n.e = null;

  	            // Underflow?
  	            } else if ( e < MIN_EXP ) {

  	                // Zero.
  	                n.c = [ n.e = 0 ];
  	            } else {
  	                n.e = e;
  	                n.c = c;
  	            }

  	            return n;
  	        }


  	        // Handle values that fail the validity test in BigNumber.
  	        parseNumeric = (function () {
  	            var basePrefix = /^(-?)0([xbo])/i,
  	                dotAfter = /^([^.]+)\.$/,
  	                dotBefore = /^\.([^.]+)$/,
  	                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
  	                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;

  	            return function ( x, str, num, b ) {
  	                var base,
  	                    s = num ? str : str.replace( whitespaceOrPlus, '' );

  	                // No exception on ±Infinity or NaN.
  	                if ( isInfinityOrNaN.test(s) ) {
  	                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
  	                } else {
  	                    if ( !num ) {

  	                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
  	                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
  	                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
  	                            return !b || b == base ? p1 : m;
  	                        });

  	                        if (b) {
  	                            base = b;

  	                            // E.g. '1.' to '1', '.1' to '0.1'
  	                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
  	                        }

  	                        if ( str != s ) { return new BigNumber( s, base ); }
  	                    }

  	                    // 'new BigNumber() not a number: {n}'
  	                    // 'new BigNumber() not a base {b} number: {n}'
  	                    if (ERRORS) { raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str ); }
  	                    x.s = null;
  	                }

  	                x.c = x.e = null;
  	                id = 0;
  	            }
  	        })();


  	        // Throw a BigNumber Error.
  	        function raise( caller, msg, val ) {
  	            var error = new Error( [
  	                'new BigNumber',     // 0
  	                'cmp',               // 1
  	                'config',            // 2
  	                'div',               // 3
  	                'divToInt',          // 4
  	                'eq',                // 5
  	                'gt',                // 6
  	                'gte',               // 7
  	                'lt',                // 8
  	                'lte',               // 9
  	                'minus',             // 10
  	                'mod',               // 11
  	                'plus',              // 12
  	                'precision',         // 13
  	                'random',            // 14
  	                'round',             // 15
  	                'shift',             // 16
  	                'times',             // 17
  	                'toDigits',          // 18
  	                'toExponential',     // 19
  	                'toFixed',           // 20
  	                'toFormat',          // 21
  	                'toFraction',        // 22
  	                'pow',               // 23
  	                'toPrecision',       // 24
  	                'toString',          // 25
  	                'BigNumber'          // 26
  	            ][caller] + '() ' + msg + ': ' + val );

  	            error.name = 'BigNumber Error';
  	            id = 0;
  	            throw error;
  	        }


  	        /*
  	         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
  	         * If r is truthy, it is known that there are more digits after the rounding digit.
  	         */
  	        function round( x, sd, rm, r ) {
  	            var d, i, j, k, n, ni, rd,
  	                xc = x.c,
  	                pows10 = POWS_TEN;

  	            // if x is not Infinity or NaN...
  	            if (xc) {

  	                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
  	                // n is a base 1e14 number, the value of the element of array x.c containing rd.
  	                // ni is the index of n within x.c.
  	                // d is the number of digits of n.
  	                // i is the index of rd within n including leading zeros.
  	                // j is the actual index of rd within n (if < 0, rd is a leading zero).
  	                out: {

  	                    // Get the number of digits of the first element of xc.
  	                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ ){ }
  	                    i = sd - d;

  	                    // If the rounding digit is in the first element of xc...
  	                    if ( i < 0 ) {
  	                        i += LOG_BASE;
  	                        j = sd;
  	                        n = xc[ ni = 0 ];

  	                        // Get the rounding digit at index j of n.
  	                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
  	                    } else {
  	                        ni = mathceil( ( i + 1 ) / LOG_BASE );

  	                        if ( ni >= xc.length ) {

  	                            if (r) {

  	                                // Needed by sqrt.
  	                                for ( ; xc.length <= ni; xc.push(0) ){ }
  	                                n = rd = 0;
  	                                d = 1;
  	                                i %= LOG_BASE;
  	                                j = i - LOG_BASE + 1;
  	                            } else {
  	                                break out;
  	                            }
  	                        } else {
  	                            n = k = xc[ni];

  	                            // Get the number of digits of n.
  	                            for ( d = 1; k >= 10; k /= 10, d++ ){ }

  	                            // Get the index of rd within n.
  	                            i %= LOG_BASE;

  	                            // Get the index of rd within n, adjusted for leading zeros.
  	                            // The number of leading zeros of n is given by LOG_BASE - d.
  	                            j = i - LOG_BASE + d;

  	                            // Get the rounding digit at index j of n.
  	                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
  	                        }
  	                    }

  	                    r = r || sd < 0 ||

  	                    // Are there any non-zero digits after the rounding digit?
  	                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
  	                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
  	                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

  	                    r = rm < 4
  	                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
  	                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

  	                        // Check whether the digit to the left of the rounding digit is odd.
  	                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
  	                          rm == ( x.s < 0 ? 8 : 7 ) );

  	                    if ( sd < 1 || !xc[0] ) {
  	                        xc.length = 0;

  	                        if (r) {

  	                            // Convert sd to decimal places.
  	                            sd -= x.e + 1;

  	                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
  	                            xc[0] = pows10[ sd % LOG_BASE ];
  	                            x.e = -sd || 0;
  	                        } else {

  	                            // Zero.
  	                            xc[0] = x.e = 0;
  	                        }

  	                        return x;
  	                    }

  	                    // Remove excess digits.
  	                    if ( i == 0 ) {
  	                        xc.length = ni;
  	                        k = 1;
  	                        ni--;
  	                    } else {
  	                        xc.length = ni + 1;
  	                        k = pows10[ LOG_BASE - i ];

  	                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
  	                        // j > 0 means i > number of leading zeros of n.
  	                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
  	                    }

  	                    // Round up?
  	                    if (r) {

  	                        for ( ; ; ) {

  	                            // If the digit to be rounded up is in the first element of xc...
  	                            if ( ni == 0 ) {

  	                                // i will be the length of xc[0] before k is added.
  	                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ ){ }
  	                                j = xc[0] += k;
  	                                for ( k = 1; j >= 10; j /= 10, k++ ){ }

  	                                // if i != k the length has increased.
  	                                if ( i != k ) {
  	                                    x.e++;
  	                                    if ( xc[0] == BASE ) { xc[0] = 1; }
  	                                }

  	                                break;
  	                            } else {
  	                                xc[ni] += k;
  	                                if ( xc[ni] != BASE ) { break; }
  	                                xc[ni--] = 0;
  	                                k = 1;
  	                            }
  	                        }
  	                    }

  	                    // Remove trailing zeros.
  	                    for ( i = xc.length; xc[--i] === 0; xc.pop() ){ }
  	                }

  	                // Overflow? Infinity.
  	                if ( x.e > MAX_EXP ) {
  	                    x.c = x.e = null;

  	                // Underflow? Zero.
  	                } else if ( x.e < MIN_EXP ) {
  	                    x.c = [ x.e = 0 ];
  	                }
  	            }

  	            return x;
  	        }


  	        // PROTOTYPE/INSTANCE METHODS


  	        /*
  	         * Return a new BigNumber whose value is the absolute value of this BigNumber.
  	         */
  	        P.absoluteValue = P.abs = function () {
  	            var x = new BigNumber(this);
  	            if ( x.s < 0 ) { x.s = 1; }
  	            return x;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
  	         * number in the direction of Infinity.
  	         */
  	        P.ceil = function () {
  	            return round( new BigNumber(this), this.e + 1, 2 );
  	        };


  	        /*
  	         * Return
  	         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
  	         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
  	         * 0 if they have the same value,
  	         * or null if the value of either is NaN.
  	         */
  	        P.comparedTo = P.cmp = function ( y, b ) {
  	            id = 1;
  	            return compare( this, new BigNumber( y, b ) );
  	        };


  	        /*
  	         * Return the number of decimal places of the value of this BigNumber, or null if the value
  	         * of this BigNumber is ±Infinity or NaN.
  	         */
  	        P.decimalPlaces = P.dp = function () {
  	            var n, v,
  	                c = this.c;

  	            if ( !c ) { return null; }
  	            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

  	            // Subtract the number of trailing zeros of the last number.
  	            if ( v = c[v] ) { for ( ; v % 10 == 0; v /= 10, n-- ){ } }
  	            if ( n < 0 ) { n = 0; }

  	            return n;
  	        };


  	        /*
  	         *  n / 0 = I
  	         *  n / N = N
  	         *  n / I = 0
  	         *  0 / n = 0
  	         *  0 / 0 = N
  	         *  0 / N = N
  	         *  0 / I = 0
  	         *  N / n = N
  	         *  N / 0 = N
  	         *  N / N = N
  	         *  N / I = N
  	         *  I / n = I
  	         *  I / 0 = I
  	         *  I / N = N
  	         *  I / I = N
  	         *
  	         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
  	         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
  	         */
  	        P.dividedBy = P.div = function ( y, b ) {
  	            id = 3;
  	            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the integer part of dividing the value of this
  	         * BigNumber by the value of BigNumber(y, b).
  	         */
  	        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
  	            id = 4;
  	            return div( this, new BigNumber( y, b ), 0, 1 );
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
  	         * otherwise returns false.
  	         */
  	        P.equals = P.eq = function ( y, b ) {
  	            id = 5;
  	            return compare( this, new BigNumber( y, b ) ) === 0;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
  	         * number in the direction of -Infinity.
  	         */
  	        P.floor = function () {
  	            return round( new BigNumber(this), this.e + 1, 3 );
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
  	         * otherwise returns false.
  	         */
  	        P.greaterThan = P.gt = function ( y, b ) {
  	            id = 6;
  	            return compare( this, new BigNumber( y, b ) ) > 0;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is greater than or equal to the value of
  	         * BigNumber(y, b), otherwise returns false.
  	         */
  	        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
  	            id = 7;
  	            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

  	        };


  	        /*
  	         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
  	         */
  	        P.isFinite = function () {
  	            return !!this.c;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is an integer, otherwise return false.
  	         */
  	        P.isInteger = P.isInt = function () {
  	            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is NaN, otherwise returns false.
  	         */
  	        P.isNaN = function () {
  	            return !this.s;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is negative, otherwise returns false.
  	         */
  	        P.isNegative = P.isNeg = function () {
  	            return this.s < 0;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
  	         */
  	        P.isZero = function () {
  	            return !!this.c && this.c[0] == 0;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
  	         * otherwise returns false.
  	         */
  	        P.lessThan = P.lt = function ( y, b ) {
  	            id = 8;
  	            return compare( this, new BigNumber( y, b ) ) < 0;
  	        };


  	        /*
  	         * Return true if the value of this BigNumber is less than or equal to the value of
  	         * BigNumber(y, b), otherwise returns false.
  	         */
  	        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
  	            id = 9;
  	            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
  	        };


  	        /*
  	         *  n - 0 = n
  	         *  n - N = N
  	         *  n - I = -I
  	         *  0 - n = -n
  	         *  0 - 0 = 0
  	         *  0 - N = N
  	         *  0 - I = -I
  	         *  N - n = N
  	         *  N - 0 = N
  	         *  N - N = N
  	         *  N - I = N
  	         *  I - n = I
  	         *  I - 0 = I
  	         *  I - N = N
  	         *  I - I = N
  	         *
  	         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
  	         * BigNumber(y, b).
  	         */
  	        P.minus = P.sub = function ( y, b ) {
  	            var i, j, t, xLTy,
  	                x = this,
  	                a = x.s;

  	            id = 10;
  	            y = new BigNumber( y, b );
  	            b = y.s;

  	            // Either NaN?
  	            if ( !a || !b ) { return new BigNumber(NaN); }

  	            // Signs differ?
  	            if ( a != b ) {
  	                y.s = -b;
  	                return x.plus(y);
  	            }

  	            var xe = x.e / LOG_BASE,
  	                ye = y.e / LOG_BASE,
  	                xc = x.c,
  	                yc = y.c;

  	            if ( !xe || !ye ) {

  	                // Either Infinity?
  	                if ( !xc || !yc ) { return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN ); }

  	                // Either zero?
  	                if ( !xc[0] || !yc[0] ) {

  	                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
  	                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

  	                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
  	                      ROUNDING_MODE == 3 ? -0 : 0 );
  	                }
  	            }

  	            xe = bitFloor(xe);
  	            ye = bitFloor(ye);
  	            xc = xc.slice();

  	            // Determine which is the bigger number.
  	            if ( a = xe - ye ) {

  	                if ( xLTy = a < 0 ) {
  	                    a = -a;
  	                    t = xc;
  	                } else {
  	                    ye = xe;
  	                    t = yc;
  	                }

  	                t.reverse();

  	                // Prepend zeros to equalise exponents.
  	                for ( b = a; b--; t.push(0) ){ }
  	                t.reverse();
  	            } else {

  	                // Exponents equal. Check digit by digit.
  	                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

  	                for ( a = b = 0; b < j; b++ ) {

  	                    if ( xc[b] != yc[b] ) {
  	                        xLTy = xc[b] < yc[b];
  	                        break;
  	                    }
  	                }
  	            }

  	            // x < y? Point xc to the array of the bigger number.
  	            if (xLTy) { t = xc, xc = yc, yc = t, y.s = -y.s; }

  	            b = ( j = yc.length ) - ( i = xc.length );

  	            // Append zeros to xc if shorter.
  	            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
  	            if ( b > 0 ) { for ( ; b--; xc[i++] = 0 ){ } }
  	            b = BASE - 1;

  	            // Subtract yc from xc.
  	            for ( ; j > a; ) {

  	                if ( xc[--j] < yc[j] ) {
  	                    for ( i = j; i && !xc[--i]; xc[i] = b ){ }
  	                    --xc[i];
  	                    xc[j] += BASE;
  	                }

  	                xc[j] -= yc[j];
  	            }

  	            // Remove leading zeros and adjust exponent accordingly.
  	            for ( ; xc[0] == 0; xc.shift(), --ye ){ }

  	            // Zero?
  	            if ( !xc[0] ) {

  	                // Following IEEE 754 (2008) 6.3,
  	                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
  	                y.s = ROUNDING_MODE == 3 ? -1 : 1;
  	                y.c = [ y.e = 0 ];
  	                return y;
  	            }

  	            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
  	            // for finite x and y.
  	            return normalise( y, xc, ye );
  	        };


  	        /*
  	         *   n % 0 =  N
  	         *   n % N =  N
  	         *   n % I =  n
  	         *   0 % n =  0
  	         *  -0 % n = -0
  	         *   0 % 0 =  N
  	         *   0 % N =  N
  	         *   0 % I =  0
  	         *   N % n =  N
  	         *   N % 0 =  N
  	         *   N % N =  N
  	         *   N % I =  N
  	         *   I % n =  N
  	         *   I % 0 =  N
  	         *   I % N =  N
  	         *   I % I =  N
  	         *
  	         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
  	         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
  	         */
  	        P.modulo = P.mod = function ( y, b ) {
  	            var q, s,
  	                x = this;

  	            id = 11;
  	            y = new BigNumber( y, b );

  	            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
  	            if ( !x.c || !y.s || y.c && !y.c[0] ) {
  	                return new BigNumber(NaN);

  	            // Return x if y is Infinity or x is zero.
  	            } else if ( !y.c || x.c && !x.c[0] ) {
  	                return new BigNumber(x);
  	            }

  	            if ( MODULO_MODE == 9 ) {

  	                // Euclidian division: q = sign(y) * floor(x / abs(y))
  	                // r = x - qy    where  0 <= r < abs(y)
  	                s = y.s;
  	                y.s = 1;
  	                q = div( x, y, 0, 3 );
  	                y.s = s;
  	                q.s *= s;
  	            } else {
  	                q = div( x, y, 0, MODULO_MODE );
  	            }

  	            return x.minus( q.times(y) );
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber negated,
  	         * i.e. multiplied by -1.
  	         */
  	        P.negated = P.neg = function () {
  	            var x = new BigNumber(this);
  	            x.s = -x.s || null;
  	            return x;
  	        };


  	        /*
  	         *  n + 0 = n
  	         *  n + N = N
  	         *  n + I = I
  	         *  0 + n = n
  	         *  0 + 0 = 0
  	         *  0 + N = N
  	         *  0 + I = I
  	         *  N + n = N
  	         *  N + 0 = N
  	         *  N + N = N
  	         *  N + I = N
  	         *  I + n = I
  	         *  I + 0 = I
  	         *  I + N = N
  	         *  I + I = I
  	         *
  	         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
  	         * BigNumber(y, b).
  	         */
  	        P.plus = P.add = function ( y, b ) {
  	            var t,
  	                x = this,
  	                a = x.s;

  	            id = 12;
  	            y = new BigNumber( y, b );
  	            b = y.s;

  	            // Either NaN?
  	            if ( !a || !b ) { return new BigNumber(NaN); }

  	            // Signs differ?
  	             if ( a != b ) {
  	                y.s = -b;
  	                return x.minus(y);
  	            }

  	            var xe = x.e / LOG_BASE,
  	                ye = y.e / LOG_BASE,
  	                xc = x.c,
  	                yc = y.c;

  	            if ( !xe || !ye ) {

  	                // Return ±Infinity if either ±Infinity.
  	                if ( !xc || !yc ) { return new BigNumber( a / 0 ); }

  	                // Either zero?
  	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
  	                if ( !xc[0] || !yc[0] ) { return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 ); }
  	            }

  	            xe = bitFloor(xe);
  	            ye = bitFloor(ye);
  	            xc = xc.slice();

  	            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
  	            if ( a = xe - ye ) {
  	                if ( a > 0 ) {
  	                    ye = xe;
  	                    t = yc;
  	                } else {
  	                    a = -a;
  	                    t = xc;
  	                }

  	                t.reverse();
  	                for ( ; a--; t.push(0) ){ }
  	                t.reverse();
  	            }

  	            a = xc.length;
  	            b = yc.length;

  	            // Point xc to the longer array, and b to the shorter length.
  	            if ( a - b < 0 ) { t = yc, yc = xc, xc = t, b = a; }

  	            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
  	            for ( a = 0; b; ) {
  	                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
  	                xc[b] %= BASE;
  	            }

  	            if (a) {
  	                xc.unshift(a);
  	                ++ye;
  	            }

  	            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
  	            // ye = MAX_EXP + 1 possible
  	            return normalise( y, xc, ye );
  	        };


  	        /*
  	         * Return the number of significant digits of the value of this BigNumber.
  	         *
  	         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
  	         */
  	        P.precision = P.sd = function (z) {
  	            var n, v,
  	                x = this,
  	                c = x.c;

  	            // 'precision() argument not a boolean or binary digit: {z}'
  	            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
  	                if (ERRORS) { raise( 13, 'argument' + notBool, z ); }
  	                if ( z != !!z ) { z = null; }
  	            }

  	            if ( !c ) { return null; }
  	            v = c.length - 1;
  	            n = v * LOG_BASE + 1;

  	            if ( v = c[v] ) {

  	                // Subtract the number of trailing zeros of the last element.
  	                for ( ; v % 10 == 0; v /= 10, n-- ){ }

  	                // Add the number of digits of the first element.
  	                for ( v = c[0]; v >= 10; v /= 10, n++ ){ }
  	            }

  	            if ( z && x.e + 1 > n ) { n = x.e + 1; }

  	            return n;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
  	         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
  	         * omitted.
  	         *
  	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'round() decimal places out of range: {dp}'
  	         * 'round() decimal places not an integer: {dp}'
  	         * 'round() rounding mode not an integer: {rm}'
  	         * 'round() rounding mode out of range: {rm}'
  	         */
  	        P.round = function ( dp, rm ) {
  	            var n = new BigNumber(this);

  	            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
  	                round( n, ~~dp + this.e + 1, rm == null ||
  	                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
  	            }

  	            return n;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
  	         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
  	         *
  	         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
  	         *
  	         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
  	         * otherwise.
  	         *
  	         * 'shift() argument not an integer: {k}'
  	         * 'shift() argument out of range: {k}'
  	         */
  	        P.shift = function (k) {
  	            var n = this;
  	            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

  	              // k < 1e+21, or truncate(k) will produce exponential notation.
  	              ? n.times( '1e' + truncate(k) )
  	              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
  	                ? n.s * ( k < 0 ? 0 : 1 / 0 )
  	                : n );
  	        };


  	        /*
  	         *  sqrt(-n) =  N
  	         *  sqrt( N) =  N
  	         *  sqrt(-I) =  N
  	         *  sqrt( I) =  I
  	         *  sqrt( 0) =  0
  	         *  sqrt(-0) = -0
  	         *
  	         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
  	         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
  	         */
  	        P.squareRoot = P.sqrt = function () {
  	            var m, n, r, rep, t,
  	                x = this,
  	                c = x.c,
  	                s = x.s,
  	                e = x.e,
  	                dp = DECIMAL_PLACES + 4,
  	                half = new BigNumber('0.5');

  	            // Negative/NaN/Infinity/zero?
  	            if ( s !== 1 || !c || !c[0] ) {
  	                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
  	            }

  	            // Initial estimate.
  	            s = Math.sqrt( +x );

  	            // Math.sqrt underflow/overflow?
  	            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
  	            if ( s == 0 || s == 1 / 0 ) {
  	                n = coeffToString(c);
  	                if ( ( n.length + e ) % 2 == 0 ) { n += '0'; }
  	                s = Math.sqrt(n);
  	                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

  	                if ( s == 1 / 0 ) {
  	                    n = '1e' + e;
  	                } else {
  	                    n = s.toExponential();
  	                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
  	                }

  	                r = new BigNumber(n);
  	            } else {
  	                r = new BigNumber( s + '' );
  	            }

  	            // Check for zero.
  	            // r could be zero if MIN_EXP is changed after the this value was created.
  	            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
  	            // coeffToString to throw.
  	            if ( r.c[0] ) {
  	                e = r.e;
  	                s = e + dp;
  	                if ( s < 3 ) { s = 0; }

  	                // Newton-Raphson iteration.
  	                for ( ; ; ) {
  	                    t = r;
  	                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

  	                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
  	                         coeffToString( r.c ) ).slice( 0, s ) ) {

  	                        // The exponent of r may here be one less than the final result exponent,
  	                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
  	                        // are indexed correctly.
  	                        if ( r.e < e ) { --s; }
  	                        n = n.slice( s - 3, s + 1 );

  	                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
  	                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
  	                        // iteration.
  	                        if ( n == '9999' || !rep && n == '4999' ) {

  	                            // On the first iteration only, check to see if rounding up gives the
  	                            // exact result as the nines may infinitely repeat.
  	                            if ( !rep ) {
  	                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

  	                                if ( t.times(t).eq(x) ) {
  	                                    r = t;
  	                                    break;
  	                                }
  	                            }

  	                            dp += 4;
  	                            s += 4;
  	                            rep = 1;
  	                        } else {

  	                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
  	                            // result. If not, then there are further digits and m will be truthy.
  	                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

  	                                // Truncate to the first rounding digit.
  	                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
  	                                m = !r.times(r).eq(x);
  	                            }

  	                            break;
  	                        }
  	                    }
  	                }
  	            }

  	            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
  	        };


  	        /*
  	         *  n * 0 = 0
  	         *  n * N = N
  	         *  n * I = I
  	         *  0 * n = 0
  	         *  0 * 0 = 0
  	         *  0 * N = N
  	         *  0 * I = N
  	         *  N * n = N
  	         *  N * 0 = N
  	         *  N * N = N
  	         *  N * I = N
  	         *  I * n = I
  	         *  I * 0 = N
  	         *  I * N = N
  	         *  I * I = I
  	         *
  	         * Return a new BigNumber whose value is the value of this BigNumber times the value of
  	         * BigNumber(y, b).
  	         */
  	        P.times = P.mul = function ( y, b ) {
  	            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
  	                base, sqrtBase,
  	                x = this,
  	                xc = x.c,
  	                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

  	            // Either NaN, ±Infinity or ±0?
  	            if ( !xc || !yc || !xc[0] || !yc[0] ) {

  	                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
  	                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
  	                    y.c = y.e = y.s = null;
  	                } else {
  	                    y.s *= x.s;

  	                    // Return ±Infinity if either is ±Infinity.
  	                    if ( !xc || !yc ) {
  	                        y.c = y.e = null;

  	                    // Return ±0 if either is ±0.
  	                    } else {
  	                        y.c = [0];
  	                        y.e = 0;
  	                    }
  	                }

  	                return y;
  	            }

  	            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
  	            y.s *= x.s;
  	            xcL = xc.length;
  	            ycL = yc.length;

  	            // Ensure xc points to longer array and xcL to its length.
  	            if ( xcL < ycL ) { zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; }

  	            // Initialise the result array with zeros.
  	            for ( i = xcL + ycL, zc = []; i--; zc.push(0) ){ }

  	            base = BASE;
  	            sqrtBase = SQRT_BASE;

  	            for ( i = ycL; --i >= 0; ) {
  	                c = 0;
  	                ylo = yc[i] % sqrtBase;
  	                yhi = yc[i] / sqrtBase | 0;

  	                for ( k = xcL, j = i + k; j > i; ) {
  	                    xlo = xc[--k] % sqrtBase;
  	                    xhi = xc[k] / sqrtBase | 0;
  	                    m = yhi * xlo + xhi * ylo;
  	                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
  	                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
  	                    zc[j--] = xlo % base;
  	                }

  	                zc[j] = c;
  	            }

  	            if (c) {
  	                ++e;
  	            } else {
  	                zc.shift();
  	            }

  	            return normalise( y, zc, e );
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
  	         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
  	         *
  	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'toDigits() precision out of range: {sd}'
  	         * 'toDigits() precision not an integer: {sd}'
  	         * 'toDigits() rounding mode not an integer: {rm}'
  	         * 'toDigits() rounding mode out of range: {rm}'
  	         */
  	        P.toDigits = function ( sd, rm ) {
  	            var n = new BigNumber(this);
  	            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
  	            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
  	            return sd ? round( n, sd, rm ) : n;
  	        };


  	        /*
  	         * Return a string representing the value of this BigNumber in exponential notation and
  	         * rounded using ROUNDING_MODE to dp fixed decimal places.
  	         *
  	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'toExponential() decimal places not an integer: {dp}'
  	         * 'toExponential() decimal places out of range: {dp}'
  	         * 'toExponential() rounding mode not an integer: {rm}'
  	         * 'toExponential() rounding mode out of range: {rm}'
  	         */
  	        P.toExponential = function ( dp, rm ) {
  	            return format( this,
  	              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
  	        };


  	        /*
  	         * Return a string representing the value of this BigNumber in fixed-point notation rounding
  	         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
  	         *
  	         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
  	         * but e.g. (-0.00001).toFixed(0) is '-0'.
  	         *
  	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'toFixed() decimal places not an integer: {dp}'
  	         * 'toFixed() decimal places out of range: {dp}'
  	         * 'toFixed() rounding mode not an integer: {rm}'
  	         * 'toFixed() rounding mode out of range: {rm}'
  	         */
  	        P.toFixed = function ( dp, rm ) {
  	            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
  	              ? ~~dp + this.e + 1 : null, rm, 20 );
  	        };


  	        /*
  	         * Return a string representing the value of this BigNumber in fixed-point notation rounded
  	         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
  	         * of the FORMAT object (see BigNumber.config).
  	         *
  	         * FORMAT = {
  	         *      decimalSeparator : '.',
  	         *      groupSeparator : ',',
  	         *      groupSize : 3,
  	         *      secondaryGroupSize : 0,
  	         *      fractionGroupSeparator : '\xA0',    // non-breaking space
  	         *      fractionGroupSize : 0
  	         * };
  	         *
  	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'toFormat() decimal places not an integer: {dp}'
  	         * 'toFormat() decimal places out of range: {dp}'
  	         * 'toFormat() rounding mode not an integer: {rm}'
  	         * 'toFormat() rounding mode out of range: {rm}'
  	         */
  	        P.toFormat = function ( dp, rm ) {
  	            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
  	              ? ~~dp + this.e + 1 : null, rm, 21 );

  	            if ( this.c ) {
  	                var i,
  	                    arr = str.split('.'),
  	                    g1 = +FORMAT.groupSize,
  	                    g2 = +FORMAT.secondaryGroupSize,
  	                    groupSeparator = FORMAT.groupSeparator,
  	                    intPart = arr[0],
  	                    fractionPart = arr[1],
  	                    isNeg = this.s < 0,
  	                    intDigits = isNeg ? intPart.slice(1) : intPart,
  	                    len = intDigits.length;

  	                if (g2) { i = g1, g1 = g2, g2 = i, len -= i; }

  	                if ( g1 > 0 && len > 0 ) {
  	                    i = len % g1 || g1;
  	                    intPart = intDigits.substr( 0, i );

  	                    for ( ; i < len; i += g1 ) {
  	                        intPart += groupSeparator + intDigits.substr( i, g1 );
  	                    }

  	                    if ( g2 > 0 ) { intPart += groupSeparator + intDigits.slice(i); }
  	                    if (isNeg) { intPart = '-' + intPart; }
  	                }

  	                str = fractionPart
  	                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
  	                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
  	                      '$&' + FORMAT.fractionGroupSeparator )
  	                    : fractionPart )
  	                  : intPart;
  	            }

  	            return str;
  	        };


  	        /*
  	         * Return a string array representing the value of this BigNumber as a simple fraction with
  	         * an integer numerator and an integer denominator. The denominator will be a positive
  	         * non-zero value less than or equal to the specified maximum denominator. If a maximum
  	         * denominator is not specified, the denominator will be the lowest value necessary to
  	         * represent the number exactly.
  	         *
  	         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
  	         *
  	         * 'toFraction() max denominator not an integer: {md}'
  	         * 'toFraction() max denominator out of range: {md}'
  	         */
  	        P.toFraction = function (md) {
  	            var arr, d0, d2, e, exp, n, n0, q, s,
  	                k = ERRORS,
  	                x = this,
  	                xc = x.c,
  	                d = new BigNumber(ONE),
  	                n1 = d0 = new BigNumber(ONE),
  	                d1 = n0 = new BigNumber(ONE);

  	            if ( md != null ) {
  	                ERRORS = false;
  	                n = new BigNumber(md);
  	                ERRORS = k;

  	                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

  	                    if (ERRORS) {
  	                        raise( 22,
  	                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
  	                    }

  	                    // ERRORS is false:
  	                    // If md is a finite non-integer >= 1, round it to an integer and use it.
  	                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
  	                }
  	            }

  	            if ( !xc ) { return x.toString(); }
  	            s = coeffToString(xc);

  	            // Determine initial denominator.
  	            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
  	            e = d.e = s.length - x.e - 1;
  	            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
  	            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

  	            exp = MAX_EXP;
  	            MAX_EXP = 1 / 0;
  	            n = new BigNumber(s);

  	            // n0 = d1 = 0
  	            n0.c[0] = 0;

  	            for ( ; ; )  {
  	                q = div( n, d, 0, 1 );
  	                d2 = d0.plus( q.times(d1) );
  	                if ( d2.cmp(md) == 1 ) { break; }
  	                d0 = d1;
  	                d1 = d2;
  	                n1 = n0.plus( q.times( d2 = n1 ) );
  	                n0 = d2;
  	                d = n.minus( q.times( d2 = d ) );
  	                n = d2;
  	            }

  	            d2 = div( md.minus(d0), d1, 0, 1 );
  	            n0 = n0.plus( d2.times(n1) );
  	            d0 = d0.plus( d2.times(d1) );
  	            n0.s = n1.s = x.s;
  	            e *= 2;

  	            // Determine which fraction is closer to x, n0/d0 or n1/d1
  	            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
  	                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
  	                    ? [ n1.toString(), d1.toString() ]
  	                    : [ n0.toString(), d0.toString() ];

  	            MAX_EXP = exp;
  	            return arr;
  	        };


  	        /*
  	         * Return the value of this BigNumber converted to a number primitive.
  	         */
  	        P.toNumber = function () {
  	            var x = this;

  	            // Ensure zero has correct sign.
  	            return +x || ( x.s ? x.s * 0 : NaN );
  	        };


  	        /*
  	         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
  	         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
  	         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
  	         *
  	         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
  	         * (Performs 54 loop iterations for n of 9007199254740992.)
  	         *
  	         * 'pow() exponent not an integer: {n}'
  	         * 'pow() exponent out of range: {n}'
  	         */
  	        P.toPower = P.pow = function (n) {
  	            var k, y,
  	                i = mathfloor( n < 0 ? -n : +n ),
  	                x = this;

  	            // Pass ±Infinity to Math.pow if exponent is out of range.
  	            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
  	              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
  	                parseFloat(n) != n && !( n = NaN ) ) ) {
  	                return new BigNumber( Math.pow( +x, n ) );
  	            }

  	            // Truncating each coefficient array to a length of k after each multiplication equates
  	            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
  	            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
  	            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
  	            y = new BigNumber(ONE);

  	            for ( ; ; ) {

  	                if ( i % 2 ) {
  	                    y = y.times(x);
  	                    if ( !y.c ) { break; }
  	                    if ( k && y.c.length > k ) { y.c.length = k; }
  	                }

  	                i = mathfloor( i / 2 );
  	                if ( !i ) { break; }

  	                x = x.times(x);
  	                if ( k && x.c && x.c.length > k ) { x.c.length = k; }
  	            }

  	            if ( n < 0 ) { y = ONE.div(y); }
  	            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
  	        };


  	        /*
  	         * Return a string representing the value of this BigNumber rounded to sd significant digits
  	         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
  	         * necessary to represent the integer part of the value in fixed-point notation, then use
  	         * exponential notation.
  	         *
  	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
  	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
  	         *
  	         * 'toPrecision() precision not an integer: {sd}'
  	         * 'toPrecision() precision out of range: {sd}'
  	         * 'toPrecision() rounding mode not an integer: {rm}'
  	         * 'toPrecision() rounding mode out of range: {rm}'
  	         */
  	        P.toPrecision = function ( sd, rm ) {
  	            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
  	              ? sd | 0 : null, rm, 24 );
  	        };


  	        /*
  	         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
  	         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
  	         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
  	         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
  	         * TO_EXP_NEG, return exponential notation.
  	         *
  	         * [b] {number} Integer, 2 to 64 inclusive.
  	         *
  	         * 'toString() base not an integer: {b}'
  	         * 'toString() base out of range: {b}'
  	         */
  	        P.toString = function (b) {
  	            var str,
  	                n = this,
  	                s = n.s,
  	                e = n.e;

  	            // Infinity or NaN?
  	            if ( e === null ) {

  	                if (s) {
  	                    str = 'Infinity';
  	                    if ( s < 0 ) { str = '-' + str; }
  	                } else {
  	                    str = 'NaN';
  	                }
  	            } else {
  	                str = coeffToString( n.c );

  	                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
  	                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
  	                      ? toExponential( str, e )
  	                      : toFixedPoint( str, e );
  	                } else {
  	                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
  	                }

  	                if ( s < 0 && n.c[0] ) { str = '-' + str; }
  	            }

  	            return str;
  	        };


  	        /*
  	         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
  	         * number.
  	         */
  	        P.truncated = P.trunc = function () {
  	            return round( new BigNumber(this), this.e + 1, 1 );
  	        };



  	        /*
  	         * Return as toString, but do not accept a base argument.
  	         */
  	        P.valueOf = P.toJSON = function () {
  	            return this.toString();
  	        };


  	        // Aliases for BigDecimal methods.
  	        //P.add = P.plus;         // P.add included above
  	        //P.subtract = P.minus;   // P.sub included above
  	        //P.multiply = P.times;   // P.mul included above
  	        //P.divide = P.div;
  	        //P.remainder = P.mod;
  	        //P.compareTo = P.cmp;
  	        //P.negate = P.neg;


  	        if ( configObj != null ) { BigNumber.config(configObj); }

  	        return BigNumber;
  	    }


  	    // PRIVATE HELPER FUNCTIONS


  	    function bitFloor(n) {
  	        var i = n | 0;
  	        return n > 0 || n === i ? i : i - 1;
  	    }


  	    // Return a coefficient array as a string of base 10 digits.
  	    function coeffToString(a) {
  	        var s, z,
  	            i = 1,
  	            j = a.length,
  	            r = a[0] + '';

  	        for ( ; i < j; ) {
  	            s = a[i++] + '';
  	            z = LOG_BASE - s.length;
  	            for ( ; z--; s = '0' + s ){ }
  	            r += s;
  	        }

  	        // Determine trailing zeros.
  	        for ( j = r.length; r.charCodeAt(--j) === 48; ){ }
  	        return r.slice( 0, j + 1 || 1 );
  	    }


  	    // Compare the value of BigNumbers x and y.
  	    function compare( x, y ) {
  	        var a, b,
  	            xc = x.c,
  	            yc = y.c,
  	            i = x.s,
  	            j = y.s,
  	            k = x.e,
  	            l = y.e;

  	        // Either NaN?
  	        if ( !i || !j ) { return null; }

  	        a = xc && !xc[0];
  	        b = yc && !yc[0];

  	        // Either zero?
  	        if ( a || b ) { return a ? b ? 0 : -j : i; }

  	        // Signs differ?
  	        if ( i != j ) { return i; }

  	        a = i < 0;
  	        b = k == l;

  	        // Either Infinity?
  	        if ( !xc || !yc ) { return b ? 0 : !xc ^ a ? 1 : -1; }

  	        // Compare exponents.
  	        if ( !b ) { return k > l ^ a ? 1 : -1; }

  	        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

  	        // Compare digit by digit.
  	        for ( i = 0; i < j; i++ ) { if ( xc[i] != yc[i] ) { return xc[i] > yc[i] ^ a ? 1 : -1; } }

  	        // Compare lengths.
  	        return k == l ? 0 : k > l ^ a ? 1 : -1;
  	    }


  	    /*
  	     * Return true if n is a valid number in range, otherwise false.
  	     * Use for argument validation when ERRORS is false.
  	     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
  	     */
  	    function intValidatorNoErrors( n, min, max ) {
  	        return ( n = truncate(n) ) >= min && n <= max;
  	    }


  	    function isArray(obj) {
  	        return Object.prototype.toString.call(obj) == '[object Array]';
  	    }


  	    /*
  	     * Convert string of baseIn to an array of numbers of baseOut.
  	     * Eg. convertBase('255', 10, 16) returns [15, 15].
  	     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  	     */
  	    function toBaseOut( str, baseIn, baseOut ) {
  	        var j,
  	            arr = [0],
  	            arrL,
  	            i = 0,
  	            len = str.length;

  	        for ( ; i < len; ) {
  	            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn ){ }
  	            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

  	            for ( ; j < arr.length; j++ ) {

  	                if ( arr[j] > baseOut - 1 ) {
  	                    if ( arr[j + 1] == null ) { arr[j + 1] = 0; }
  	                    arr[j + 1] += arr[j] / baseOut | 0;
  	                    arr[j] %= baseOut;
  	                }
  	            }
  	        }

  	        return arr.reverse();
  	    }


  	    function toExponential( str, e ) {
  	        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
  	          ( e < 0 ? 'e' : 'e+' ) + e;
  	    }


  	    function toFixedPoint( str, e ) {
  	        var len, z;

  	        // Negative exponent?
  	        if ( e < 0 ) {

  	            // Prepend zeros.
  	            for ( z = '0.'; ++e; z += '0' ){ }
  	            str = z + str;

  	        // Positive exponent
  	        } else {
  	            len = str.length;

  	            // Append zeros.
  	            if ( ++e > len ) {
  	                for ( z = '0', e -= len; --e; z += '0' ){ }
  	                str += z;
  	            } else if ( e < len ) {
  	                str = str.slice( 0, e ) + '.' + str.slice(e);
  	            }
  	        }

  	        return str;
  	    }


  	    function truncate(n) {
  	        n = parseFloat(n);
  	        return n < 0 ? mathceil(n) : mathfloor(n);
  	    }


  	    // EXPORT


  	    BigNumber = another();

  	    // AMD.
  	    if ( typeof module != 'undefined' && module.exports ) {
  	        module.exports = BigNumber;
  	        if ( !crypto ) { try { crypto = require('crypto'); } catch (e) {} }

  	    // Browser.
  	    } else {
  	        global.BigNumber = BigNumber;
  	    }
  	})(this);

  	},{"crypto":52}],"web3":[function(require,module,exports){
  	var Web3 = require('./lib/web3');

  	// dont override global variable
  	if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {
  	    window.Web3 = Web3;
  	}

  	module.exports = Web3;

  	},{"./lib/web3":22}]},{},["web3"]);

  	});

  	/**
  	 * Returns a Promise that resolves to the value of window.ethereum if it is
  	 * set within the given timeout, or null.
  	 * The Promise will not reject, but an error will be thrown if invalid options
  	 * are provided.
  	 *
  	 * @param options - Options bag.
  	 * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.
  	 * Default: false
  	 * @param options.silent - Whether to silence console errors. Does not affect
  	 * thrown errors. Default: false
  	 * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to
  	 * be dispatched. Default: 3000
  	 * @returns A Promise that resolves with the Provider if it is detected within
  	 * given timeout, otherwise null.
  	 */
  	function detectEthereumProvider(ref) {
  	    if ( ref === void 0 ) ref = {};
  	    var mustBeMetaMask = ref.mustBeMetaMask; if ( mustBeMetaMask === void 0 ) mustBeMetaMask = false;
  	    var silent = ref.silent; if ( silent === void 0 ) silent = false;
  	    var timeout = ref.timeout; if ( timeout === void 0 ) timeout = 3000;

  	    _validateInputs();
  	    var handled = false;
  	    return new Promise(function (resolve) {
  	        if (window.ethereum) {
  	            handleEthereum();
  	        }
  	        else {
  	            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });
  	            setTimeout(function () {
  	                handleEthereum();
  	            }, timeout);
  	        }
  	        function handleEthereum() {
  	            if (handled) {
  	                return;
  	            }
  	            handled = true;
  	            window.removeEventListener('ethereum#initialized', handleEthereum);
  	            var ethereum = window.ethereum;
  	            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
  	                resolve(ethereum);
  	            }
  	            else {
  	                var message = mustBeMetaMask && ethereum
  	                    ? 'Non-MetaMask window.ethereum detected.'
  	                    : 'Unable to detect window.ethereum.';
  	                !silent && console.error('@metamask/detect-provider:', message);
  	                resolve(null);
  	            }
  	        }
  	    });
  	    function _validateInputs() {
  	        if (typeof mustBeMetaMask !== 'boolean') {
  	            throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");
  	        }
  	        if (typeof silent !== 'boolean') {
  	            throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");
  	        }
  	        if (typeof timeout !== 'number') {
  	            throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.");
  	        }
  	    }
  	}
  	var dist = detectEthereumProvider;

  	var getMessage = function (message) { return ("@metamask/legacy-web3 - " + message); };
  	var getExitMessage = function (message) { return ((getMessage(message)) + " Exiting without initializing window.web3."); };

  	setupWeb3();

  	/**
  	 * Inject window.web3 and set up auto reload on chain/network change.
  	 */
  	function setupWeb3 () {

  	  if (window.ethereum) {
  	    _setupWeb3();
  	  } else {
  	    dist({ silent: true })
  	      .then(function (_provider) {
  	        if (window.ethereum) {
  	          _setupWeb3();
  	        } else {
  	          console.log(getExitMessage('Failed to detect window.ethereum.'));
  	        }
  	      })
  	      .catch(function (error) {
  	        console.error(
  	          getExitMessage('Unexpected error when detecting window.ethereum.'),
  	          error
  	        );
  	      });
  	  }

  	  function _setupWeb3 () {

  	    // if used before MetaMask stops injecting window.web3
  	    if (
  	      window.ethereum &&
  	      window.ethereum.isMetaMask &&
  	      window.web3 &&
  	      !window.web3.__isMetaMaskShim__
  	    ) {
  	      console.log(getExitMessage('Detected MetaMask-injected window.web3.'));
  	      return
  	    }

  	    // MetaMask will continue to inject a web3 Proxy, with this hidden
  	    // identifier
  	    if (window.web3 && !window.web3.__isMetaMaskShim__) {
  	      console.log(getExitMessage('Detected existing window.web3.'));
  	      return
  	    }

  	    if (window.ethereum && !window.ethereum.isMetaMask) {
  	      console.warn(getMessage(
  	        'Detected non-MetaMask window.ethereum. ' +
  	        'Proceeding to initialize window.web3, but may experience undefined behavior.'
  	      ));
  	    }

  	    if (!('autoRefreshOnNetworkChange' in window.ethereum)) {
  	      window.ethereum.autoRefreshOnNetworkChange = true;
  	    }

  	    var web3 = new Web3(window.ethereum);
  	    web3.setProvider = function () {
  	      console.log(getMessage('Overrode web3.setProvider.'));
  	    };
  	    console.log(getMessage('Injected web3.'));

  	    var handleAccounts = function (accounts) {
  	      web3.eth.defaultAccount = Array.isArray(accounts) && accounts.length > 0
  	        ? accounts[0]
  	        : null;
  	    };

  	    if (window.ethereum.selectedAddress) {
  	      web3.eth.defaultAccount = window.ethereum.selectedAddress;
  	    } else {
  	      var req = { method: 'eth_accounts' };

  	      if (typeof window.ethereum.request === 'function') {
  	        window.ethereum.request(req)
  	          .then(handleAccounts)
  	          .catch(function () { return undefined; });
  	      } else {
  	        window.ethereum.sendAsync(req, function (error, response) {
  	          if (!error && response) {
  	            handleAccounts(response.result);
  	          }
  	        });
  	      }
  	    }
  	    window.ethereum.on('accountsChanged', handleAccounts);

  	    // export web3 as a global, checking for usage
  	    var reloadInProgress = false;
  	    var lastTimeUsed;
  	    var previousChainId;

  	    var web3Proxy = new Proxy(web3, {
  	      get: function (_web3, key) {
  	        // get the time of use
  	        lastTimeUsed = Date.now();
  	        // return value normally
  	        return _web3[key]
  	      },
  	      set: function (_web3, key, value) {
  	        // set value normally
  	        _web3[key] = value;
  	      },
  	    });

  	    Object.defineProperty(window, 'web3', {
  	      enumerable: false,
  	      writable: true,
  	      configurable: true,
  	      value: web3Proxy,
  	    });

  	    window.ethereum.on('chainChanged', function (currentChainId) {
  	      // if the auto refresh on network change is false do not
  	      // do anything
  	      if (!window.ethereum.autoRefreshOnNetworkChange) {
  	        return
  	      }

  	      // if reload in progress, no need to check reload logic
  	      if (reloadInProgress) {
  	        return
  	      }

  	      // set the initial chain
  	      if (!previousChainId) {
  	        previousChainId = currentChainId;
  	        return
  	      }

  	      // skip reload logic if web3 not used
  	      if (!lastTimeUsed) {
  	        return
  	      }

  	      // if chain did not change, exit
  	      if (currentChainId === previousChainId) {
  	        return
  	      }

  	      // initiate page reload
  	      reloadInProgress = true;
  	      var timeSinceUse = Date.now() - lastTimeUsed;
  	      // if web3 was recently used then delay the reloading of the page
  	      if (timeSinceUse > 500) {
  	        window.location.reload();
  	      } else {
  	        setTimeout(window.location.reload, 500);
  	      }
  	    });
  	  }
  	}

  })));
  });

  unwrapExports(metamask_web3);

  var disperse = {
    abi: [
      'function disperseEther(address[] recipients, uint256[] values)',
      'function disperseToken(address token, address[] recipients, uint256[] values)',
      'function disperseTokenSimple(address token, address[] recipients, uint256[] values)' ],
    address: {
      1: '0xD152f549545093347A162Dce210e7293f1452150',     // mainnet
      3: '0xD152f549545093347A162Dce210e7293f1452150',     // ropsten
      4: '0xD152f549545093347A162Dce210e7293f1452150',     // rinkeby
      5: '0xD152f549545093347A162Dce210e7293f1452150',     // goerli
      42: '0xD152f549545093347A162Dce210e7293f1452150',    // kovan
      56: '0xD152f549545093347A162Dce210e7293f1452150',    // bsc mainnet
      77: '0xD152f549545093347A162Dce210e7293f1452150',    // poa sokol
      99: '0xD152f549545093347A162Dce210e7293f1452150',    // poa network
      100: '0xD152f549545093347A162Dce210e7293f1452150',   // xdai chain
      137: '0xD152f549545093347A162Dce210e7293f1452150',   // matic
      163: '0xD152f549545093347A162Dce210e7293f1452150',   // lightstreams
      256: '0xD152f549545093347A162Dce210e7293f1452150',   // fantom
      5777: '0x5b1869d9a4c187f2eaa108f3062412ecf0526b24',  // ganache-cli
    },
  };

  var erc20 = {
    abi: [
      'function name() view returns (string)',
      'function symbol() view returns (string)',
      'function decimals() view returns (uint8)',
      'function balanceOf(address) view returns (uint256)',
      'function allowance(address, address) view returns (uint256)',
      'function approve(address, uint256) returns (bool)' ]
  };

  var ds_token = {
    abi: [
      'function name() view returns (bytes32)',
      'function symbol() view returns (bytes32)',
      'function decimals() view returns (uint8)',
      'function balanceOf(address) view returns (uint256)',
      'function allowance(address, address) view returns (uint256)',
      'function approve(address, uint256) returns (bool)' ]
  };

  var networks = {
    1: {
      name: "mainnet",
      symbol: "ETH",
      explorer: {
        name: 'etherscan',
        base: 'https://etherscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    3: {
      name: "ropsten",
      symbol: "ETH",
      explorer: {
        name: 'etherscan',
        base: 'https://ropsten.etherscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    42: {
      name: "kovan",
      symbol: "KETH",
      explorer: {
        name: 'etherscan',
        base: 'https://kovan.etherscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    56: {
      name: "bsc mainnet",
      symbol: "BNB",
      explorer: {
        name: 'bscscan',
        base: 'https://bscscan.com/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    4: {
      name: "rinkeby",
      symbol: "ETH",
      explorer: {
        name: 'etherscan',
        base: 'https://rinkeby.etherscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    5: {
      name: "görli",
      symbol: "ETH",
      explorer: {
        name: 'etherscan',
        base: 'https://goerli.etherscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    61: {
      name: "etc mainnet",
      symbol: "ETC",
      explorer: {
        name: 'blockscout',
        base: 'https://blockscout.com/etc/mainnet',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    77: {
      name: "poa sokol",
      symbol: "SPOA",
      explorer: {
        name: 'blockscout',
        base: 'https://blockscout.com/poa/sokol/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    99: {
      name: "poa network",
      symbol: "POA",
      explorer: {
        name: 'blockscout',
        base: 'https://blockscout.com/poa/core/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    100: {
      name: "xdai chain",
      symbol: "xDAI",
      explorer: {
        name: 'blockscout',
        base: 'https://blockscout.com/poa/dai/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    137: {
      name: "matic network",
      symbol: "MATIC",
      explorer: {
        name: 'matic explorer',
        base: 'https://explorer.matic.network/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    163: {
      name: "lightstreams",
      symbol: "PHT",
      explorer: {
        name: 'explorer',
        base: 'https://explorer.lightstreams.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("addr/" + addr); },
      },
    },
    250: {
      name: "fantom",
      symbol: "FRM",
      explorer: {
        name: 'ftmscan',
        base: 'https://ftmscan.io/',
        tx: function (tx) { return ("tx/" + tx); },
        addr: function (addr) { return ("address/" + addr); },
      },
    },
    5777: {
      name: "ganache",
      symbol: "ETH",
    }
  };

  function explorer_tx(tx) {
    if (!tx) { return }
    var network = networks[web3.version.network];
    if (network && network.explorer) {
      return  ("" + (network.explorer.base) + (network.explorer.tx(tx)))
    }
  }

  function explorer_addr(addr) {
    if (!addr) { return }
    var network = networks[web3.version.network];
    if (network && network.explorer) {
      return  ("" + (network.explorer.base) + (network.explorer.addr(addr)))
    }
  }

  function explorer_name() {
    var network = networks[web3.version.network];
    if (network && network.explorer) {
      return network.explorer.name
    }
  }

  function network_name() {
    var network = web3.version.network;
    if (!network) { return }
    return networks[network] ? networks[network].name : '🤔'
  }

  function native_symbol() {
    var network = networks[web3.version.network];
    return network ? network.symbol : 'ETH'
  }

  var states = Object.freeze({
      METAMASK_REQUIRED: 1,
      NETWORK_UNAVAILABLE: 2,
      UNLOCK_METAMASK: 3,
      CONNECTED_TO_WALLET: 4,
      SELECTED_CURRENCY: 5,
      ENTERED_AMOUNTS: 6,
  });

  riot$1.tag2('disperse-app', '<section> <disperse-logo state="{state}" disperse="{disperse}"></disperse-logo> </section> <section if="{state === states.METAMASK_REQUIRED}"> <h2>metamask required</h2> <p>non-ethereum browser, consider installing metamask.</p> </section> <section if="{state === states.NETWORK_UNAVAILABLE}"> <h2>network not yet supported</h2> <p>let us know on telegram and we\'ll deploy the contract on this network.</p> <p>network id: {network}</p> </section> <section if="{state &gt;= states.UNLOCK_METAMASK &amp;&amp; wallet.status}"> <h2>connect to wallet</h2> <p>{wallet.status}</p> </section> <section if="{state &gt;= states.CONNECTED_TO_WALLET}"> <disperse-currency on-select="{select_currency}"></disperse-currency> <p if="{sending == &quot;ether&quot;}">you have <disperse-amount amount="{wallet.balance}" symbol="{symbol()}" decimals="{decimals()}"></disperse-amount> </p> </section> <section if="{state &gt;= states.CONNECTED_TO_WALLET &amp;&amp; sending === &quot;token&quot;}"> <disperse-token-loader on-select="{select_token}" on-error="{reset_token}"></disperse-token-loader> </section> <section show="{state &gt;= states.SELECTED_CURRENCY}"> <h2>recipients and amounts</h2> <p>enter one address and amount in {symbol()} on each line. supports any format.</p> <div class="shadow"> <textarea ref="addresses" spellcheck="false" oninput="{check_amounts}"></textarea> </div> </section> <section if="{state &gt;= states.ENTERED_AMOUNTS}"> <h2>confirm</h2> <disperse-addresses addresses="{addresses}" symbol="{symbol()}" decimals="{decimals()}" balance="{balance()}" left="{left()}" total="{total()}"></disperse-addresses> <disperse-transaction show="{sending === &quot;ether&quot;}" disabled="{left() &lt; 0}" title="disperse ether" action="{disperseEther}" message="{disperse_message()}"></disperse-transaction> </section> <div if="{state &gt;= states.ENTERED_AMOUNTS &amp;&amp; sending == &quot;token&quot;}"> <h2>allowance</h2> <p show="{token.allowance.lt(total())}">allow smart contract to transfer tokens on your behalf.</p> <p show="{token.allowance.gte(total())}">disperse contract has allowance, you can send tokens now.</p> <disperse-transaction class="{secondary: token.allowance.gte(total())}" title="{token.allowance.lt(total()) ? &quot;approve&quot; : &quot;revoke&quot;}" action="{token.allowance.lt(total()) ? approve : deny}"></disperse-transaction> <disperse-transaction show="{sending === &quot;token&quot;}" disabled="{left() &lt; 0 || token.allowance.lt(total())}" title="disperse token" action="{disperseToken}" message="{disperse_message()}"></disperse-transaction> </div>', '', '', function(opts) {
      var this$1 = this;


      this.states = states;
      this.state = 0;

      this.info = {
        debug: {},
        token: {},
        approve: {},
        disperse: {},
      };
      this.network = null;
      this.network_unavailable = false;
      this.wallet = {
        address: null,
        status: null,
      };

      this.disperse = {};
      this.token = {};

      this.sending = null;

      this.on('mount', function () {
        this$1.refs.addresses.placeholder = '0x314ab97b76e39d63c78d5c86c2daf8eaa306b182 3.141592\n0x271bffabd0f79b8bd4d7a1c245b7ec5b576ea98a,2.7182\n0x141ca95b6177615fb1417cf70e930e102bf8f584=1.41421';
      });

      this.select_currency =async  function(event) {
        this.sending = event.target.value;
        if (this.sending == 'ether') {
          this.update({state: this.states.SELECTED_CURRENCY});
          this.parse_amounts();
        }
        else if (this.sending == 'token') {
          if (this.token.contract) {
            this.select_token();
          } else {
            this.reset_token();
          }
        }
      }.bind(this);

      this.reset_token =async  function() {
        this.update({state: this.states.CONNECTED_TO_WALLET, token: {}});
      }.bind(this);

      this.select_token =async  function() {
        this.update({state: this.states.SELECTED_CURRENCY});
        await this.update_balance();
        this.parse_amounts();
        console.log(("loaded token " + (this.token.address)));
      }.bind(this);

      this.check_amounts =async  function(e) {
        e.preventDefault();
        this.parse_amounts();
      }.bind(this);

      this.parse_amounts =async  function() {
        var pattern = RegExp(/(0x[0-9a-fA-F]{40}).+?([0-9\.]+)/, 'g');
        this.addresses = [];
        var result;
        while ((result = pattern.exec(this.refs.addresses.value)) !== null) {
          this.addresses.push({
            address: ethers.utils.getAddress(result[1]),
            value: ethers.utils.parseUnits(result[2], this.decimals())
          });
        }
        if (this.addresses.length) {
          this.update({state: this.states.ENTERED_AMOUNTS});
        }
      }.bind(this);

      this.approve =async  function() {

        return this.token.contract.approve(this.disperse.address, ethers.constants.MaxUint256)
      }.bind(this);

      this.deny =async  function() {
        return this.token.contract.approve(this.disperse.address, ethers.constants.Zero)
      }.bind(this);

      this.disperseEther =async  function() {
        var recipients = this.addresses.map(function (e) { return e.address; });
        var values = this.addresses.map(function (e) { return e.value; });
        console.log('disperseEther', recipients, values, this.total().toString());
        return this.disperse.contract.disperseEther(recipients, values, {value: this.total()})
      }.bind(this);

      this.disperseToken =async  function() {
        var recipients = this.addresses.map(function (e) { return e.address; });
        var values = this.addresses.map(function (e) { return e.value; });
        console.log('disperseToken', this.token.address, recipients, values, this.total().toString());
        var transaction = this.disperse.contract.disperseToken(this.token.address, recipients, values);
        return transaction
      }.bind(this);

      this.symbol = function() {
        return this.sending === 'token' ? this.token.symbol : native_symbol()
      }.bind(this);

      this.decimals = function() {
        return this.sending == 'token' ? this.token.decimals :  18
      }.bind(this);

      this.total = function() {
        return this.addresses.reduce(function (t, v) { return t.add(v.value); }, ethers.constants.Zero)
      }.bind(this);

      this.left = function() {
        switch (this.sending) {
          case 'token': return this.token.balance.sub(this.total())
          case 'ether': return this.wallet.balance.sub(this.total())
        }
      }.bind(this);

      this.balance = function() {
        switch (this.sending) {
          case 'token': return this.token.balance
          case 'ether': return this.wallet.balance
        }
      }.bind(this);

      this.disperse_message = function() {
        if (this.sending === 'token' && this.token.allowance.lt(this.total())) { return 'needs allowance' }
        if (this.left() < 0) { return 'total exceeds balance' }
      }.bind(this);

      this.update_balance =async  function() {
        this.wallet.balance = await this.provider.getBalance(this.wallet.address);
        if (this.token.contract) {
          this.token.balance = await this.token.contract.balanceOf(this.wallet.address);
          this.token.allowance = await this.token.contract.allowance(this.wallet.address, this.disperse.address);
        }
        this.update();
      }.bind(this);

      this.watch_account =async  function() {
        var account = web3.eth.accounts[0];
        if (this.wallet.address !== account) {
          this.wallet.address = account;
          this.wallet.status = account ? ("logged in as " + account) : 'please unlock metamask';
          if (account) {
            await this.update_balance();
            if (this.state === this.states.UNLOCK_METAMASK) {
              this.state = this.states.CONNECTED_TO_WALLET;
            }
          } else {
            this.state = this.states.UNLOCK_METAMASK;
          }
          this.update();
        }
      }.bind(this);

      this.watch_network =async  function() {
        var network = web3.version.network;
        if (this.network && this.network !== network) {
          location.reload();
        }
        this.network = this.network ? this.network : network;
      }.bind(this);

      this.afterWeb3 = function() {
        this.provider = new ethers.providers.Web3Provider(web3.currentProvider);
        this.network = web3.version.nework;
        this.load_disperse_contract();
        setInterval(this.watch_account, 100);
        setInterval(this.watch_network, 500);
        if (this.state !== this.states.NETWORK_UNAVAILABLE) {
          this.update({state: this.states.UNLOCK_METAMASK});
        }
      }.bind(this);

      this.load_disperse_contract = function() {
        this.network = web3.version.network;
        console.log(this.network);
        this.disperse.address = disperse.address[this.network];
        if ('disperse' in localStorage) {
          try {
            this.disperse.address = ethers.utils.getAddress(localStorage.getItem('disperse'));
            console.log('disperse address override');
          } catch (e) {
            console.error('failed to override address');
          }
        }
        if (this.disperse.address) {
          this.disperse.contract = new ethers.Contract(
            this.disperse.address,
            disperse.abi,
            this.provider.getSigner()
          );
          console.log(("Disperse contract initialized at " + (this.disperse.address)));
        } else {
          this.update({state: this.states.NETWORK_UNAVAILABLE});
        }
      }.bind(this);

      this.connectWeb3 =async  function() {
          if (window.ethereum) {
              window.web3 = new Web3(ethereum);
              try {
                  await ethereum.enable();
              } catch (error) {
                  this.wallet.status = 'please unlock metamask';
              }
              this.afterWeb3();
          }
          else if (window.web3) {
              window.web3 = new Web3(web3.currentProvider);
              this.afterWeb3();
          }
          else {
            this.update({state: this.states.METAMASK_REQUIRED});
          }
        }.bind(this);

      window.addEventListener('load', this.connectWeb3);
  });

  riot$1.tag2('disperse-logo', '<header> <div class="eth {logo_class()}"><svg id="svg" version="1.1" width="50" height="50" viewbox="0 0 400 400" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;"><g id="svgg"><path id="path0" d="M196.423 21.530 C 195.612 23.471,171.105 64.622,141.963 112.977 C 112.821 161.331,88.735 201.528,88.437 202.304 C 88.050 203.313,103.882 213.162,143.951 236.838 L 200.008 269.960 256.049 236.820 C 296.310 213.011,311.937 203.279,311.546 202.259 C 309.521 196.981,200.545 18.000,199.356 18.000 C 198.554 18.000,197.234 19.588,196.423 21.530 M88.570 226.125 C 90.730 229.818,199.545 382.920,200.000 382.906 C 200.752 382.883,312.004 225.671,311.574 225.240 C 311.168 224.835,207.179 286.081,202.841 289.280 L 200.182 291.242 146.341 259.454 C 116.728 241.971,91.406 226.961,90.070 226.100 C 87.855 224.673,87.722 224.675,88.570 226.125 " stroke="none" fill="#cccccc" fill-rule="evenodd"></path></g></svg></div> <h1>disperse<sup>{network_name()}</sup></h1> <div class="expand"></div> <div><a href="{explorer_addr(opts.disperse.address)}" target="_blank">{explorer_name()}</a><a href="https://t.me/disperse" target="_blank">telegram</a></div> </header> <p><em>verb</em><span style="font-style: normal"> distribute ether or tokens to multiple addresses</span></p>', 'disperse-logo header,[data-is="disperse-logo"] header{ display: flex; align-items: baseline; } disperse-logo sup,[data-is="disperse-logo"] sup{ font-size: 1.4rem; margin-left: .7rem; top: -1.4rem; } disperse-logo a,[data-is="disperse-logo"] a{ font-size: 1.4rem; margin-right: 1.4rem; } disperse-logo .eth svg path,[data-is="disperse-logo"] .eth svg path{ transition: fill .3s !important; } disperse-logo .active svg path,[data-is="disperse-logo"] .active svg path{ fill: aquamarine !important; } disperse-logo .inactive svg path,[data-is="disperse-logo"] .inactive svg path{ fill: crimson !important; }', '', function(opts) {

      this.network_name = network_name;
      this.explorer_name = explorer_name;
      this.explorer_addr = explorer_addr;
      this.states = states;

      this.logo_class = function() {
        return this.opts.state >= this.states.CONNECTED_TO_WALLET ? 'active' : 'inactive'
      }.bind(this);

  });

  riot$1.tag2('disperse-currency', '<div class="chooser"> <label>send</label> <input type="radio" value="ether" name="what" id="ether" onchange="{opts.onSelect}"> <label for="ether">ether</label> <label>or</label> <input type="radio" value="token" name="what" id="token" onchange="{opts.onSelect}"> <label for="token">token</label> </div>', 'disperse-currency .chooser,[data-is="disperse-currency"] .chooser{ font-style: italic; margin-top: 2.1rem; margin-bottom: 1.4rem; } disperse-currency label,[data-is="disperse-currency"] label{ margin-right: .25rem; font-size: 2.2rem; } disperse-currency input[type="radio"],[data-is="disperse-currency"] input[type="radio"]{ display: none; color: #111111; } disperse-currency input[type="radio"] + label,[data-is="disperse-currency"] input[type="radio"] + label{ display: inline-block; font-size: 2.2rem; color: rgba(0, 0, 0, 0.5); border-bottom: 2px rgba(0, 0, 0, 0.5) solid; } disperse-currency input[type="radio"]:checked + label,[data-is="disperse-currency"] input[type="radio"]:checked + label{ color: #111111; border-bottom: 2px #111111 solid; background: aquamarine; }', '', function(opts) {
  });

  riot$1.tag2('disperse-addresses', '<ul> <li class="accent"> <div class="flex"> <div>address</div> <div class="expand"></div> <div>amount</div> </div> </li> <li each="{addr in opts.addresses}"> <div class="flex"> <div>{addr.address}</div> <div class="expand bar"></div> <disperse-amount amount="{addr.value}" symbol="{opts.symbol}" decimals="{opts.decimals}"></disperse-amount> </div> </li> </ul> <ul> <li class="accent"> <div class="flex"> <div>total</div> <div class="expand"></div> <disperse-amount amount="{opts.total}" symbol="{opts.symbol}" decimals="{opts.decimals}"></disperse-amount> </div> </li> <li class="accent"> <div class="flex"> <div>your balance</div> <div class="expand"></div> <disperse-amount amount="{opts.balance}" symbol="{opts.symbol}" decimals="{opts.decimals}"></disperse-amount> </div> </li> <li class="accent"> <div class="flex fade {negative: opts.left &lt; 0}"> <div>remaining</div> <div class="expand"></div> <disperse-amount amount="{opts.left}" symbol="{opts.symbol}" decimals="{opts.decimals}"></disperse-amount> </div> </li> </ul>', 'disperse-addresses .accent,[data-is="disperse-addresses"] .accent{ font-style: italic; } disperse-addresses .bar,[data-is="disperse-addresses"] .bar{ margin: auto 0.3em; border-bottom: 1px #111111 solid; } disperse-addresses .fade,[data-is="disperse-addresses"] .fade{ transition: color .3s; } disperse-addresses .negative,[data-is="disperse-addresses"] .negative{ color: crimson; }', '', function(opts) {
  });

  riot$1.tag2('disperse-amount', '<span>{amount()} </span><span class="sc">{opts.symbol}</span>', 'disperse-amount .sc,[data-is="disperse-amount"] .sc{ font-variant: all-small-caps; }', '', function(opts) {
      this.amount = function() {
        return ethers.utils.formatUnits(this.opts.amount, this.opts.decimals)
      }.bind(this);

  });

  riot$1.tag2('disperse-transaction', '<input type="submit" riot-value="{opts.title}" onclick="{submit}" disabled="{opts.disabled}"> <div class="status"> <div show="{opts.message}">{opts.message}</div> <div class="{status}">{message}</div><a class="hash" target="_blank" href="{explorer_tx(hash)}">{hash}</a> </div>', 'disperse-transaction { font-size: 1.4rem; display: flex; align-items: baseline; margin-bottom: 1.4rem; } disperse-transaction .status,[data-is="disperse-transaction"] .status{ margin-left: 1.4rem; font-style: italic; } disperse-transaction .status .pending,[data-is="disperse-transaction"] .status .pending{ animation: pulse 1.5s infinite; animation-direction: alternate; animation-timing-function: ease-in-out; } disperse-transaction .status .success,[data-is="disperse-transaction"] .status .success{ color: #28bd14; } disperse-transaction .status .failed,[data-is="disperse-transaction"] .status .failed{ color: #d43939; } disperse-transaction .hash,[data-is="disperse-transaction"] .hash{ font-style: normal; font-size: 1rem; } disperse-transaction input[type="submit"]:disabled,[data-is="disperse-transaction"] input[type="submit"]:disabled{ opacity: .4; } disperse-transaction.secondary input { background: none; border: 1px crimson solid; } @keyframes pulse { 0% { color: rgba(0, 0, 0, 0.2); } 100% { color: rgba(0, 0, 0, 0.5); } }', '', function(opts) {

      this.explorer_tx = explorer_tx;
      this.status = null;
      this.message = null;
      this.hash = null;
      this.tx = null;

      this.submit =async  function(e) {
        this.update({message: 'sign transaction with metamask', status: 'approve', hash: null, tx: null});

        try {

          this.tx = await this.opts.action();

          this.update({message: 'transaction pending', status: 'pending', hash: this.tx.hash});
          console.log(this.tx);
        } catch(error) {

          this.update({message: 'transaction rejected', status: 'failed'});
          console.log('rejected', error);
          return
        }

        try {

          var receipt = await this.tx.wait();
          console.log(receipt);
          var status = receipt.status ? 'success' : 'failed';
          this.update({message: ("transaction " + status), status: status});
          await this.parent.update_balance();
        } catch(error) {

          this.update({message: 'transaction failed', status: 'failed'});
          console.log('reverted', error);
        }
      }.bind(this);

  });

  riot$1.tag2('disperse-token-loader', '<h2>token address</h2> <form onsubmit="{load_token}"> <div class="flex"> <input type="text" ref="token" placeholder="0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"> <input type="submit" value="load"> </div> <p class="{status}">{message}</p> <p if="{parent.token.balance}">you have <disperse-amount amount="{parent.token.balance}" symbol="{parent.symbol()}" decimals="{parent.decimals()}"></disperse-amount><span> ({parent.token.name})</span> </p> </form>', 'disperse-token-loader input[type="text"],[data-is="disperse-token-loader"] input[type="text"]{ flex-grow: 1; border: none; border-bottom: 2px #111 solid; padding: .7rem; background: aquamarine; margin-right: 1.4rem; } disperse-token-loader input[type="text"]:focus,[data-is="disperse-token-loader"] input[type="text"]:focus{ outline: none; }', '', function(opts) {
      var this$1 = this;


      this.token = null;
      this.status = null;
      this.message = null;

      this.on('mount', function () {
        this$1.refs.token.value = this$1.parent.token.address ? this$1.parent.token.address : '';
      });

      this.load_token =async  function(e) {
        e.preventDefault();
        var address = this.refs.token.value;
        console.log('load token', address);
        this.update({message: 'loading token info...', status: 'pending'});
        await this.opts.onError();
        if (!address) {
          this.update({message: 'input token address', status: 'error'});
          return
        }
        try {

          address = ethers.utils.getAddress(address);
        } catch (error) {

          console.log(error);
          this.update({message: 'invalid address', status: 'error'});
          await this.opts.onError();
          return
        }
        try {

          var token = new ethers.Contract(address, erc20.abi, this.parent.provider.getSigner());
          this.parent.token = {
            address: address,
            contract: token,
            balance: null,
            name: await token.name(),
            symbol: await token.symbol(),
            decimals: await token.decimals(),
          };
        } catch (error) {
          console.log('token is not erc-20 compatible, assuming ds-token...');

          try {
            var token$1 = new ethers.Contract(address, ds_token.abi, this.parent.provider.getSigner());
            this.parent.token = {
              address: address,
              contract: token$1,
              balance: null,
              name: ethers.utils.parseBytes32String(await token$1.name()),
              symbol: ethers.utils.parseBytes32String(await token$1.symbol()),
              decimals: await token$1.decimals(),
            };
          } catch (error) {

            console.log(error);
            this.update({message: 'unsupported token', status: 'error'});
            await this.opts.onError();
            return
          }
        }
        await this.opts.onSelect();
        this.update({message: null, status: null});
      }.bind(this);

  });

  window.ethers = ethers$1;
  riot$1.mount('*');

}());
//# sourceMappingURL=bundle.js.map
